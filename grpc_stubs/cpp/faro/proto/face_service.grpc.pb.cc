// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: faro/proto/face_service.proto

#include "faro/proto/face_service.pb.h"
#include "faro/proto/face_service.grpc.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>

static const char* FaceRecognition_method_names[] = {
  "/FaceRecognition/status",
  "/FaceRecognition/detect",
  "/FaceRecognition/extract",
  "/FaceRecognition/score",
  "/FaceRecognition/enroll",
  "/FaceRecognition/search",
  "/FaceRecognition/detectExtract",
  "/FaceRecognition/detectExtractEnroll",
  "/FaceRecognition/detectExtractSearch",
  "/FaceRecognition/galleryList",
  "/FaceRecognition/galleryDelete",
  "/FaceRecognition/enrollmentList",
  "/FaceRecognition/enrollmentDelete",
  "/FaceRecognition/enrollmentDeleteConditional",
  "/FaceRecognition/enrollmentTransfer",
  "/FaceRecognition/echo",
};

std::unique_ptr< FaceRecognition::Stub> FaceRecognition::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< FaceRecognition::Stub> stub(new FaceRecognition::Stub(channel));
  return stub;
}

FaceRecognition::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_status_(FaceRecognition_method_names[0], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_detect_(FaceRecognition_method_names[1], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_extract_(FaceRecognition_method_names[2], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_score_(FaceRecognition_method_names[3], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_enroll_(FaceRecognition_method_names[4], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_search_(FaceRecognition_method_names[5], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_detectExtract_(FaceRecognition_method_names[6], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_detectExtractEnroll_(FaceRecognition_method_names[7], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_detectExtractSearch_(FaceRecognition_method_names[8], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_galleryList_(FaceRecognition_method_names[9], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_galleryDelete_(FaceRecognition_method_names[10], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_enrollmentList_(FaceRecognition_method_names[11], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_enrollmentDelete_(FaceRecognition_method_names[12], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_enrollmentDeleteConditional_(FaceRecognition_method_names[13], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_enrollmentTransfer_(FaceRecognition_method_names[14], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_echo_(FaceRecognition_method_names[15], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status FaceRecognition::Stub::status(::grpc::ClientContext* context, const ::FaceStatusRequest& request, ::FaceServiceInfo* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_status_, context, request, response);
}

void FaceRecognition::Stub::experimental_async::status(::grpc::ClientContext* context, const ::FaceStatusRequest* request, ::FaceServiceInfo* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_status_, context, request, response, std::move(f));
}

void FaceRecognition::Stub::experimental_async::status(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::FaceServiceInfo* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_status_, context, request, response, std::move(f));
}

void FaceRecognition::Stub::experimental_async::status(::grpc::ClientContext* context, const ::FaceStatusRequest* request, ::FaceServiceInfo* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_status_, context, request, response, reactor);
}

void FaceRecognition::Stub::experimental_async::status(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::FaceServiceInfo* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_status_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::FaceServiceInfo>* FaceRecognition::Stub::AsyncstatusRaw(::grpc::ClientContext* context, const ::FaceStatusRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::FaceServiceInfo>::Create(channel_.get(), cq, rpcmethod_status_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::FaceServiceInfo>* FaceRecognition::Stub::PrepareAsyncstatusRaw(::grpc::ClientContext* context, const ::FaceStatusRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::FaceServiceInfo>::Create(channel_.get(), cq, rpcmethod_status_, context, request, false);
}

::grpc::Status FaceRecognition::Stub::detect(::grpc::ClientContext* context, const ::DetectRequest& request, ::FaceRecordList* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_detect_, context, request, response);
}

void FaceRecognition::Stub::experimental_async::detect(::grpc::ClientContext* context, const ::DetectRequest* request, ::FaceRecordList* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_detect_, context, request, response, std::move(f));
}

void FaceRecognition::Stub::experimental_async::detect(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::FaceRecordList* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_detect_, context, request, response, std::move(f));
}

void FaceRecognition::Stub::experimental_async::detect(::grpc::ClientContext* context, const ::DetectRequest* request, ::FaceRecordList* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_detect_, context, request, response, reactor);
}

void FaceRecognition::Stub::experimental_async::detect(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::FaceRecordList* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_detect_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::FaceRecordList>* FaceRecognition::Stub::AsyncdetectRaw(::grpc::ClientContext* context, const ::DetectRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::FaceRecordList>::Create(channel_.get(), cq, rpcmethod_detect_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::FaceRecordList>* FaceRecognition::Stub::PrepareAsyncdetectRaw(::grpc::ClientContext* context, const ::DetectRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::FaceRecordList>::Create(channel_.get(), cq, rpcmethod_detect_, context, request, false);
}

::grpc::Status FaceRecognition::Stub::extract(::grpc::ClientContext* context, const ::ExtractRequest& request, ::FaceRecordList* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_extract_, context, request, response);
}

void FaceRecognition::Stub::experimental_async::extract(::grpc::ClientContext* context, const ::ExtractRequest* request, ::FaceRecordList* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_extract_, context, request, response, std::move(f));
}

void FaceRecognition::Stub::experimental_async::extract(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::FaceRecordList* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_extract_, context, request, response, std::move(f));
}

void FaceRecognition::Stub::experimental_async::extract(::grpc::ClientContext* context, const ::ExtractRequest* request, ::FaceRecordList* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_extract_, context, request, response, reactor);
}

void FaceRecognition::Stub::experimental_async::extract(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::FaceRecordList* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_extract_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::FaceRecordList>* FaceRecognition::Stub::AsyncextractRaw(::grpc::ClientContext* context, const ::ExtractRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::FaceRecordList>::Create(channel_.get(), cq, rpcmethod_extract_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::FaceRecordList>* FaceRecognition::Stub::PrepareAsyncextractRaw(::grpc::ClientContext* context, const ::ExtractRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::FaceRecordList>::Create(channel_.get(), cq, rpcmethod_extract_, context, request, false);
}

::grpc::Status FaceRecognition::Stub::score(::grpc::ClientContext* context, const ::ScoreRequest& request, ::Matrix* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_score_, context, request, response);
}

void FaceRecognition::Stub::experimental_async::score(::grpc::ClientContext* context, const ::ScoreRequest* request, ::Matrix* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_score_, context, request, response, std::move(f));
}

void FaceRecognition::Stub::experimental_async::score(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::Matrix* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_score_, context, request, response, std::move(f));
}

void FaceRecognition::Stub::experimental_async::score(::grpc::ClientContext* context, const ::ScoreRequest* request, ::Matrix* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_score_, context, request, response, reactor);
}

void FaceRecognition::Stub::experimental_async::score(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::Matrix* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_score_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::Matrix>* FaceRecognition::Stub::AsyncscoreRaw(::grpc::ClientContext* context, const ::ScoreRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::Matrix>::Create(channel_.get(), cq, rpcmethod_score_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::Matrix>* FaceRecognition::Stub::PrepareAsyncscoreRaw(::grpc::ClientContext* context, const ::ScoreRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::Matrix>::Create(channel_.get(), cq, rpcmethod_score_, context, request, false);
}

::grpc::Status FaceRecognition::Stub::enroll(::grpc::ClientContext* context, const ::EnrollRequest& request, ::FaceRecordList* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_enroll_, context, request, response);
}

void FaceRecognition::Stub::experimental_async::enroll(::grpc::ClientContext* context, const ::EnrollRequest* request, ::FaceRecordList* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_enroll_, context, request, response, std::move(f));
}

void FaceRecognition::Stub::experimental_async::enroll(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::FaceRecordList* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_enroll_, context, request, response, std::move(f));
}

void FaceRecognition::Stub::experimental_async::enroll(::grpc::ClientContext* context, const ::EnrollRequest* request, ::FaceRecordList* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_enroll_, context, request, response, reactor);
}

void FaceRecognition::Stub::experimental_async::enroll(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::FaceRecordList* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_enroll_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::FaceRecordList>* FaceRecognition::Stub::AsyncenrollRaw(::grpc::ClientContext* context, const ::EnrollRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::FaceRecordList>::Create(channel_.get(), cq, rpcmethod_enroll_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::FaceRecordList>* FaceRecognition::Stub::PrepareAsyncenrollRaw(::grpc::ClientContext* context, const ::EnrollRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::FaceRecordList>::Create(channel_.get(), cq, rpcmethod_enroll_, context, request, false);
}

::grpc::Status FaceRecognition::Stub::search(::grpc::ClientContext* context, const ::SearchRequest& request, ::FaceRecordList* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_search_, context, request, response);
}

void FaceRecognition::Stub::experimental_async::search(::grpc::ClientContext* context, const ::SearchRequest* request, ::FaceRecordList* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_search_, context, request, response, std::move(f));
}

void FaceRecognition::Stub::experimental_async::search(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::FaceRecordList* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_search_, context, request, response, std::move(f));
}

void FaceRecognition::Stub::experimental_async::search(::grpc::ClientContext* context, const ::SearchRequest* request, ::FaceRecordList* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_search_, context, request, response, reactor);
}

void FaceRecognition::Stub::experimental_async::search(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::FaceRecordList* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_search_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::FaceRecordList>* FaceRecognition::Stub::AsyncsearchRaw(::grpc::ClientContext* context, const ::SearchRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::FaceRecordList>::Create(channel_.get(), cq, rpcmethod_search_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::FaceRecordList>* FaceRecognition::Stub::PrepareAsyncsearchRaw(::grpc::ClientContext* context, const ::SearchRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::FaceRecordList>::Create(channel_.get(), cq, rpcmethod_search_, context, request, false);
}

::grpc::Status FaceRecognition::Stub::detectExtract(::grpc::ClientContext* context, const ::DetectExtractRequest& request, ::FaceRecordList* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_detectExtract_, context, request, response);
}

void FaceRecognition::Stub::experimental_async::detectExtract(::grpc::ClientContext* context, const ::DetectExtractRequest* request, ::FaceRecordList* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_detectExtract_, context, request, response, std::move(f));
}

void FaceRecognition::Stub::experimental_async::detectExtract(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::FaceRecordList* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_detectExtract_, context, request, response, std::move(f));
}

void FaceRecognition::Stub::experimental_async::detectExtract(::grpc::ClientContext* context, const ::DetectExtractRequest* request, ::FaceRecordList* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_detectExtract_, context, request, response, reactor);
}

void FaceRecognition::Stub::experimental_async::detectExtract(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::FaceRecordList* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_detectExtract_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::FaceRecordList>* FaceRecognition::Stub::AsyncdetectExtractRaw(::grpc::ClientContext* context, const ::DetectExtractRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::FaceRecordList>::Create(channel_.get(), cq, rpcmethod_detectExtract_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::FaceRecordList>* FaceRecognition::Stub::PrepareAsyncdetectExtractRaw(::grpc::ClientContext* context, const ::DetectExtractRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::FaceRecordList>::Create(channel_.get(), cq, rpcmethod_detectExtract_, context, request, false);
}

::grpc::Status FaceRecognition::Stub::detectExtractEnroll(::grpc::ClientContext* context, const ::DetectExtractEnrollRequest& request, ::FaceRecordList* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_detectExtractEnroll_, context, request, response);
}

void FaceRecognition::Stub::experimental_async::detectExtractEnroll(::grpc::ClientContext* context, const ::DetectExtractEnrollRequest* request, ::FaceRecordList* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_detectExtractEnroll_, context, request, response, std::move(f));
}

void FaceRecognition::Stub::experimental_async::detectExtractEnroll(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::FaceRecordList* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_detectExtractEnroll_, context, request, response, std::move(f));
}

void FaceRecognition::Stub::experimental_async::detectExtractEnroll(::grpc::ClientContext* context, const ::DetectExtractEnrollRequest* request, ::FaceRecordList* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_detectExtractEnroll_, context, request, response, reactor);
}

void FaceRecognition::Stub::experimental_async::detectExtractEnroll(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::FaceRecordList* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_detectExtractEnroll_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::FaceRecordList>* FaceRecognition::Stub::AsyncdetectExtractEnrollRaw(::grpc::ClientContext* context, const ::DetectExtractEnrollRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::FaceRecordList>::Create(channel_.get(), cq, rpcmethod_detectExtractEnroll_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::FaceRecordList>* FaceRecognition::Stub::PrepareAsyncdetectExtractEnrollRaw(::grpc::ClientContext* context, const ::DetectExtractEnrollRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::FaceRecordList>::Create(channel_.get(), cq, rpcmethod_detectExtractEnroll_, context, request, false);
}

::grpc::Status FaceRecognition::Stub::detectExtractSearch(::grpc::ClientContext* context, const ::DetectExtractSearchRequest& request, ::FaceRecordList* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_detectExtractSearch_, context, request, response);
}

void FaceRecognition::Stub::experimental_async::detectExtractSearch(::grpc::ClientContext* context, const ::DetectExtractSearchRequest* request, ::FaceRecordList* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_detectExtractSearch_, context, request, response, std::move(f));
}

void FaceRecognition::Stub::experimental_async::detectExtractSearch(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::FaceRecordList* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_detectExtractSearch_, context, request, response, std::move(f));
}

void FaceRecognition::Stub::experimental_async::detectExtractSearch(::grpc::ClientContext* context, const ::DetectExtractSearchRequest* request, ::FaceRecordList* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_detectExtractSearch_, context, request, response, reactor);
}

void FaceRecognition::Stub::experimental_async::detectExtractSearch(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::FaceRecordList* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_detectExtractSearch_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::FaceRecordList>* FaceRecognition::Stub::AsyncdetectExtractSearchRaw(::grpc::ClientContext* context, const ::DetectExtractSearchRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::FaceRecordList>::Create(channel_.get(), cq, rpcmethod_detectExtractSearch_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::FaceRecordList>* FaceRecognition::Stub::PrepareAsyncdetectExtractSearchRaw(::grpc::ClientContext* context, const ::DetectExtractSearchRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::FaceRecordList>::Create(channel_.get(), cq, rpcmethod_detectExtractSearch_, context, request, false);
}

::grpc::Status FaceRecognition::Stub::galleryList(::grpc::ClientContext* context, const ::GalleryListRequest& request, ::GalleryList* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_galleryList_, context, request, response);
}

void FaceRecognition::Stub::experimental_async::galleryList(::grpc::ClientContext* context, const ::GalleryListRequest* request, ::GalleryList* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_galleryList_, context, request, response, std::move(f));
}

void FaceRecognition::Stub::experimental_async::galleryList(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::GalleryList* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_galleryList_, context, request, response, std::move(f));
}

void FaceRecognition::Stub::experimental_async::galleryList(::grpc::ClientContext* context, const ::GalleryListRequest* request, ::GalleryList* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_galleryList_, context, request, response, reactor);
}

void FaceRecognition::Stub::experimental_async::galleryList(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::GalleryList* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_galleryList_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::GalleryList>* FaceRecognition::Stub::AsyncgalleryListRaw(::grpc::ClientContext* context, const ::GalleryListRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::GalleryList>::Create(channel_.get(), cq, rpcmethod_galleryList_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::GalleryList>* FaceRecognition::Stub::PrepareAsyncgalleryListRaw(::grpc::ClientContext* context, const ::GalleryListRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::GalleryList>::Create(channel_.get(), cq, rpcmethod_galleryList_, context, request, false);
}

::grpc::Status FaceRecognition::Stub::galleryDelete(::grpc::ClientContext* context, const ::GalleryDeleteRequest& request, ::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_galleryDelete_, context, request, response);
}

void FaceRecognition::Stub::experimental_async::galleryDelete(::grpc::ClientContext* context, const ::GalleryDeleteRequest* request, ::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_galleryDelete_, context, request, response, std::move(f));
}

void FaceRecognition::Stub::experimental_async::galleryDelete(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_galleryDelete_, context, request, response, std::move(f));
}

void FaceRecognition::Stub::experimental_async::galleryDelete(::grpc::ClientContext* context, const ::GalleryDeleteRequest* request, ::Empty* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_galleryDelete_, context, request, response, reactor);
}

void FaceRecognition::Stub::experimental_async::galleryDelete(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::Empty* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_galleryDelete_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::Empty>* FaceRecognition::Stub::AsyncgalleryDeleteRaw(::grpc::ClientContext* context, const ::GalleryDeleteRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::Empty>::Create(channel_.get(), cq, rpcmethod_galleryDelete_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::Empty>* FaceRecognition::Stub::PrepareAsyncgalleryDeleteRaw(::grpc::ClientContext* context, const ::GalleryDeleteRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::Empty>::Create(channel_.get(), cq, rpcmethod_galleryDelete_, context, request, false);
}

::grpc::Status FaceRecognition::Stub::enrollmentList(::grpc::ClientContext* context, const ::EnrollmentListRequest& request, ::FaceRecordList* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_enrollmentList_, context, request, response);
}

void FaceRecognition::Stub::experimental_async::enrollmentList(::grpc::ClientContext* context, const ::EnrollmentListRequest* request, ::FaceRecordList* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_enrollmentList_, context, request, response, std::move(f));
}

void FaceRecognition::Stub::experimental_async::enrollmentList(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::FaceRecordList* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_enrollmentList_, context, request, response, std::move(f));
}

void FaceRecognition::Stub::experimental_async::enrollmentList(::grpc::ClientContext* context, const ::EnrollmentListRequest* request, ::FaceRecordList* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_enrollmentList_, context, request, response, reactor);
}

void FaceRecognition::Stub::experimental_async::enrollmentList(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::FaceRecordList* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_enrollmentList_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::FaceRecordList>* FaceRecognition::Stub::AsyncenrollmentListRaw(::grpc::ClientContext* context, const ::EnrollmentListRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::FaceRecordList>::Create(channel_.get(), cq, rpcmethod_enrollmentList_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::FaceRecordList>* FaceRecognition::Stub::PrepareAsyncenrollmentListRaw(::grpc::ClientContext* context, const ::EnrollmentListRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::FaceRecordList>::Create(channel_.get(), cq, rpcmethod_enrollmentList_, context, request, false);
}

::grpc::Status FaceRecognition::Stub::enrollmentDelete(::grpc::ClientContext* context, const ::EnrollmentDeleteRequest& request, ::FaceRecordList* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_enrollmentDelete_, context, request, response);
}

void FaceRecognition::Stub::experimental_async::enrollmentDelete(::grpc::ClientContext* context, const ::EnrollmentDeleteRequest* request, ::FaceRecordList* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_enrollmentDelete_, context, request, response, std::move(f));
}

void FaceRecognition::Stub::experimental_async::enrollmentDelete(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::FaceRecordList* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_enrollmentDelete_, context, request, response, std::move(f));
}

void FaceRecognition::Stub::experimental_async::enrollmentDelete(::grpc::ClientContext* context, const ::EnrollmentDeleteRequest* request, ::FaceRecordList* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_enrollmentDelete_, context, request, response, reactor);
}

void FaceRecognition::Stub::experimental_async::enrollmentDelete(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::FaceRecordList* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_enrollmentDelete_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::FaceRecordList>* FaceRecognition::Stub::AsyncenrollmentDeleteRaw(::grpc::ClientContext* context, const ::EnrollmentDeleteRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::FaceRecordList>::Create(channel_.get(), cq, rpcmethod_enrollmentDelete_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::FaceRecordList>* FaceRecognition::Stub::PrepareAsyncenrollmentDeleteRaw(::grpc::ClientContext* context, const ::EnrollmentDeleteRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::FaceRecordList>::Create(channel_.get(), cq, rpcmethod_enrollmentDelete_, context, request, false);
}

::grpc::Status FaceRecognition::Stub::enrollmentDeleteConditional(::grpc::ClientContext* context, const ::EnrollmentDeleteRequest& request, ::FaceRecordList* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_enrollmentDeleteConditional_, context, request, response);
}

void FaceRecognition::Stub::experimental_async::enrollmentDeleteConditional(::grpc::ClientContext* context, const ::EnrollmentDeleteRequest* request, ::FaceRecordList* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_enrollmentDeleteConditional_, context, request, response, std::move(f));
}

void FaceRecognition::Stub::experimental_async::enrollmentDeleteConditional(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::FaceRecordList* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_enrollmentDeleteConditional_, context, request, response, std::move(f));
}

void FaceRecognition::Stub::experimental_async::enrollmentDeleteConditional(::grpc::ClientContext* context, const ::EnrollmentDeleteRequest* request, ::FaceRecordList* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_enrollmentDeleteConditional_, context, request, response, reactor);
}

void FaceRecognition::Stub::experimental_async::enrollmentDeleteConditional(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::FaceRecordList* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_enrollmentDeleteConditional_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::FaceRecordList>* FaceRecognition::Stub::AsyncenrollmentDeleteConditionalRaw(::grpc::ClientContext* context, const ::EnrollmentDeleteRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::FaceRecordList>::Create(channel_.get(), cq, rpcmethod_enrollmentDeleteConditional_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::FaceRecordList>* FaceRecognition::Stub::PrepareAsyncenrollmentDeleteConditionalRaw(::grpc::ClientContext* context, const ::EnrollmentDeleteRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::FaceRecordList>::Create(channel_.get(), cq, rpcmethod_enrollmentDeleteConditional_, context, request, false);
}

::grpc::Status FaceRecognition::Stub::enrollmentTransfer(::grpc::ClientContext* context, const ::EnrollmentDeleteRequest& request, ::FaceRecordList* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_enrollmentTransfer_, context, request, response);
}

void FaceRecognition::Stub::experimental_async::enrollmentTransfer(::grpc::ClientContext* context, const ::EnrollmentDeleteRequest* request, ::FaceRecordList* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_enrollmentTransfer_, context, request, response, std::move(f));
}

void FaceRecognition::Stub::experimental_async::enrollmentTransfer(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::FaceRecordList* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_enrollmentTransfer_, context, request, response, std::move(f));
}

void FaceRecognition::Stub::experimental_async::enrollmentTransfer(::grpc::ClientContext* context, const ::EnrollmentDeleteRequest* request, ::FaceRecordList* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_enrollmentTransfer_, context, request, response, reactor);
}

void FaceRecognition::Stub::experimental_async::enrollmentTransfer(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::FaceRecordList* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_enrollmentTransfer_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::FaceRecordList>* FaceRecognition::Stub::AsyncenrollmentTransferRaw(::grpc::ClientContext* context, const ::EnrollmentDeleteRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::FaceRecordList>::Create(channel_.get(), cq, rpcmethod_enrollmentTransfer_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::FaceRecordList>* FaceRecognition::Stub::PrepareAsyncenrollmentTransferRaw(::grpc::ClientContext* context, const ::EnrollmentDeleteRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::FaceRecordList>::Create(channel_.get(), cq, rpcmethod_enrollmentTransfer_, context, request, false);
}

::grpc::Status FaceRecognition::Stub::echo(::grpc::ClientContext* context, const ::Matrix& request, ::Matrix* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_echo_, context, request, response);
}

void FaceRecognition::Stub::experimental_async::echo(::grpc::ClientContext* context, const ::Matrix* request, ::Matrix* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_echo_, context, request, response, std::move(f));
}

void FaceRecognition::Stub::experimental_async::echo(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::Matrix* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_echo_, context, request, response, std::move(f));
}

void FaceRecognition::Stub::experimental_async::echo(::grpc::ClientContext* context, const ::Matrix* request, ::Matrix* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_echo_, context, request, response, reactor);
}

void FaceRecognition::Stub::experimental_async::echo(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::Matrix* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_echo_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::Matrix>* FaceRecognition::Stub::AsyncechoRaw(::grpc::ClientContext* context, const ::Matrix& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::Matrix>::Create(channel_.get(), cq, rpcmethod_echo_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::Matrix>* FaceRecognition::Stub::PrepareAsyncechoRaw(::grpc::ClientContext* context, const ::Matrix& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::Matrix>::Create(channel_.get(), cq, rpcmethod_echo_, context, request, false);
}

FaceRecognition::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      FaceRecognition_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< FaceRecognition::Service, ::FaceStatusRequest, ::FaceServiceInfo>(
          std::mem_fn(&FaceRecognition::Service::status), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      FaceRecognition_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< FaceRecognition::Service, ::DetectRequest, ::FaceRecordList>(
          std::mem_fn(&FaceRecognition::Service::detect), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      FaceRecognition_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< FaceRecognition::Service, ::ExtractRequest, ::FaceRecordList>(
          std::mem_fn(&FaceRecognition::Service::extract), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      FaceRecognition_method_names[3],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< FaceRecognition::Service, ::ScoreRequest, ::Matrix>(
          std::mem_fn(&FaceRecognition::Service::score), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      FaceRecognition_method_names[4],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< FaceRecognition::Service, ::EnrollRequest, ::FaceRecordList>(
          std::mem_fn(&FaceRecognition::Service::enroll), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      FaceRecognition_method_names[5],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< FaceRecognition::Service, ::SearchRequest, ::FaceRecordList>(
          std::mem_fn(&FaceRecognition::Service::search), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      FaceRecognition_method_names[6],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< FaceRecognition::Service, ::DetectExtractRequest, ::FaceRecordList>(
          std::mem_fn(&FaceRecognition::Service::detectExtract), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      FaceRecognition_method_names[7],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< FaceRecognition::Service, ::DetectExtractEnrollRequest, ::FaceRecordList>(
          std::mem_fn(&FaceRecognition::Service::detectExtractEnroll), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      FaceRecognition_method_names[8],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< FaceRecognition::Service, ::DetectExtractSearchRequest, ::FaceRecordList>(
          std::mem_fn(&FaceRecognition::Service::detectExtractSearch), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      FaceRecognition_method_names[9],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< FaceRecognition::Service, ::GalleryListRequest, ::GalleryList>(
          std::mem_fn(&FaceRecognition::Service::galleryList), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      FaceRecognition_method_names[10],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< FaceRecognition::Service, ::GalleryDeleteRequest, ::Empty>(
          std::mem_fn(&FaceRecognition::Service::galleryDelete), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      FaceRecognition_method_names[11],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< FaceRecognition::Service, ::EnrollmentListRequest, ::FaceRecordList>(
          std::mem_fn(&FaceRecognition::Service::enrollmentList), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      FaceRecognition_method_names[12],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< FaceRecognition::Service, ::EnrollmentDeleteRequest, ::FaceRecordList>(
          std::mem_fn(&FaceRecognition::Service::enrollmentDelete), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      FaceRecognition_method_names[13],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< FaceRecognition::Service, ::EnrollmentDeleteRequest, ::FaceRecordList>(
          std::mem_fn(&FaceRecognition::Service::enrollmentDeleteConditional), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      FaceRecognition_method_names[14],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< FaceRecognition::Service, ::EnrollmentDeleteRequest, ::FaceRecordList>(
          std::mem_fn(&FaceRecognition::Service::enrollmentTransfer), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      FaceRecognition_method_names[15],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< FaceRecognition::Service, ::Matrix, ::Matrix>(
          std::mem_fn(&FaceRecognition::Service::echo), this)));
}

FaceRecognition::Service::~Service() {
}

::grpc::Status FaceRecognition::Service::status(::grpc::ServerContext* context, const ::FaceStatusRequest* request, ::FaceServiceInfo* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status FaceRecognition::Service::detect(::grpc::ServerContext* context, const ::DetectRequest* request, ::FaceRecordList* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status FaceRecognition::Service::extract(::grpc::ServerContext* context, const ::ExtractRequest* request, ::FaceRecordList* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status FaceRecognition::Service::score(::grpc::ServerContext* context, const ::ScoreRequest* request, ::Matrix* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status FaceRecognition::Service::enroll(::grpc::ServerContext* context, const ::EnrollRequest* request, ::FaceRecordList* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status FaceRecognition::Service::search(::grpc::ServerContext* context, const ::SearchRequest* request, ::FaceRecordList* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status FaceRecognition::Service::detectExtract(::grpc::ServerContext* context, const ::DetectExtractRequest* request, ::FaceRecordList* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status FaceRecognition::Service::detectExtractEnroll(::grpc::ServerContext* context, const ::DetectExtractEnrollRequest* request, ::FaceRecordList* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status FaceRecognition::Service::detectExtractSearch(::grpc::ServerContext* context, const ::DetectExtractSearchRequest* request, ::FaceRecordList* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status FaceRecognition::Service::galleryList(::grpc::ServerContext* context, const ::GalleryListRequest* request, ::GalleryList* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status FaceRecognition::Service::galleryDelete(::grpc::ServerContext* context, const ::GalleryDeleteRequest* request, ::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status FaceRecognition::Service::enrollmentList(::grpc::ServerContext* context, const ::EnrollmentListRequest* request, ::FaceRecordList* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status FaceRecognition::Service::enrollmentDelete(::grpc::ServerContext* context, const ::EnrollmentDeleteRequest* request, ::FaceRecordList* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status FaceRecognition::Service::enrollmentDeleteConditional(::grpc::ServerContext* context, const ::EnrollmentDeleteRequest* request, ::FaceRecordList* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status FaceRecognition::Service::enrollmentTransfer(::grpc::ServerContext* context, const ::EnrollmentDeleteRequest* request, ::FaceRecordList* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status FaceRecognition::Service::echo(::grpc::ServerContext* context, const ::Matrix* request, ::Matrix* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


