// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: faro/proto/face_service.proto
// Original file comments:
//
// MIT License
//
// Copyright 2019 Oak Ridge National Laboratory
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in all
// copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
// SOFTWARE.
//
#ifndef GRPC_faro_2fproto_2fface_5fservice_2eproto__INCLUDED
#define GRPC_faro_2fproto_2fface_5fservice_2eproto__INCLUDED

#include "faro/proto/face_service.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_generic_service.h>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/client_context.h>
#include <grpcpp/impl/codegen/completion_queue.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/proto_utils.h>
#include <grpcpp/impl/codegen/rpc_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/status.h>
#include <grpcpp/impl/codegen/stub_options.h>
#include <grpcpp/impl/codegen/sync_stream.h>

namespace grpc_impl {
class CompletionQueue;
class ServerCompletionQueue;
class ServerContext;
}  // namespace grpc_impl

namespace grpc {
namespace experimental {
template <typename RequestT, typename ResponseT>
class MessageAllocator;
}  // namespace experimental
}  // namespace grpc

class FaceRecognition final {
 public:
  static constexpr char const* service_full_name() {
    return "FaceRecognition";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    // Service info and defaults
    virtual ::grpc::Status status(::grpc::ClientContext* context, const ::FaceStatusRequest& request, ::FaceServiceInfo* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::FaceServiceInfo>> Asyncstatus(::grpc::ClientContext* context, const ::FaceStatusRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::FaceServiceInfo>>(AsyncstatusRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::FaceServiceInfo>> PrepareAsyncstatus(::grpc::ClientContext* context, const ::FaceStatusRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::FaceServiceInfo>>(PrepareAsyncstatusRaw(context, request, cq));
    }
    // Simple operations
    virtual ::grpc::Status detect(::grpc::ClientContext* context, const ::DetectRequest& request, ::FaceRecordList* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::FaceRecordList>> Asyncdetect(::grpc::ClientContext* context, const ::DetectRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::FaceRecordList>>(AsyncdetectRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::FaceRecordList>> PrepareAsyncdetect(::grpc::ClientContext* context, const ::DetectRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::FaceRecordList>>(PrepareAsyncdetectRaw(context, request, cq));
    }
    virtual ::grpc::Status extract(::grpc::ClientContext* context, const ::ExtractRequest& request, ::FaceRecordList* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::FaceRecordList>> Asyncextract(::grpc::ClientContext* context, const ::ExtractRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::FaceRecordList>>(AsyncextractRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::FaceRecordList>> PrepareAsyncextract(::grpc::ClientContext* context, const ::ExtractRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::FaceRecordList>>(PrepareAsyncextractRaw(context, request, cq));
    }
    virtual ::grpc::Status score(::grpc::ClientContext* context, const ::ScoreRequest& request, ::Matrix* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Matrix>> Asyncscore(::grpc::ClientContext* context, const ::ScoreRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Matrix>>(AsyncscoreRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Matrix>> PrepareAsyncscore(::grpc::ClientContext* context, const ::ScoreRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Matrix>>(PrepareAsyncscoreRaw(context, request, cq));
    }
    virtual ::grpc::Status enroll(::grpc::ClientContext* context, const ::EnrollRequest& request, ::FaceRecordList* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::FaceRecordList>> Asyncenroll(::grpc::ClientContext* context, const ::EnrollRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::FaceRecordList>>(AsyncenrollRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::FaceRecordList>> PrepareAsyncenroll(::grpc::ClientContext* context, const ::EnrollRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::FaceRecordList>>(PrepareAsyncenrollRaw(context, request, cq));
    }
    virtual ::grpc::Status search(::grpc::ClientContext* context, const ::SearchRequest& request, ::FaceRecordList* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::FaceRecordList>> Asyncsearch(::grpc::ClientContext* context, const ::SearchRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::FaceRecordList>>(AsyncsearchRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::FaceRecordList>> PrepareAsyncsearch(::grpc::ClientContext* context, const ::SearchRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::FaceRecordList>>(PrepareAsyncsearchRaw(context, request, cq));
    }
    // Combined opperations
    virtual ::grpc::Status detectExtract(::grpc::ClientContext* context, const ::DetectExtractRequest& request, ::FaceRecordList* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::FaceRecordList>> AsyncdetectExtract(::grpc::ClientContext* context, const ::DetectExtractRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::FaceRecordList>>(AsyncdetectExtractRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::FaceRecordList>> PrepareAsyncdetectExtract(::grpc::ClientContext* context, const ::DetectExtractRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::FaceRecordList>>(PrepareAsyncdetectExtractRaw(context, request, cq));
    }
    virtual ::grpc::Status detectExtractEnroll(::grpc::ClientContext* context, const ::DetectExtractEnrollRequest& request, ::FaceRecordList* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::FaceRecordList>> AsyncdetectExtractEnroll(::grpc::ClientContext* context, const ::DetectExtractEnrollRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::FaceRecordList>>(AsyncdetectExtractEnrollRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::FaceRecordList>> PrepareAsyncdetectExtractEnroll(::grpc::ClientContext* context, const ::DetectExtractEnrollRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::FaceRecordList>>(PrepareAsyncdetectExtractEnrollRaw(context, request, cq));
    }
    virtual ::grpc::Status detectExtractSearch(::grpc::ClientContext* context, const ::DetectExtractSearchRequest& request, ::FaceRecordList* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::FaceRecordList>> AsyncdetectExtractSearch(::grpc::ClientContext* context, const ::DetectExtractSearchRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::FaceRecordList>>(AsyncdetectExtractSearchRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::FaceRecordList>> PrepareAsyncdetectExtractSearch(::grpc::ClientContext* context, const ::DetectExtractSearchRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::FaceRecordList>>(PrepareAsyncdetectExtractSearchRaw(context, request, cq));
    }
    // Gallery Management
    virtual ::grpc::Status galleryList(::grpc::ClientContext* context, const ::GalleryListRequest& request, ::GalleryList* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::GalleryList>> AsyncgalleryList(::grpc::ClientContext* context, const ::GalleryListRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::GalleryList>>(AsyncgalleryListRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::GalleryList>> PrepareAsyncgalleryList(::grpc::ClientContext* context, const ::GalleryListRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::GalleryList>>(PrepareAsyncgalleryListRaw(context, request, cq));
    }
    virtual ::grpc::Status galleryDelete(::grpc::ClientContext* context, const ::GalleryDeleteRequest& request, ::Empty* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Empty>> AsyncgalleryDelete(::grpc::ClientContext* context, const ::GalleryDeleteRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Empty>>(AsyncgalleryDeleteRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Empty>> PrepareAsyncgalleryDelete(::grpc::ClientContext* context, const ::GalleryDeleteRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Empty>>(PrepareAsyncgalleryDeleteRaw(context, request, cq));
    }
    virtual ::grpc::Status enrollmentList(::grpc::ClientContext* context, const ::EnrollmentListRequest& request, ::FaceRecordList* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::FaceRecordList>> AsyncenrollmentList(::grpc::ClientContext* context, const ::EnrollmentListRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::FaceRecordList>>(AsyncenrollmentListRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::FaceRecordList>> PrepareAsyncenrollmentList(::grpc::ClientContext* context, const ::EnrollmentListRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::FaceRecordList>>(PrepareAsyncenrollmentListRaw(context, request, cq));
    }
    virtual ::grpc::Status enrollmentDelete(::grpc::ClientContext* context, const ::EnrollmentDeleteRequest& request, ::FaceRecordList* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::FaceRecordList>> AsyncenrollmentDelete(::grpc::ClientContext* context, const ::EnrollmentDeleteRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::FaceRecordList>>(AsyncenrollmentDeleteRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::FaceRecordList>> PrepareAsyncenrollmentDelete(::grpc::ClientContext* context, const ::EnrollmentDeleteRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::FaceRecordList>>(PrepareAsyncenrollmentDeleteRaw(context, request, cq));
    }
    virtual ::grpc::Status enrollmentDeleteConditional(::grpc::ClientContext* context, const ::EnrollmentDeleteRequest& request, ::FaceRecordList* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::FaceRecordList>> AsyncenrollmentDeleteConditional(::grpc::ClientContext* context, const ::EnrollmentDeleteRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::FaceRecordList>>(AsyncenrollmentDeleteConditionalRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::FaceRecordList>> PrepareAsyncenrollmentDeleteConditional(::grpc::ClientContext* context, const ::EnrollmentDeleteRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::FaceRecordList>>(PrepareAsyncenrollmentDeleteConditionalRaw(context, request, cq));
    }
    virtual ::grpc::Status enrollmentTransfer(::grpc::ClientContext* context, const ::EnrollmentDeleteRequest& request, ::FaceRecordList* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::FaceRecordList>> AsyncenrollmentTransfer(::grpc::ClientContext* context, const ::EnrollmentDeleteRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::FaceRecordList>>(AsyncenrollmentTransferRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::FaceRecordList>> PrepareAsyncenrollmentTransfer(::grpc::ClientContext* context, const ::EnrollmentDeleteRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::FaceRecordList>>(PrepareAsyncenrollmentTransferRaw(context, request, cq));
    }
    // Test
    virtual ::grpc::Status echo(::grpc::ClientContext* context, const ::Matrix& request, ::Matrix* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Matrix>> Asyncecho(::grpc::ClientContext* context, const ::Matrix& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Matrix>>(AsyncechoRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Matrix>> PrepareAsyncecho(::grpc::ClientContext* context, const ::Matrix& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Matrix>>(PrepareAsyncechoRaw(context, request, cq));
    }
    class experimental_async_interface {
     public:
      virtual ~experimental_async_interface() {}
      // Service info and defaults
      virtual void status(::grpc::ClientContext* context, const ::FaceStatusRequest* request, ::FaceServiceInfo* response, std::function<void(::grpc::Status)>) = 0;
      virtual void status(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::FaceServiceInfo* response, std::function<void(::grpc::Status)>) = 0;
      virtual void status(::grpc::ClientContext* context, const ::FaceStatusRequest* request, ::FaceServiceInfo* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      virtual void status(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::FaceServiceInfo* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      // Simple operations
      virtual void detect(::grpc::ClientContext* context, const ::DetectRequest* request, ::FaceRecordList* response, std::function<void(::grpc::Status)>) = 0;
      virtual void detect(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::FaceRecordList* response, std::function<void(::grpc::Status)>) = 0;
      virtual void detect(::grpc::ClientContext* context, const ::DetectRequest* request, ::FaceRecordList* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      virtual void detect(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::FaceRecordList* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      virtual void extract(::grpc::ClientContext* context, const ::ExtractRequest* request, ::FaceRecordList* response, std::function<void(::grpc::Status)>) = 0;
      virtual void extract(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::FaceRecordList* response, std::function<void(::grpc::Status)>) = 0;
      virtual void extract(::grpc::ClientContext* context, const ::ExtractRequest* request, ::FaceRecordList* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      virtual void extract(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::FaceRecordList* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      virtual void score(::grpc::ClientContext* context, const ::ScoreRequest* request, ::Matrix* response, std::function<void(::grpc::Status)>) = 0;
      virtual void score(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::Matrix* response, std::function<void(::grpc::Status)>) = 0;
      virtual void score(::grpc::ClientContext* context, const ::ScoreRequest* request, ::Matrix* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      virtual void score(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::Matrix* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      virtual void enroll(::grpc::ClientContext* context, const ::EnrollRequest* request, ::FaceRecordList* response, std::function<void(::grpc::Status)>) = 0;
      virtual void enroll(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::FaceRecordList* response, std::function<void(::grpc::Status)>) = 0;
      virtual void enroll(::grpc::ClientContext* context, const ::EnrollRequest* request, ::FaceRecordList* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      virtual void enroll(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::FaceRecordList* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      virtual void search(::grpc::ClientContext* context, const ::SearchRequest* request, ::FaceRecordList* response, std::function<void(::grpc::Status)>) = 0;
      virtual void search(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::FaceRecordList* response, std::function<void(::grpc::Status)>) = 0;
      virtual void search(::grpc::ClientContext* context, const ::SearchRequest* request, ::FaceRecordList* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      virtual void search(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::FaceRecordList* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      // Combined opperations
      virtual void detectExtract(::grpc::ClientContext* context, const ::DetectExtractRequest* request, ::FaceRecordList* response, std::function<void(::grpc::Status)>) = 0;
      virtual void detectExtract(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::FaceRecordList* response, std::function<void(::grpc::Status)>) = 0;
      virtual void detectExtract(::grpc::ClientContext* context, const ::DetectExtractRequest* request, ::FaceRecordList* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      virtual void detectExtract(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::FaceRecordList* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      virtual void detectExtractEnroll(::grpc::ClientContext* context, const ::DetectExtractEnrollRequest* request, ::FaceRecordList* response, std::function<void(::grpc::Status)>) = 0;
      virtual void detectExtractEnroll(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::FaceRecordList* response, std::function<void(::grpc::Status)>) = 0;
      virtual void detectExtractEnroll(::grpc::ClientContext* context, const ::DetectExtractEnrollRequest* request, ::FaceRecordList* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      virtual void detectExtractEnroll(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::FaceRecordList* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      virtual void detectExtractSearch(::grpc::ClientContext* context, const ::DetectExtractSearchRequest* request, ::FaceRecordList* response, std::function<void(::grpc::Status)>) = 0;
      virtual void detectExtractSearch(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::FaceRecordList* response, std::function<void(::grpc::Status)>) = 0;
      virtual void detectExtractSearch(::grpc::ClientContext* context, const ::DetectExtractSearchRequest* request, ::FaceRecordList* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      virtual void detectExtractSearch(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::FaceRecordList* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      // Gallery Management
      virtual void galleryList(::grpc::ClientContext* context, const ::GalleryListRequest* request, ::GalleryList* response, std::function<void(::grpc::Status)>) = 0;
      virtual void galleryList(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::GalleryList* response, std::function<void(::grpc::Status)>) = 0;
      virtual void galleryList(::grpc::ClientContext* context, const ::GalleryListRequest* request, ::GalleryList* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      virtual void galleryList(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::GalleryList* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      virtual void galleryDelete(::grpc::ClientContext* context, const ::GalleryDeleteRequest* request, ::Empty* response, std::function<void(::grpc::Status)>) = 0;
      virtual void galleryDelete(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::Empty* response, std::function<void(::grpc::Status)>) = 0;
      virtual void galleryDelete(::grpc::ClientContext* context, const ::GalleryDeleteRequest* request, ::Empty* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      virtual void galleryDelete(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::Empty* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      virtual void enrollmentList(::grpc::ClientContext* context, const ::EnrollmentListRequest* request, ::FaceRecordList* response, std::function<void(::grpc::Status)>) = 0;
      virtual void enrollmentList(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::FaceRecordList* response, std::function<void(::grpc::Status)>) = 0;
      virtual void enrollmentList(::grpc::ClientContext* context, const ::EnrollmentListRequest* request, ::FaceRecordList* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      virtual void enrollmentList(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::FaceRecordList* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      virtual void enrollmentDelete(::grpc::ClientContext* context, const ::EnrollmentDeleteRequest* request, ::FaceRecordList* response, std::function<void(::grpc::Status)>) = 0;
      virtual void enrollmentDelete(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::FaceRecordList* response, std::function<void(::grpc::Status)>) = 0;
      virtual void enrollmentDelete(::grpc::ClientContext* context, const ::EnrollmentDeleteRequest* request, ::FaceRecordList* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      virtual void enrollmentDelete(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::FaceRecordList* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      virtual void enrollmentDeleteConditional(::grpc::ClientContext* context, const ::EnrollmentDeleteRequest* request, ::FaceRecordList* response, std::function<void(::grpc::Status)>) = 0;
      virtual void enrollmentDeleteConditional(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::FaceRecordList* response, std::function<void(::grpc::Status)>) = 0;
      virtual void enrollmentDeleteConditional(::grpc::ClientContext* context, const ::EnrollmentDeleteRequest* request, ::FaceRecordList* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      virtual void enrollmentDeleteConditional(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::FaceRecordList* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      virtual void enrollmentTransfer(::grpc::ClientContext* context, const ::EnrollmentDeleteRequest* request, ::FaceRecordList* response, std::function<void(::grpc::Status)>) = 0;
      virtual void enrollmentTransfer(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::FaceRecordList* response, std::function<void(::grpc::Status)>) = 0;
      virtual void enrollmentTransfer(::grpc::ClientContext* context, const ::EnrollmentDeleteRequest* request, ::FaceRecordList* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      virtual void enrollmentTransfer(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::FaceRecordList* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      // Test
      virtual void echo(::grpc::ClientContext* context, const ::Matrix* request, ::Matrix* response, std::function<void(::grpc::Status)>) = 0;
      virtual void echo(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::Matrix* response, std::function<void(::grpc::Status)>) = 0;
      virtual void echo(::grpc::ClientContext* context, const ::Matrix* request, ::Matrix* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      virtual void echo(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::Matrix* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
    };
    virtual class experimental_async_interface* experimental_async() { return nullptr; }
  private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::FaceServiceInfo>* AsyncstatusRaw(::grpc::ClientContext* context, const ::FaceStatusRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::FaceServiceInfo>* PrepareAsyncstatusRaw(::grpc::ClientContext* context, const ::FaceStatusRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::FaceRecordList>* AsyncdetectRaw(::grpc::ClientContext* context, const ::DetectRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::FaceRecordList>* PrepareAsyncdetectRaw(::grpc::ClientContext* context, const ::DetectRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::FaceRecordList>* AsyncextractRaw(::grpc::ClientContext* context, const ::ExtractRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::FaceRecordList>* PrepareAsyncextractRaw(::grpc::ClientContext* context, const ::ExtractRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::Matrix>* AsyncscoreRaw(::grpc::ClientContext* context, const ::ScoreRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::Matrix>* PrepareAsyncscoreRaw(::grpc::ClientContext* context, const ::ScoreRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::FaceRecordList>* AsyncenrollRaw(::grpc::ClientContext* context, const ::EnrollRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::FaceRecordList>* PrepareAsyncenrollRaw(::grpc::ClientContext* context, const ::EnrollRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::FaceRecordList>* AsyncsearchRaw(::grpc::ClientContext* context, const ::SearchRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::FaceRecordList>* PrepareAsyncsearchRaw(::grpc::ClientContext* context, const ::SearchRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::FaceRecordList>* AsyncdetectExtractRaw(::grpc::ClientContext* context, const ::DetectExtractRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::FaceRecordList>* PrepareAsyncdetectExtractRaw(::grpc::ClientContext* context, const ::DetectExtractRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::FaceRecordList>* AsyncdetectExtractEnrollRaw(::grpc::ClientContext* context, const ::DetectExtractEnrollRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::FaceRecordList>* PrepareAsyncdetectExtractEnrollRaw(::grpc::ClientContext* context, const ::DetectExtractEnrollRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::FaceRecordList>* AsyncdetectExtractSearchRaw(::grpc::ClientContext* context, const ::DetectExtractSearchRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::FaceRecordList>* PrepareAsyncdetectExtractSearchRaw(::grpc::ClientContext* context, const ::DetectExtractSearchRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::GalleryList>* AsyncgalleryListRaw(::grpc::ClientContext* context, const ::GalleryListRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::GalleryList>* PrepareAsyncgalleryListRaw(::grpc::ClientContext* context, const ::GalleryListRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::Empty>* AsyncgalleryDeleteRaw(::grpc::ClientContext* context, const ::GalleryDeleteRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::Empty>* PrepareAsyncgalleryDeleteRaw(::grpc::ClientContext* context, const ::GalleryDeleteRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::FaceRecordList>* AsyncenrollmentListRaw(::grpc::ClientContext* context, const ::EnrollmentListRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::FaceRecordList>* PrepareAsyncenrollmentListRaw(::grpc::ClientContext* context, const ::EnrollmentListRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::FaceRecordList>* AsyncenrollmentDeleteRaw(::grpc::ClientContext* context, const ::EnrollmentDeleteRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::FaceRecordList>* PrepareAsyncenrollmentDeleteRaw(::grpc::ClientContext* context, const ::EnrollmentDeleteRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::FaceRecordList>* AsyncenrollmentDeleteConditionalRaw(::grpc::ClientContext* context, const ::EnrollmentDeleteRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::FaceRecordList>* PrepareAsyncenrollmentDeleteConditionalRaw(::grpc::ClientContext* context, const ::EnrollmentDeleteRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::FaceRecordList>* AsyncenrollmentTransferRaw(::grpc::ClientContext* context, const ::EnrollmentDeleteRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::FaceRecordList>* PrepareAsyncenrollmentTransferRaw(::grpc::ClientContext* context, const ::EnrollmentDeleteRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::Matrix>* AsyncechoRaw(::grpc::ClientContext* context, const ::Matrix& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::Matrix>* PrepareAsyncechoRaw(::grpc::ClientContext* context, const ::Matrix& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel);
    ::grpc::Status status(::grpc::ClientContext* context, const ::FaceStatusRequest& request, ::FaceServiceInfo* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::FaceServiceInfo>> Asyncstatus(::grpc::ClientContext* context, const ::FaceStatusRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::FaceServiceInfo>>(AsyncstatusRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::FaceServiceInfo>> PrepareAsyncstatus(::grpc::ClientContext* context, const ::FaceStatusRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::FaceServiceInfo>>(PrepareAsyncstatusRaw(context, request, cq));
    }
    ::grpc::Status detect(::grpc::ClientContext* context, const ::DetectRequest& request, ::FaceRecordList* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::FaceRecordList>> Asyncdetect(::grpc::ClientContext* context, const ::DetectRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::FaceRecordList>>(AsyncdetectRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::FaceRecordList>> PrepareAsyncdetect(::grpc::ClientContext* context, const ::DetectRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::FaceRecordList>>(PrepareAsyncdetectRaw(context, request, cq));
    }
    ::grpc::Status extract(::grpc::ClientContext* context, const ::ExtractRequest& request, ::FaceRecordList* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::FaceRecordList>> Asyncextract(::grpc::ClientContext* context, const ::ExtractRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::FaceRecordList>>(AsyncextractRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::FaceRecordList>> PrepareAsyncextract(::grpc::ClientContext* context, const ::ExtractRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::FaceRecordList>>(PrepareAsyncextractRaw(context, request, cq));
    }
    ::grpc::Status score(::grpc::ClientContext* context, const ::ScoreRequest& request, ::Matrix* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Matrix>> Asyncscore(::grpc::ClientContext* context, const ::ScoreRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Matrix>>(AsyncscoreRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Matrix>> PrepareAsyncscore(::grpc::ClientContext* context, const ::ScoreRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Matrix>>(PrepareAsyncscoreRaw(context, request, cq));
    }
    ::grpc::Status enroll(::grpc::ClientContext* context, const ::EnrollRequest& request, ::FaceRecordList* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::FaceRecordList>> Asyncenroll(::grpc::ClientContext* context, const ::EnrollRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::FaceRecordList>>(AsyncenrollRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::FaceRecordList>> PrepareAsyncenroll(::grpc::ClientContext* context, const ::EnrollRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::FaceRecordList>>(PrepareAsyncenrollRaw(context, request, cq));
    }
    ::grpc::Status search(::grpc::ClientContext* context, const ::SearchRequest& request, ::FaceRecordList* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::FaceRecordList>> Asyncsearch(::grpc::ClientContext* context, const ::SearchRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::FaceRecordList>>(AsyncsearchRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::FaceRecordList>> PrepareAsyncsearch(::grpc::ClientContext* context, const ::SearchRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::FaceRecordList>>(PrepareAsyncsearchRaw(context, request, cq));
    }
    ::grpc::Status detectExtract(::grpc::ClientContext* context, const ::DetectExtractRequest& request, ::FaceRecordList* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::FaceRecordList>> AsyncdetectExtract(::grpc::ClientContext* context, const ::DetectExtractRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::FaceRecordList>>(AsyncdetectExtractRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::FaceRecordList>> PrepareAsyncdetectExtract(::grpc::ClientContext* context, const ::DetectExtractRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::FaceRecordList>>(PrepareAsyncdetectExtractRaw(context, request, cq));
    }
    ::grpc::Status detectExtractEnroll(::grpc::ClientContext* context, const ::DetectExtractEnrollRequest& request, ::FaceRecordList* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::FaceRecordList>> AsyncdetectExtractEnroll(::grpc::ClientContext* context, const ::DetectExtractEnrollRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::FaceRecordList>>(AsyncdetectExtractEnrollRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::FaceRecordList>> PrepareAsyncdetectExtractEnroll(::grpc::ClientContext* context, const ::DetectExtractEnrollRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::FaceRecordList>>(PrepareAsyncdetectExtractEnrollRaw(context, request, cq));
    }
    ::grpc::Status detectExtractSearch(::grpc::ClientContext* context, const ::DetectExtractSearchRequest& request, ::FaceRecordList* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::FaceRecordList>> AsyncdetectExtractSearch(::grpc::ClientContext* context, const ::DetectExtractSearchRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::FaceRecordList>>(AsyncdetectExtractSearchRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::FaceRecordList>> PrepareAsyncdetectExtractSearch(::grpc::ClientContext* context, const ::DetectExtractSearchRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::FaceRecordList>>(PrepareAsyncdetectExtractSearchRaw(context, request, cq));
    }
    ::grpc::Status galleryList(::grpc::ClientContext* context, const ::GalleryListRequest& request, ::GalleryList* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::GalleryList>> AsyncgalleryList(::grpc::ClientContext* context, const ::GalleryListRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::GalleryList>>(AsyncgalleryListRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::GalleryList>> PrepareAsyncgalleryList(::grpc::ClientContext* context, const ::GalleryListRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::GalleryList>>(PrepareAsyncgalleryListRaw(context, request, cq));
    }
    ::grpc::Status galleryDelete(::grpc::ClientContext* context, const ::GalleryDeleteRequest& request, ::Empty* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Empty>> AsyncgalleryDelete(::grpc::ClientContext* context, const ::GalleryDeleteRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Empty>>(AsyncgalleryDeleteRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Empty>> PrepareAsyncgalleryDelete(::grpc::ClientContext* context, const ::GalleryDeleteRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Empty>>(PrepareAsyncgalleryDeleteRaw(context, request, cq));
    }
    ::grpc::Status enrollmentList(::grpc::ClientContext* context, const ::EnrollmentListRequest& request, ::FaceRecordList* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::FaceRecordList>> AsyncenrollmentList(::grpc::ClientContext* context, const ::EnrollmentListRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::FaceRecordList>>(AsyncenrollmentListRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::FaceRecordList>> PrepareAsyncenrollmentList(::grpc::ClientContext* context, const ::EnrollmentListRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::FaceRecordList>>(PrepareAsyncenrollmentListRaw(context, request, cq));
    }
    ::grpc::Status enrollmentDelete(::grpc::ClientContext* context, const ::EnrollmentDeleteRequest& request, ::FaceRecordList* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::FaceRecordList>> AsyncenrollmentDelete(::grpc::ClientContext* context, const ::EnrollmentDeleteRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::FaceRecordList>>(AsyncenrollmentDeleteRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::FaceRecordList>> PrepareAsyncenrollmentDelete(::grpc::ClientContext* context, const ::EnrollmentDeleteRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::FaceRecordList>>(PrepareAsyncenrollmentDeleteRaw(context, request, cq));
    }
    ::grpc::Status enrollmentDeleteConditional(::grpc::ClientContext* context, const ::EnrollmentDeleteRequest& request, ::FaceRecordList* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::FaceRecordList>> AsyncenrollmentDeleteConditional(::grpc::ClientContext* context, const ::EnrollmentDeleteRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::FaceRecordList>>(AsyncenrollmentDeleteConditionalRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::FaceRecordList>> PrepareAsyncenrollmentDeleteConditional(::grpc::ClientContext* context, const ::EnrollmentDeleteRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::FaceRecordList>>(PrepareAsyncenrollmentDeleteConditionalRaw(context, request, cq));
    }
    ::grpc::Status enrollmentTransfer(::grpc::ClientContext* context, const ::EnrollmentDeleteRequest& request, ::FaceRecordList* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::FaceRecordList>> AsyncenrollmentTransfer(::grpc::ClientContext* context, const ::EnrollmentDeleteRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::FaceRecordList>>(AsyncenrollmentTransferRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::FaceRecordList>> PrepareAsyncenrollmentTransfer(::grpc::ClientContext* context, const ::EnrollmentDeleteRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::FaceRecordList>>(PrepareAsyncenrollmentTransferRaw(context, request, cq));
    }
    ::grpc::Status echo(::grpc::ClientContext* context, const ::Matrix& request, ::Matrix* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Matrix>> Asyncecho(::grpc::ClientContext* context, const ::Matrix& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Matrix>>(AsyncechoRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Matrix>> PrepareAsyncecho(::grpc::ClientContext* context, const ::Matrix& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Matrix>>(PrepareAsyncechoRaw(context, request, cq));
    }
    class experimental_async final :
      public StubInterface::experimental_async_interface {
     public:
      void status(::grpc::ClientContext* context, const ::FaceStatusRequest* request, ::FaceServiceInfo* response, std::function<void(::grpc::Status)>) override;
      void status(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::FaceServiceInfo* response, std::function<void(::grpc::Status)>) override;
      void status(::grpc::ClientContext* context, const ::FaceStatusRequest* request, ::FaceServiceInfo* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      void status(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::FaceServiceInfo* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      void detect(::grpc::ClientContext* context, const ::DetectRequest* request, ::FaceRecordList* response, std::function<void(::grpc::Status)>) override;
      void detect(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::FaceRecordList* response, std::function<void(::grpc::Status)>) override;
      void detect(::grpc::ClientContext* context, const ::DetectRequest* request, ::FaceRecordList* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      void detect(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::FaceRecordList* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      void extract(::grpc::ClientContext* context, const ::ExtractRequest* request, ::FaceRecordList* response, std::function<void(::grpc::Status)>) override;
      void extract(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::FaceRecordList* response, std::function<void(::grpc::Status)>) override;
      void extract(::grpc::ClientContext* context, const ::ExtractRequest* request, ::FaceRecordList* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      void extract(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::FaceRecordList* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      void score(::grpc::ClientContext* context, const ::ScoreRequest* request, ::Matrix* response, std::function<void(::grpc::Status)>) override;
      void score(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::Matrix* response, std::function<void(::grpc::Status)>) override;
      void score(::grpc::ClientContext* context, const ::ScoreRequest* request, ::Matrix* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      void score(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::Matrix* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      void enroll(::grpc::ClientContext* context, const ::EnrollRequest* request, ::FaceRecordList* response, std::function<void(::grpc::Status)>) override;
      void enroll(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::FaceRecordList* response, std::function<void(::grpc::Status)>) override;
      void enroll(::grpc::ClientContext* context, const ::EnrollRequest* request, ::FaceRecordList* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      void enroll(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::FaceRecordList* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      void search(::grpc::ClientContext* context, const ::SearchRequest* request, ::FaceRecordList* response, std::function<void(::grpc::Status)>) override;
      void search(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::FaceRecordList* response, std::function<void(::grpc::Status)>) override;
      void search(::grpc::ClientContext* context, const ::SearchRequest* request, ::FaceRecordList* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      void search(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::FaceRecordList* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      void detectExtract(::grpc::ClientContext* context, const ::DetectExtractRequest* request, ::FaceRecordList* response, std::function<void(::grpc::Status)>) override;
      void detectExtract(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::FaceRecordList* response, std::function<void(::grpc::Status)>) override;
      void detectExtract(::grpc::ClientContext* context, const ::DetectExtractRequest* request, ::FaceRecordList* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      void detectExtract(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::FaceRecordList* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      void detectExtractEnroll(::grpc::ClientContext* context, const ::DetectExtractEnrollRequest* request, ::FaceRecordList* response, std::function<void(::grpc::Status)>) override;
      void detectExtractEnroll(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::FaceRecordList* response, std::function<void(::grpc::Status)>) override;
      void detectExtractEnroll(::grpc::ClientContext* context, const ::DetectExtractEnrollRequest* request, ::FaceRecordList* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      void detectExtractEnroll(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::FaceRecordList* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      void detectExtractSearch(::grpc::ClientContext* context, const ::DetectExtractSearchRequest* request, ::FaceRecordList* response, std::function<void(::grpc::Status)>) override;
      void detectExtractSearch(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::FaceRecordList* response, std::function<void(::grpc::Status)>) override;
      void detectExtractSearch(::grpc::ClientContext* context, const ::DetectExtractSearchRequest* request, ::FaceRecordList* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      void detectExtractSearch(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::FaceRecordList* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      void galleryList(::grpc::ClientContext* context, const ::GalleryListRequest* request, ::GalleryList* response, std::function<void(::grpc::Status)>) override;
      void galleryList(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::GalleryList* response, std::function<void(::grpc::Status)>) override;
      void galleryList(::grpc::ClientContext* context, const ::GalleryListRequest* request, ::GalleryList* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      void galleryList(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::GalleryList* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      void galleryDelete(::grpc::ClientContext* context, const ::GalleryDeleteRequest* request, ::Empty* response, std::function<void(::grpc::Status)>) override;
      void galleryDelete(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::Empty* response, std::function<void(::grpc::Status)>) override;
      void galleryDelete(::grpc::ClientContext* context, const ::GalleryDeleteRequest* request, ::Empty* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      void galleryDelete(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::Empty* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      void enrollmentList(::grpc::ClientContext* context, const ::EnrollmentListRequest* request, ::FaceRecordList* response, std::function<void(::grpc::Status)>) override;
      void enrollmentList(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::FaceRecordList* response, std::function<void(::grpc::Status)>) override;
      void enrollmentList(::grpc::ClientContext* context, const ::EnrollmentListRequest* request, ::FaceRecordList* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      void enrollmentList(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::FaceRecordList* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      void enrollmentDelete(::grpc::ClientContext* context, const ::EnrollmentDeleteRequest* request, ::FaceRecordList* response, std::function<void(::grpc::Status)>) override;
      void enrollmentDelete(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::FaceRecordList* response, std::function<void(::grpc::Status)>) override;
      void enrollmentDelete(::grpc::ClientContext* context, const ::EnrollmentDeleteRequest* request, ::FaceRecordList* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      void enrollmentDelete(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::FaceRecordList* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      void enrollmentDeleteConditional(::grpc::ClientContext* context, const ::EnrollmentDeleteRequest* request, ::FaceRecordList* response, std::function<void(::grpc::Status)>) override;
      void enrollmentDeleteConditional(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::FaceRecordList* response, std::function<void(::grpc::Status)>) override;
      void enrollmentDeleteConditional(::grpc::ClientContext* context, const ::EnrollmentDeleteRequest* request, ::FaceRecordList* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      void enrollmentDeleteConditional(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::FaceRecordList* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      void enrollmentTransfer(::grpc::ClientContext* context, const ::EnrollmentDeleteRequest* request, ::FaceRecordList* response, std::function<void(::grpc::Status)>) override;
      void enrollmentTransfer(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::FaceRecordList* response, std::function<void(::grpc::Status)>) override;
      void enrollmentTransfer(::grpc::ClientContext* context, const ::EnrollmentDeleteRequest* request, ::FaceRecordList* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      void enrollmentTransfer(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::FaceRecordList* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      void echo(::grpc::ClientContext* context, const ::Matrix* request, ::Matrix* response, std::function<void(::grpc::Status)>) override;
      void echo(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::Matrix* response, std::function<void(::grpc::Status)>) override;
      void echo(::grpc::ClientContext* context, const ::Matrix* request, ::Matrix* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      void echo(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::Matrix* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
     private:
      friend class Stub;
      explicit experimental_async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class experimental_async_interface* experimental_async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class experimental_async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::FaceServiceInfo>* AsyncstatusRaw(::grpc::ClientContext* context, const ::FaceStatusRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::FaceServiceInfo>* PrepareAsyncstatusRaw(::grpc::ClientContext* context, const ::FaceStatusRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::FaceRecordList>* AsyncdetectRaw(::grpc::ClientContext* context, const ::DetectRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::FaceRecordList>* PrepareAsyncdetectRaw(::grpc::ClientContext* context, const ::DetectRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::FaceRecordList>* AsyncextractRaw(::grpc::ClientContext* context, const ::ExtractRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::FaceRecordList>* PrepareAsyncextractRaw(::grpc::ClientContext* context, const ::ExtractRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::Matrix>* AsyncscoreRaw(::grpc::ClientContext* context, const ::ScoreRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::Matrix>* PrepareAsyncscoreRaw(::grpc::ClientContext* context, const ::ScoreRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::FaceRecordList>* AsyncenrollRaw(::grpc::ClientContext* context, const ::EnrollRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::FaceRecordList>* PrepareAsyncenrollRaw(::grpc::ClientContext* context, const ::EnrollRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::FaceRecordList>* AsyncsearchRaw(::grpc::ClientContext* context, const ::SearchRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::FaceRecordList>* PrepareAsyncsearchRaw(::grpc::ClientContext* context, const ::SearchRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::FaceRecordList>* AsyncdetectExtractRaw(::grpc::ClientContext* context, const ::DetectExtractRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::FaceRecordList>* PrepareAsyncdetectExtractRaw(::grpc::ClientContext* context, const ::DetectExtractRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::FaceRecordList>* AsyncdetectExtractEnrollRaw(::grpc::ClientContext* context, const ::DetectExtractEnrollRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::FaceRecordList>* PrepareAsyncdetectExtractEnrollRaw(::grpc::ClientContext* context, const ::DetectExtractEnrollRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::FaceRecordList>* AsyncdetectExtractSearchRaw(::grpc::ClientContext* context, const ::DetectExtractSearchRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::FaceRecordList>* PrepareAsyncdetectExtractSearchRaw(::grpc::ClientContext* context, const ::DetectExtractSearchRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::GalleryList>* AsyncgalleryListRaw(::grpc::ClientContext* context, const ::GalleryListRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::GalleryList>* PrepareAsyncgalleryListRaw(::grpc::ClientContext* context, const ::GalleryListRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::Empty>* AsyncgalleryDeleteRaw(::grpc::ClientContext* context, const ::GalleryDeleteRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::Empty>* PrepareAsyncgalleryDeleteRaw(::grpc::ClientContext* context, const ::GalleryDeleteRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::FaceRecordList>* AsyncenrollmentListRaw(::grpc::ClientContext* context, const ::EnrollmentListRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::FaceRecordList>* PrepareAsyncenrollmentListRaw(::grpc::ClientContext* context, const ::EnrollmentListRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::FaceRecordList>* AsyncenrollmentDeleteRaw(::grpc::ClientContext* context, const ::EnrollmentDeleteRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::FaceRecordList>* PrepareAsyncenrollmentDeleteRaw(::grpc::ClientContext* context, const ::EnrollmentDeleteRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::FaceRecordList>* AsyncenrollmentDeleteConditionalRaw(::grpc::ClientContext* context, const ::EnrollmentDeleteRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::FaceRecordList>* PrepareAsyncenrollmentDeleteConditionalRaw(::grpc::ClientContext* context, const ::EnrollmentDeleteRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::FaceRecordList>* AsyncenrollmentTransferRaw(::grpc::ClientContext* context, const ::EnrollmentDeleteRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::FaceRecordList>* PrepareAsyncenrollmentTransferRaw(::grpc::ClientContext* context, const ::EnrollmentDeleteRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::Matrix>* AsyncechoRaw(::grpc::ClientContext* context, const ::Matrix& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::Matrix>* PrepareAsyncechoRaw(::grpc::ClientContext* context, const ::Matrix& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_status_;
    const ::grpc::internal::RpcMethod rpcmethod_detect_;
    const ::grpc::internal::RpcMethod rpcmethod_extract_;
    const ::grpc::internal::RpcMethod rpcmethod_score_;
    const ::grpc::internal::RpcMethod rpcmethod_enroll_;
    const ::grpc::internal::RpcMethod rpcmethod_search_;
    const ::grpc::internal::RpcMethod rpcmethod_detectExtract_;
    const ::grpc::internal::RpcMethod rpcmethod_detectExtractEnroll_;
    const ::grpc::internal::RpcMethod rpcmethod_detectExtractSearch_;
    const ::grpc::internal::RpcMethod rpcmethod_galleryList_;
    const ::grpc::internal::RpcMethod rpcmethod_galleryDelete_;
    const ::grpc::internal::RpcMethod rpcmethod_enrollmentList_;
    const ::grpc::internal::RpcMethod rpcmethod_enrollmentDelete_;
    const ::grpc::internal::RpcMethod rpcmethod_enrollmentDeleteConditional_;
    const ::grpc::internal::RpcMethod rpcmethod_enrollmentTransfer_;
    const ::grpc::internal::RpcMethod rpcmethod_echo_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    // Service info and defaults
    virtual ::grpc::Status status(::grpc::ServerContext* context, const ::FaceStatusRequest* request, ::FaceServiceInfo* response);
    // Simple operations
    virtual ::grpc::Status detect(::grpc::ServerContext* context, const ::DetectRequest* request, ::FaceRecordList* response);
    virtual ::grpc::Status extract(::grpc::ServerContext* context, const ::ExtractRequest* request, ::FaceRecordList* response);
    virtual ::grpc::Status score(::grpc::ServerContext* context, const ::ScoreRequest* request, ::Matrix* response);
    virtual ::grpc::Status enroll(::grpc::ServerContext* context, const ::EnrollRequest* request, ::FaceRecordList* response);
    virtual ::grpc::Status search(::grpc::ServerContext* context, const ::SearchRequest* request, ::FaceRecordList* response);
    // Combined opperations
    virtual ::grpc::Status detectExtract(::grpc::ServerContext* context, const ::DetectExtractRequest* request, ::FaceRecordList* response);
    virtual ::grpc::Status detectExtractEnroll(::grpc::ServerContext* context, const ::DetectExtractEnrollRequest* request, ::FaceRecordList* response);
    virtual ::grpc::Status detectExtractSearch(::grpc::ServerContext* context, const ::DetectExtractSearchRequest* request, ::FaceRecordList* response);
    // Gallery Management
    virtual ::grpc::Status galleryList(::grpc::ServerContext* context, const ::GalleryListRequest* request, ::GalleryList* response);
    virtual ::grpc::Status galleryDelete(::grpc::ServerContext* context, const ::GalleryDeleteRequest* request, ::Empty* response);
    virtual ::grpc::Status enrollmentList(::grpc::ServerContext* context, const ::EnrollmentListRequest* request, ::FaceRecordList* response);
    virtual ::grpc::Status enrollmentDelete(::grpc::ServerContext* context, const ::EnrollmentDeleteRequest* request, ::FaceRecordList* response);
    virtual ::grpc::Status enrollmentDeleteConditional(::grpc::ServerContext* context, const ::EnrollmentDeleteRequest* request, ::FaceRecordList* response);
    virtual ::grpc::Status enrollmentTransfer(::grpc::ServerContext* context, const ::EnrollmentDeleteRequest* request, ::FaceRecordList* response);
    // Test
    virtual ::grpc::Status echo(::grpc::ServerContext* context, const ::Matrix* request, ::Matrix* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_status : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_status() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_status() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status status(::grpc::ServerContext* /*context*/, const ::FaceStatusRequest* /*request*/, ::FaceServiceInfo* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requeststatus(::grpc::ServerContext* context, ::FaceStatusRequest* request, ::grpc::ServerAsyncResponseWriter< ::FaceServiceInfo>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_detect : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_detect() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_detect() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status detect(::grpc::ServerContext* /*context*/, const ::DetectRequest* /*request*/, ::FaceRecordList* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requestdetect(::grpc::ServerContext* context, ::DetectRequest* request, ::grpc::ServerAsyncResponseWriter< ::FaceRecordList>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_extract : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_extract() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_extract() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status extract(::grpc::ServerContext* /*context*/, const ::ExtractRequest* /*request*/, ::FaceRecordList* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requestextract(::grpc::ServerContext* context, ::ExtractRequest* request, ::grpc::ServerAsyncResponseWriter< ::FaceRecordList>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_score : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_score() {
      ::grpc::Service::MarkMethodAsync(3);
    }
    ~WithAsyncMethod_score() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status score(::grpc::ServerContext* /*context*/, const ::ScoreRequest* /*request*/, ::Matrix* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requestscore(::grpc::ServerContext* context, ::ScoreRequest* request, ::grpc::ServerAsyncResponseWriter< ::Matrix>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_enroll : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_enroll() {
      ::grpc::Service::MarkMethodAsync(4);
    }
    ~WithAsyncMethod_enroll() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status enroll(::grpc::ServerContext* /*context*/, const ::EnrollRequest* /*request*/, ::FaceRecordList* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requestenroll(::grpc::ServerContext* context, ::EnrollRequest* request, ::grpc::ServerAsyncResponseWriter< ::FaceRecordList>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_search : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_search() {
      ::grpc::Service::MarkMethodAsync(5);
    }
    ~WithAsyncMethod_search() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status search(::grpc::ServerContext* /*context*/, const ::SearchRequest* /*request*/, ::FaceRecordList* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requestsearch(::grpc::ServerContext* context, ::SearchRequest* request, ::grpc::ServerAsyncResponseWriter< ::FaceRecordList>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(5, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_detectExtract : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_detectExtract() {
      ::grpc::Service::MarkMethodAsync(6);
    }
    ~WithAsyncMethod_detectExtract() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status detectExtract(::grpc::ServerContext* /*context*/, const ::DetectExtractRequest* /*request*/, ::FaceRecordList* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestdetectExtract(::grpc::ServerContext* context, ::DetectExtractRequest* request, ::grpc::ServerAsyncResponseWriter< ::FaceRecordList>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(6, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_detectExtractEnroll : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_detectExtractEnroll() {
      ::grpc::Service::MarkMethodAsync(7);
    }
    ~WithAsyncMethod_detectExtractEnroll() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status detectExtractEnroll(::grpc::ServerContext* /*context*/, const ::DetectExtractEnrollRequest* /*request*/, ::FaceRecordList* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestdetectExtractEnroll(::grpc::ServerContext* context, ::DetectExtractEnrollRequest* request, ::grpc::ServerAsyncResponseWriter< ::FaceRecordList>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(7, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_detectExtractSearch : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_detectExtractSearch() {
      ::grpc::Service::MarkMethodAsync(8);
    }
    ~WithAsyncMethod_detectExtractSearch() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status detectExtractSearch(::grpc::ServerContext* /*context*/, const ::DetectExtractSearchRequest* /*request*/, ::FaceRecordList* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestdetectExtractSearch(::grpc::ServerContext* context, ::DetectExtractSearchRequest* request, ::grpc::ServerAsyncResponseWriter< ::FaceRecordList>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(8, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_galleryList : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_galleryList() {
      ::grpc::Service::MarkMethodAsync(9);
    }
    ~WithAsyncMethod_galleryList() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status galleryList(::grpc::ServerContext* /*context*/, const ::GalleryListRequest* /*request*/, ::GalleryList* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestgalleryList(::grpc::ServerContext* context, ::GalleryListRequest* request, ::grpc::ServerAsyncResponseWriter< ::GalleryList>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(9, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_galleryDelete : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_galleryDelete() {
      ::grpc::Service::MarkMethodAsync(10);
    }
    ~WithAsyncMethod_galleryDelete() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status galleryDelete(::grpc::ServerContext* /*context*/, const ::GalleryDeleteRequest* /*request*/, ::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestgalleryDelete(::grpc::ServerContext* context, ::GalleryDeleteRequest* request, ::grpc::ServerAsyncResponseWriter< ::Empty>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(10, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_enrollmentList : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_enrollmentList() {
      ::grpc::Service::MarkMethodAsync(11);
    }
    ~WithAsyncMethod_enrollmentList() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status enrollmentList(::grpc::ServerContext* /*context*/, const ::EnrollmentListRequest* /*request*/, ::FaceRecordList* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestenrollmentList(::grpc::ServerContext* context, ::EnrollmentListRequest* request, ::grpc::ServerAsyncResponseWriter< ::FaceRecordList>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(11, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_enrollmentDelete : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_enrollmentDelete() {
      ::grpc::Service::MarkMethodAsync(12);
    }
    ~WithAsyncMethod_enrollmentDelete() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status enrollmentDelete(::grpc::ServerContext* /*context*/, const ::EnrollmentDeleteRequest* /*request*/, ::FaceRecordList* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestenrollmentDelete(::grpc::ServerContext* context, ::EnrollmentDeleteRequest* request, ::grpc::ServerAsyncResponseWriter< ::FaceRecordList>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(12, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_enrollmentDeleteConditional : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_enrollmentDeleteConditional() {
      ::grpc::Service::MarkMethodAsync(13);
    }
    ~WithAsyncMethod_enrollmentDeleteConditional() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status enrollmentDeleteConditional(::grpc::ServerContext* /*context*/, const ::EnrollmentDeleteRequest* /*request*/, ::FaceRecordList* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestenrollmentDeleteConditional(::grpc::ServerContext* context, ::EnrollmentDeleteRequest* request, ::grpc::ServerAsyncResponseWriter< ::FaceRecordList>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(13, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_enrollmentTransfer : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_enrollmentTransfer() {
      ::grpc::Service::MarkMethodAsync(14);
    }
    ~WithAsyncMethod_enrollmentTransfer() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status enrollmentTransfer(::grpc::ServerContext* /*context*/, const ::EnrollmentDeleteRequest* /*request*/, ::FaceRecordList* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestenrollmentTransfer(::grpc::ServerContext* context, ::EnrollmentDeleteRequest* request, ::grpc::ServerAsyncResponseWriter< ::FaceRecordList>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(14, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_echo : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_echo() {
      ::grpc::Service::MarkMethodAsync(15);
    }
    ~WithAsyncMethod_echo() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status echo(::grpc::ServerContext* /*context*/, const ::Matrix* /*request*/, ::Matrix* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requestecho(::grpc::ServerContext* context, ::Matrix* request, ::grpc::ServerAsyncResponseWriter< ::Matrix>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(15, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_status<WithAsyncMethod_detect<WithAsyncMethod_extract<WithAsyncMethod_score<WithAsyncMethod_enroll<WithAsyncMethod_search<WithAsyncMethod_detectExtract<WithAsyncMethod_detectExtractEnroll<WithAsyncMethod_detectExtractSearch<WithAsyncMethod_galleryList<WithAsyncMethod_galleryDelete<WithAsyncMethod_enrollmentList<WithAsyncMethod_enrollmentDelete<WithAsyncMethod_enrollmentDeleteConditional<WithAsyncMethod_enrollmentTransfer<WithAsyncMethod_echo<Service > > > > > > > > > > > > > > > > AsyncService;
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_status : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_status() {
      ::grpc::Service::experimental().MarkMethodCallback(0,
        new ::grpc_impl::internal::CallbackUnaryHandler< ::FaceStatusRequest, ::FaceServiceInfo>(
          [this](::grpc::experimental::CallbackServerContext* context, const ::FaceStatusRequest* request, ::FaceServiceInfo* response) { return this->status(context, request, response); }));}
    void SetMessageAllocatorFor_status(
        ::grpc::experimental::MessageAllocator< ::FaceStatusRequest, ::FaceServiceInfo>* allocator) {
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::FaceStatusRequest, ::FaceServiceInfo>*>(
          ::grpc::Service::experimental().GetHandler(0))
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_status() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status status(::grpc::ServerContext* /*context*/, const ::FaceStatusRequest* /*request*/, ::FaceServiceInfo* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::experimental::ServerUnaryReactor* status(::grpc::experimental::CallbackServerContext* /*context*/, const ::FaceStatusRequest* /*request*/, ::FaceServiceInfo* /*response*/) { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_detect : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_detect() {
      ::grpc::Service::experimental().MarkMethodCallback(1,
        new ::grpc_impl::internal::CallbackUnaryHandler< ::DetectRequest, ::FaceRecordList>(
          [this](::grpc::experimental::CallbackServerContext* context, const ::DetectRequest* request, ::FaceRecordList* response) { return this->detect(context, request, response); }));}
    void SetMessageAllocatorFor_detect(
        ::grpc::experimental::MessageAllocator< ::DetectRequest, ::FaceRecordList>* allocator) {
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::DetectRequest, ::FaceRecordList>*>(
          ::grpc::Service::experimental().GetHandler(1))
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_detect() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status detect(::grpc::ServerContext* /*context*/, const ::DetectRequest* /*request*/, ::FaceRecordList* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::experimental::ServerUnaryReactor* detect(::grpc::experimental::CallbackServerContext* /*context*/, const ::DetectRequest* /*request*/, ::FaceRecordList* /*response*/) { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_extract : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_extract() {
      ::grpc::Service::experimental().MarkMethodCallback(2,
        new ::grpc_impl::internal::CallbackUnaryHandler< ::ExtractRequest, ::FaceRecordList>(
          [this](::grpc::experimental::CallbackServerContext* context, const ::ExtractRequest* request, ::FaceRecordList* response) { return this->extract(context, request, response); }));}
    void SetMessageAllocatorFor_extract(
        ::grpc::experimental::MessageAllocator< ::ExtractRequest, ::FaceRecordList>* allocator) {
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::ExtractRequest, ::FaceRecordList>*>(
          ::grpc::Service::experimental().GetHandler(2))
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_extract() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status extract(::grpc::ServerContext* /*context*/, const ::ExtractRequest* /*request*/, ::FaceRecordList* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::experimental::ServerUnaryReactor* extract(::grpc::experimental::CallbackServerContext* /*context*/, const ::ExtractRequest* /*request*/, ::FaceRecordList* /*response*/) { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_score : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_score() {
      ::grpc::Service::experimental().MarkMethodCallback(3,
        new ::grpc_impl::internal::CallbackUnaryHandler< ::ScoreRequest, ::Matrix>(
          [this](::grpc::experimental::CallbackServerContext* context, const ::ScoreRequest* request, ::Matrix* response) { return this->score(context, request, response); }));}
    void SetMessageAllocatorFor_score(
        ::grpc::experimental::MessageAllocator< ::ScoreRequest, ::Matrix>* allocator) {
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::ScoreRequest, ::Matrix>*>(
          ::grpc::Service::experimental().GetHandler(3))
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_score() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status score(::grpc::ServerContext* /*context*/, const ::ScoreRequest* /*request*/, ::Matrix* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::experimental::ServerUnaryReactor* score(::grpc::experimental::CallbackServerContext* /*context*/, const ::ScoreRequest* /*request*/, ::Matrix* /*response*/) { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_enroll : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_enroll() {
      ::grpc::Service::experimental().MarkMethodCallback(4,
        new ::grpc_impl::internal::CallbackUnaryHandler< ::EnrollRequest, ::FaceRecordList>(
          [this](::grpc::experimental::CallbackServerContext* context, const ::EnrollRequest* request, ::FaceRecordList* response) { return this->enroll(context, request, response); }));}
    void SetMessageAllocatorFor_enroll(
        ::grpc::experimental::MessageAllocator< ::EnrollRequest, ::FaceRecordList>* allocator) {
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::EnrollRequest, ::FaceRecordList>*>(
          ::grpc::Service::experimental().GetHandler(4))
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_enroll() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status enroll(::grpc::ServerContext* /*context*/, const ::EnrollRequest* /*request*/, ::FaceRecordList* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::experimental::ServerUnaryReactor* enroll(::grpc::experimental::CallbackServerContext* /*context*/, const ::EnrollRequest* /*request*/, ::FaceRecordList* /*response*/) { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_search : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_search() {
      ::grpc::Service::experimental().MarkMethodCallback(5,
        new ::grpc_impl::internal::CallbackUnaryHandler< ::SearchRequest, ::FaceRecordList>(
          [this](::grpc::experimental::CallbackServerContext* context, const ::SearchRequest* request, ::FaceRecordList* response) { return this->search(context, request, response); }));}
    void SetMessageAllocatorFor_search(
        ::grpc::experimental::MessageAllocator< ::SearchRequest, ::FaceRecordList>* allocator) {
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::SearchRequest, ::FaceRecordList>*>(
          ::grpc::Service::experimental().GetHandler(5))
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_search() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status search(::grpc::ServerContext* /*context*/, const ::SearchRequest* /*request*/, ::FaceRecordList* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::experimental::ServerUnaryReactor* search(::grpc::experimental::CallbackServerContext* /*context*/, const ::SearchRequest* /*request*/, ::FaceRecordList* /*response*/) { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_detectExtract : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_detectExtract() {
      ::grpc::Service::experimental().MarkMethodCallback(6,
        new ::grpc_impl::internal::CallbackUnaryHandler< ::DetectExtractRequest, ::FaceRecordList>(
          [this](::grpc::experimental::CallbackServerContext* context, const ::DetectExtractRequest* request, ::FaceRecordList* response) { return this->detectExtract(context, request, response); }));}
    void SetMessageAllocatorFor_detectExtract(
        ::grpc::experimental::MessageAllocator< ::DetectExtractRequest, ::FaceRecordList>* allocator) {
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::DetectExtractRequest, ::FaceRecordList>*>(
          ::grpc::Service::experimental().GetHandler(6))
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_detectExtract() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status detectExtract(::grpc::ServerContext* /*context*/, const ::DetectExtractRequest* /*request*/, ::FaceRecordList* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::experimental::ServerUnaryReactor* detectExtract(::grpc::experimental::CallbackServerContext* /*context*/, const ::DetectExtractRequest* /*request*/, ::FaceRecordList* /*response*/) { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_detectExtractEnroll : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_detectExtractEnroll() {
      ::grpc::Service::experimental().MarkMethodCallback(7,
        new ::grpc_impl::internal::CallbackUnaryHandler< ::DetectExtractEnrollRequest, ::FaceRecordList>(
          [this](::grpc::experimental::CallbackServerContext* context, const ::DetectExtractEnrollRequest* request, ::FaceRecordList* response) { return this->detectExtractEnroll(context, request, response); }));}
    void SetMessageAllocatorFor_detectExtractEnroll(
        ::grpc::experimental::MessageAllocator< ::DetectExtractEnrollRequest, ::FaceRecordList>* allocator) {
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::DetectExtractEnrollRequest, ::FaceRecordList>*>(
          ::grpc::Service::experimental().GetHandler(7))
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_detectExtractEnroll() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status detectExtractEnroll(::grpc::ServerContext* /*context*/, const ::DetectExtractEnrollRequest* /*request*/, ::FaceRecordList* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::experimental::ServerUnaryReactor* detectExtractEnroll(::grpc::experimental::CallbackServerContext* /*context*/, const ::DetectExtractEnrollRequest* /*request*/, ::FaceRecordList* /*response*/) { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_detectExtractSearch : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_detectExtractSearch() {
      ::grpc::Service::experimental().MarkMethodCallback(8,
        new ::grpc_impl::internal::CallbackUnaryHandler< ::DetectExtractSearchRequest, ::FaceRecordList>(
          [this](::grpc::experimental::CallbackServerContext* context, const ::DetectExtractSearchRequest* request, ::FaceRecordList* response) { return this->detectExtractSearch(context, request, response); }));}
    void SetMessageAllocatorFor_detectExtractSearch(
        ::grpc::experimental::MessageAllocator< ::DetectExtractSearchRequest, ::FaceRecordList>* allocator) {
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::DetectExtractSearchRequest, ::FaceRecordList>*>(
          ::grpc::Service::experimental().GetHandler(8))
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_detectExtractSearch() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status detectExtractSearch(::grpc::ServerContext* /*context*/, const ::DetectExtractSearchRequest* /*request*/, ::FaceRecordList* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::experimental::ServerUnaryReactor* detectExtractSearch(::grpc::experimental::CallbackServerContext* /*context*/, const ::DetectExtractSearchRequest* /*request*/, ::FaceRecordList* /*response*/) { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_galleryList : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_galleryList() {
      ::grpc::Service::experimental().MarkMethodCallback(9,
        new ::grpc_impl::internal::CallbackUnaryHandler< ::GalleryListRequest, ::GalleryList>(
          [this](::grpc::experimental::CallbackServerContext* context, const ::GalleryListRequest* request, ::GalleryList* response) { return this->galleryList(context, request, response); }));}
    void SetMessageAllocatorFor_galleryList(
        ::grpc::experimental::MessageAllocator< ::GalleryListRequest, ::GalleryList>* allocator) {
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::GalleryListRequest, ::GalleryList>*>(
          ::grpc::Service::experimental().GetHandler(9))
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_galleryList() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status galleryList(::grpc::ServerContext* /*context*/, const ::GalleryListRequest* /*request*/, ::GalleryList* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::experimental::ServerUnaryReactor* galleryList(::grpc::experimental::CallbackServerContext* /*context*/, const ::GalleryListRequest* /*request*/, ::GalleryList* /*response*/) { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_galleryDelete : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_galleryDelete() {
      ::grpc::Service::experimental().MarkMethodCallback(10,
        new ::grpc_impl::internal::CallbackUnaryHandler< ::GalleryDeleteRequest, ::Empty>(
          [this](::grpc::experimental::CallbackServerContext* context, const ::GalleryDeleteRequest* request, ::Empty* response) { return this->galleryDelete(context, request, response); }));}
    void SetMessageAllocatorFor_galleryDelete(
        ::grpc::experimental::MessageAllocator< ::GalleryDeleteRequest, ::Empty>* allocator) {
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::GalleryDeleteRequest, ::Empty>*>(
          ::grpc::Service::experimental().GetHandler(10))
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_galleryDelete() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status galleryDelete(::grpc::ServerContext* /*context*/, const ::GalleryDeleteRequest* /*request*/, ::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::experimental::ServerUnaryReactor* galleryDelete(::grpc::experimental::CallbackServerContext* /*context*/, const ::GalleryDeleteRequest* /*request*/, ::Empty* /*response*/) { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_enrollmentList : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_enrollmentList() {
      ::grpc::Service::experimental().MarkMethodCallback(11,
        new ::grpc_impl::internal::CallbackUnaryHandler< ::EnrollmentListRequest, ::FaceRecordList>(
          [this](::grpc::experimental::CallbackServerContext* context, const ::EnrollmentListRequest* request, ::FaceRecordList* response) { return this->enrollmentList(context, request, response); }));}
    void SetMessageAllocatorFor_enrollmentList(
        ::grpc::experimental::MessageAllocator< ::EnrollmentListRequest, ::FaceRecordList>* allocator) {
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::EnrollmentListRequest, ::FaceRecordList>*>(
          ::grpc::Service::experimental().GetHandler(11))
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_enrollmentList() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status enrollmentList(::grpc::ServerContext* /*context*/, const ::EnrollmentListRequest* /*request*/, ::FaceRecordList* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::experimental::ServerUnaryReactor* enrollmentList(::grpc::experimental::CallbackServerContext* /*context*/, const ::EnrollmentListRequest* /*request*/, ::FaceRecordList* /*response*/) { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_enrollmentDelete : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_enrollmentDelete() {
      ::grpc::Service::experimental().MarkMethodCallback(12,
        new ::grpc_impl::internal::CallbackUnaryHandler< ::EnrollmentDeleteRequest, ::FaceRecordList>(
          [this](::grpc::experimental::CallbackServerContext* context, const ::EnrollmentDeleteRequest* request, ::FaceRecordList* response) { return this->enrollmentDelete(context, request, response); }));}
    void SetMessageAllocatorFor_enrollmentDelete(
        ::grpc::experimental::MessageAllocator< ::EnrollmentDeleteRequest, ::FaceRecordList>* allocator) {
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::EnrollmentDeleteRequest, ::FaceRecordList>*>(
          ::grpc::Service::experimental().GetHandler(12))
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_enrollmentDelete() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status enrollmentDelete(::grpc::ServerContext* /*context*/, const ::EnrollmentDeleteRequest* /*request*/, ::FaceRecordList* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::experimental::ServerUnaryReactor* enrollmentDelete(::grpc::experimental::CallbackServerContext* /*context*/, const ::EnrollmentDeleteRequest* /*request*/, ::FaceRecordList* /*response*/) { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_enrollmentDeleteConditional : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_enrollmentDeleteConditional() {
      ::grpc::Service::experimental().MarkMethodCallback(13,
        new ::grpc_impl::internal::CallbackUnaryHandler< ::EnrollmentDeleteRequest, ::FaceRecordList>(
          [this](::grpc::experimental::CallbackServerContext* context, const ::EnrollmentDeleteRequest* request, ::FaceRecordList* response) { return this->enrollmentDeleteConditional(context, request, response); }));}
    void SetMessageAllocatorFor_enrollmentDeleteConditional(
        ::grpc::experimental::MessageAllocator< ::EnrollmentDeleteRequest, ::FaceRecordList>* allocator) {
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::EnrollmentDeleteRequest, ::FaceRecordList>*>(
          ::grpc::Service::experimental().GetHandler(13))
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_enrollmentDeleteConditional() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status enrollmentDeleteConditional(::grpc::ServerContext* /*context*/, const ::EnrollmentDeleteRequest* /*request*/, ::FaceRecordList* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::experimental::ServerUnaryReactor* enrollmentDeleteConditional(::grpc::experimental::CallbackServerContext* /*context*/, const ::EnrollmentDeleteRequest* /*request*/, ::FaceRecordList* /*response*/) { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_enrollmentTransfer : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_enrollmentTransfer() {
      ::grpc::Service::experimental().MarkMethodCallback(14,
        new ::grpc_impl::internal::CallbackUnaryHandler< ::EnrollmentDeleteRequest, ::FaceRecordList>(
          [this](::grpc::experimental::CallbackServerContext* context, const ::EnrollmentDeleteRequest* request, ::FaceRecordList* response) { return this->enrollmentTransfer(context, request, response); }));}
    void SetMessageAllocatorFor_enrollmentTransfer(
        ::grpc::experimental::MessageAllocator< ::EnrollmentDeleteRequest, ::FaceRecordList>* allocator) {
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::EnrollmentDeleteRequest, ::FaceRecordList>*>(
          ::grpc::Service::experimental().GetHandler(14))
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_enrollmentTransfer() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status enrollmentTransfer(::grpc::ServerContext* /*context*/, const ::EnrollmentDeleteRequest* /*request*/, ::FaceRecordList* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::experimental::ServerUnaryReactor* enrollmentTransfer(::grpc::experimental::CallbackServerContext* /*context*/, const ::EnrollmentDeleteRequest* /*request*/, ::FaceRecordList* /*response*/) { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_echo : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_echo() {
      ::grpc::Service::experimental().MarkMethodCallback(15,
        new ::grpc_impl::internal::CallbackUnaryHandler< ::Matrix, ::Matrix>(
          [this](::grpc::experimental::CallbackServerContext* context, const ::Matrix* request, ::Matrix* response) { return this->echo(context, request, response); }));}
    void SetMessageAllocatorFor_echo(
        ::grpc::experimental::MessageAllocator< ::Matrix, ::Matrix>* allocator) {
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::Matrix, ::Matrix>*>(
          ::grpc::Service::experimental().GetHandler(15))
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_echo() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status echo(::grpc::ServerContext* /*context*/, const ::Matrix* /*request*/, ::Matrix* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::experimental::ServerUnaryReactor* echo(::grpc::experimental::CallbackServerContext* /*context*/, const ::Matrix* /*request*/, ::Matrix* /*response*/) { return nullptr; }
  };
  typedef ExperimentalWithCallbackMethod_status<ExperimentalWithCallbackMethod_detect<ExperimentalWithCallbackMethod_extract<ExperimentalWithCallbackMethod_score<ExperimentalWithCallbackMethod_enroll<ExperimentalWithCallbackMethod_search<ExperimentalWithCallbackMethod_detectExtract<ExperimentalWithCallbackMethod_detectExtractEnroll<ExperimentalWithCallbackMethod_detectExtractSearch<ExperimentalWithCallbackMethod_galleryList<ExperimentalWithCallbackMethod_galleryDelete<ExperimentalWithCallbackMethod_enrollmentList<ExperimentalWithCallbackMethod_enrollmentDelete<ExperimentalWithCallbackMethod_enrollmentDeleteConditional<ExperimentalWithCallbackMethod_enrollmentTransfer<ExperimentalWithCallbackMethod_echo<Service > > > > > > > > > > > > > > > > ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_status : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_status() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_status() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status status(::grpc::ServerContext* /*context*/, const ::FaceStatusRequest* /*request*/, ::FaceServiceInfo* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_detect : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_detect() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_detect() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status detect(::grpc::ServerContext* /*context*/, const ::DetectRequest* /*request*/, ::FaceRecordList* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_extract : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_extract() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_extract() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status extract(::grpc::ServerContext* /*context*/, const ::ExtractRequest* /*request*/, ::FaceRecordList* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_score : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_score() {
      ::grpc::Service::MarkMethodGeneric(3);
    }
    ~WithGenericMethod_score() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status score(::grpc::ServerContext* /*context*/, const ::ScoreRequest* /*request*/, ::Matrix* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_enroll : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_enroll() {
      ::grpc::Service::MarkMethodGeneric(4);
    }
    ~WithGenericMethod_enroll() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status enroll(::grpc::ServerContext* /*context*/, const ::EnrollRequest* /*request*/, ::FaceRecordList* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_search : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_search() {
      ::grpc::Service::MarkMethodGeneric(5);
    }
    ~WithGenericMethod_search() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status search(::grpc::ServerContext* /*context*/, const ::SearchRequest* /*request*/, ::FaceRecordList* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_detectExtract : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_detectExtract() {
      ::grpc::Service::MarkMethodGeneric(6);
    }
    ~WithGenericMethod_detectExtract() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status detectExtract(::grpc::ServerContext* /*context*/, const ::DetectExtractRequest* /*request*/, ::FaceRecordList* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_detectExtractEnroll : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_detectExtractEnroll() {
      ::grpc::Service::MarkMethodGeneric(7);
    }
    ~WithGenericMethod_detectExtractEnroll() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status detectExtractEnroll(::grpc::ServerContext* /*context*/, const ::DetectExtractEnrollRequest* /*request*/, ::FaceRecordList* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_detectExtractSearch : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_detectExtractSearch() {
      ::grpc::Service::MarkMethodGeneric(8);
    }
    ~WithGenericMethod_detectExtractSearch() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status detectExtractSearch(::grpc::ServerContext* /*context*/, const ::DetectExtractSearchRequest* /*request*/, ::FaceRecordList* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_galleryList : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_galleryList() {
      ::grpc::Service::MarkMethodGeneric(9);
    }
    ~WithGenericMethod_galleryList() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status galleryList(::grpc::ServerContext* /*context*/, const ::GalleryListRequest* /*request*/, ::GalleryList* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_galleryDelete : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_galleryDelete() {
      ::grpc::Service::MarkMethodGeneric(10);
    }
    ~WithGenericMethod_galleryDelete() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status galleryDelete(::grpc::ServerContext* /*context*/, const ::GalleryDeleteRequest* /*request*/, ::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_enrollmentList : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_enrollmentList() {
      ::grpc::Service::MarkMethodGeneric(11);
    }
    ~WithGenericMethod_enrollmentList() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status enrollmentList(::grpc::ServerContext* /*context*/, const ::EnrollmentListRequest* /*request*/, ::FaceRecordList* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_enrollmentDelete : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_enrollmentDelete() {
      ::grpc::Service::MarkMethodGeneric(12);
    }
    ~WithGenericMethod_enrollmentDelete() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status enrollmentDelete(::grpc::ServerContext* /*context*/, const ::EnrollmentDeleteRequest* /*request*/, ::FaceRecordList* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_enrollmentDeleteConditional : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_enrollmentDeleteConditional() {
      ::grpc::Service::MarkMethodGeneric(13);
    }
    ~WithGenericMethod_enrollmentDeleteConditional() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status enrollmentDeleteConditional(::grpc::ServerContext* /*context*/, const ::EnrollmentDeleteRequest* /*request*/, ::FaceRecordList* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_enrollmentTransfer : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_enrollmentTransfer() {
      ::grpc::Service::MarkMethodGeneric(14);
    }
    ~WithGenericMethod_enrollmentTransfer() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status enrollmentTransfer(::grpc::ServerContext* /*context*/, const ::EnrollmentDeleteRequest* /*request*/, ::FaceRecordList* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_echo : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_echo() {
      ::grpc::Service::MarkMethodGeneric(15);
    }
    ~WithGenericMethod_echo() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status echo(::grpc::ServerContext* /*context*/, const ::Matrix* /*request*/, ::Matrix* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_status : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_status() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_status() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status status(::grpc::ServerContext* /*context*/, const ::FaceStatusRequest* /*request*/, ::FaceServiceInfo* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requeststatus(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_detect : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_detect() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_detect() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status detect(::grpc::ServerContext* /*context*/, const ::DetectRequest* /*request*/, ::FaceRecordList* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requestdetect(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_extract : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_extract() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_extract() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status extract(::grpc::ServerContext* /*context*/, const ::ExtractRequest* /*request*/, ::FaceRecordList* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requestextract(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_score : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_score() {
      ::grpc::Service::MarkMethodRaw(3);
    }
    ~WithRawMethod_score() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status score(::grpc::ServerContext* /*context*/, const ::ScoreRequest* /*request*/, ::Matrix* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requestscore(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_enroll : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_enroll() {
      ::grpc::Service::MarkMethodRaw(4);
    }
    ~WithRawMethod_enroll() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status enroll(::grpc::ServerContext* /*context*/, const ::EnrollRequest* /*request*/, ::FaceRecordList* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requestenroll(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_search : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_search() {
      ::grpc::Service::MarkMethodRaw(5);
    }
    ~WithRawMethod_search() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status search(::grpc::ServerContext* /*context*/, const ::SearchRequest* /*request*/, ::FaceRecordList* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requestsearch(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(5, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_detectExtract : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_detectExtract() {
      ::grpc::Service::MarkMethodRaw(6);
    }
    ~WithRawMethod_detectExtract() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status detectExtract(::grpc::ServerContext* /*context*/, const ::DetectExtractRequest* /*request*/, ::FaceRecordList* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestdetectExtract(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(6, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_detectExtractEnroll : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_detectExtractEnroll() {
      ::grpc::Service::MarkMethodRaw(7);
    }
    ~WithRawMethod_detectExtractEnroll() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status detectExtractEnroll(::grpc::ServerContext* /*context*/, const ::DetectExtractEnrollRequest* /*request*/, ::FaceRecordList* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestdetectExtractEnroll(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(7, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_detectExtractSearch : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_detectExtractSearch() {
      ::grpc::Service::MarkMethodRaw(8);
    }
    ~WithRawMethod_detectExtractSearch() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status detectExtractSearch(::grpc::ServerContext* /*context*/, const ::DetectExtractSearchRequest* /*request*/, ::FaceRecordList* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestdetectExtractSearch(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(8, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_galleryList : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_galleryList() {
      ::grpc::Service::MarkMethodRaw(9);
    }
    ~WithRawMethod_galleryList() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status galleryList(::grpc::ServerContext* /*context*/, const ::GalleryListRequest* /*request*/, ::GalleryList* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestgalleryList(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(9, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_galleryDelete : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_galleryDelete() {
      ::grpc::Service::MarkMethodRaw(10);
    }
    ~WithRawMethod_galleryDelete() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status galleryDelete(::grpc::ServerContext* /*context*/, const ::GalleryDeleteRequest* /*request*/, ::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestgalleryDelete(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(10, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_enrollmentList : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_enrollmentList() {
      ::grpc::Service::MarkMethodRaw(11);
    }
    ~WithRawMethod_enrollmentList() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status enrollmentList(::grpc::ServerContext* /*context*/, const ::EnrollmentListRequest* /*request*/, ::FaceRecordList* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestenrollmentList(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(11, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_enrollmentDelete : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_enrollmentDelete() {
      ::grpc::Service::MarkMethodRaw(12);
    }
    ~WithRawMethod_enrollmentDelete() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status enrollmentDelete(::grpc::ServerContext* /*context*/, const ::EnrollmentDeleteRequest* /*request*/, ::FaceRecordList* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestenrollmentDelete(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(12, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_enrollmentDeleteConditional : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_enrollmentDeleteConditional() {
      ::grpc::Service::MarkMethodRaw(13);
    }
    ~WithRawMethod_enrollmentDeleteConditional() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status enrollmentDeleteConditional(::grpc::ServerContext* /*context*/, const ::EnrollmentDeleteRequest* /*request*/, ::FaceRecordList* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestenrollmentDeleteConditional(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(13, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_enrollmentTransfer : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_enrollmentTransfer() {
      ::grpc::Service::MarkMethodRaw(14);
    }
    ~WithRawMethod_enrollmentTransfer() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status enrollmentTransfer(::grpc::ServerContext* /*context*/, const ::EnrollmentDeleteRequest* /*request*/, ::FaceRecordList* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestenrollmentTransfer(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(14, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_echo : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_echo() {
      ::grpc::Service::MarkMethodRaw(15);
    }
    ~WithRawMethod_echo() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status echo(::grpc::ServerContext* /*context*/, const ::Matrix* /*request*/, ::Matrix* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requestecho(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(15, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_status : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_status() {
      ::grpc::Service::experimental().MarkMethodRawCallback(0,
        new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this](::grpc::experimental::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->status(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_status() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status status(::grpc::ServerContext* /*context*/, const ::FaceStatusRequest* /*request*/, ::FaceServiceInfo* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::experimental::ServerUnaryReactor* status(::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/) { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_detect : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_detect() {
      ::grpc::Service::experimental().MarkMethodRawCallback(1,
        new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this](::grpc::experimental::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->detect(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_detect() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status detect(::grpc::ServerContext* /*context*/, const ::DetectRequest* /*request*/, ::FaceRecordList* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::experimental::ServerUnaryReactor* detect(::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/) { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_extract : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_extract() {
      ::grpc::Service::experimental().MarkMethodRawCallback(2,
        new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this](::grpc::experimental::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->extract(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_extract() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status extract(::grpc::ServerContext* /*context*/, const ::ExtractRequest* /*request*/, ::FaceRecordList* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::experimental::ServerUnaryReactor* extract(::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/) { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_score : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_score() {
      ::grpc::Service::experimental().MarkMethodRawCallback(3,
        new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this](::grpc::experimental::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->score(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_score() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status score(::grpc::ServerContext* /*context*/, const ::ScoreRequest* /*request*/, ::Matrix* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::experimental::ServerUnaryReactor* score(::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/) { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_enroll : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_enroll() {
      ::grpc::Service::experimental().MarkMethodRawCallback(4,
        new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this](::grpc::experimental::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->enroll(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_enroll() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status enroll(::grpc::ServerContext* /*context*/, const ::EnrollRequest* /*request*/, ::FaceRecordList* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::experimental::ServerUnaryReactor* enroll(::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/) { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_search : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_search() {
      ::grpc::Service::experimental().MarkMethodRawCallback(5,
        new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this](::grpc::experimental::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->search(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_search() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status search(::grpc::ServerContext* /*context*/, const ::SearchRequest* /*request*/, ::FaceRecordList* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::experimental::ServerUnaryReactor* search(::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/) { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_detectExtract : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_detectExtract() {
      ::grpc::Service::experimental().MarkMethodRawCallback(6,
        new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this](::grpc::experimental::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->detectExtract(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_detectExtract() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status detectExtract(::grpc::ServerContext* /*context*/, const ::DetectExtractRequest* /*request*/, ::FaceRecordList* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::experimental::ServerUnaryReactor* detectExtract(::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/) { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_detectExtractEnroll : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_detectExtractEnroll() {
      ::grpc::Service::experimental().MarkMethodRawCallback(7,
        new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this](::grpc::experimental::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->detectExtractEnroll(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_detectExtractEnroll() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status detectExtractEnroll(::grpc::ServerContext* /*context*/, const ::DetectExtractEnrollRequest* /*request*/, ::FaceRecordList* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::experimental::ServerUnaryReactor* detectExtractEnroll(::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/) { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_detectExtractSearch : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_detectExtractSearch() {
      ::grpc::Service::experimental().MarkMethodRawCallback(8,
        new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this](::grpc::experimental::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->detectExtractSearch(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_detectExtractSearch() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status detectExtractSearch(::grpc::ServerContext* /*context*/, const ::DetectExtractSearchRequest* /*request*/, ::FaceRecordList* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::experimental::ServerUnaryReactor* detectExtractSearch(::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/) { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_galleryList : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_galleryList() {
      ::grpc::Service::experimental().MarkMethodRawCallback(9,
        new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this](::grpc::experimental::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->galleryList(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_galleryList() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status galleryList(::grpc::ServerContext* /*context*/, const ::GalleryListRequest* /*request*/, ::GalleryList* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::experimental::ServerUnaryReactor* galleryList(::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/) { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_galleryDelete : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_galleryDelete() {
      ::grpc::Service::experimental().MarkMethodRawCallback(10,
        new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this](::grpc::experimental::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->galleryDelete(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_galleryDelete() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status galleryDelete(::grpc::ServerContext* /*context*/, const ::GalleryDeleteRequest* /*request*/, ::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::experimental::ServerUnaryReactor* galleryDelete(::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/) { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_enrollmentList : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_enrollmentList() {
      ::grpc::Service::experimental().MarkMethodRawCallback(11,
        new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this](::grpc::experimental::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->enrollmentList(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_enrollmentList() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status enrollmentList(::grpc::ServerContext* /*context*/, const ::EnrollmentListRequest* /*request*/, ::FaceRecordList* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::experimental::ServerUnaryReactor* enrollmentList(::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/) { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_enrollmentDelete : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_enrollmentDelete() {
      ::grpc::Service::experimental().MarkMethodRawCallback(12,
        new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this](::grpc::experimental::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->enrollmentDelete(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_enrollmentDelete() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status enrollmentDelete(::grpc::ServerContext* /*context*/, const ::EnrollmentDeleteRequest* /*request*/, ::FaceRecordList* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::experimental::ServerUnaryReactor* enrollmentDelete(::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/) { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_enrollmentDeleteConditional : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_enrollmentDeleteConditional() {
      ::grpc::Service::experimental().MarkMethodRawCallback(13,
        new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this](::grpc::experimental::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->enrollmentDeleteConditional(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_enrollmentDeleteConditional() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status enrollmentDeleteConditional(::grpc::ServerContext* /*context*/, const ::EnrollmentDeleteRequest* /*request*/, ::FaceRecordList* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::experimental::ServerUnaryReactor* enrollmentDeleteConditional(::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/) { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_enrollmentTransfer : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_enrollmentTransfer() {
      ::grpc::Service::experimental().MarkMethodRawCallback(14,
        new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this](::grpc::experimental::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->enrollmentTransfer(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_enrollmentTransfer() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status enrollmentTransfer(::grpc::ServerContext* /*context*/, const ::EnrollmentDeleteRequest* /*request*/, ::FaceRecordList* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::experimental::ServerUnaryReactor* enrollmentTransfer(::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/) { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_echo : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_echo() {
      ::grpc::Service::experimental().MarkMethodRawCallback(15,
        new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this](::grpc::experimental::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->echo(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_echo() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status echo(::grpc::ServerContext* /*context*/, const ::Matrix* /*request*/, ::Matrix* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::experimental::ServerUnaryReactor* echo(::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/) { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_status : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_status() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler< ::FaceStatusRequest, ::FaceServiceInfo>(std::bind(&WithStreamedUnaryMethod_status<BaseClass>::Streamedstatus, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_status() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status status(::grpc::ServerContext* /*context*/, const ::FaceStatusRequest* /*request*/, ::FaceServiceInfo* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status Streamedstatus(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::FaceStatusRequest,::FaceServiceInfo>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_detect : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_detect() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler< ::DetectRequest, ::FaceRecordList>(std::bind(&WithStreamedUnaryMethod_detect<BaseClass>::Streameddetect, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_detect() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status detect(::grpc::ServerContext* /*context*/, const ::DetectRequest* /*request*/, ::FaceRecordList* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status Streameddetect(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::DetectRequest,::FaceRecordList>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_extract : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_extract() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler< ::ExtractRequest, ::FaceRecordList>(std::bind(&WithStreamedUnaryMethod_extract<BaseClass>::Streamedextract, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_extract() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status extract(::grpc::ServerContext* /*context*/, const ::ExtractRequest* /*request*/, ::FaceRecordList* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status Streamedextract(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::ExtractRequest,::FaceRecordList>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_score : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_score() {
      ::grpc::Service::MarkMethodStreamed(3,
        new ::grpc::internal::StreamedUnaryHandler< ::ScoreRequest, ::Matrix>(std::bind(&WithStreamedUnaryMethod_score<BaseClass>::Streamedscore, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_score() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status score(::grpc::ServerContext* /*context*/, const ::ScoreRequest* /*request*/, ::Matrix* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status Streamedscore(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::ScoreRequest,::Matrix>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_enroll : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_enroll() {
      ::grpc::Service::MarkMethodStreamed(4,
        new ::grpc::internal::StreamedUnaryHandler< ::EnrollRequest, ::FaceRecordList>(std::bind(&WithStreamedUnaryMethod_enroll<BaseClass>::Streamedenroll, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_enroll() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status enroll(::grpc::ServerContext* /*context*/, const ::EnrollRequest* /*request*/, ::FaceRecordList* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status Streamedenroll(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::EnrollRequest,::FaceRecordList>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_search : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_search() {
      ::grpc::Service::MarkMethodStreamed(5,
        new ::grpc::internal::StreamedUnaryHandler< ::SearchRequest, ::FaceRecordList>(std::bind(&WithStreamedUnaryMethod_search<BaseClass>::Streamedsearch, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_search() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status search(::grpc::ServerContext* /*context*/, const ::SearchRequest* /*request*/, ::FaceRecordList* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status Streamedsearch(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::SearchRequest,::FaceRecordList>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_detectExtract : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_detectExtract() {
      ::grpc::Service::MarkMethodStreamed(6,
        new ::grpc::internal::StreamedUnaryHandler< ::DetectExtractRequest, ::FaceRecordList>(std::bind(&WithStreamedUnaryMethod_detectExtract<BaseClass>::StreameddetectExtract, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_detectExtract() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status detectExtract(::grpc::ServerContext* /*context*/, const ::DetectExtractRequest* /*request*/, ::FaceRecordList* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreameddetectExtract(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::DetectExtractRequest,::FaceRecordList>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_detectExtractEnroll : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_detectExtractEnroll() {
      ::grpc::Service::MarkMethodStreamed(7,
        new ::grpc::internal::StreamedUnaryHandler< ::DetectExtractEnrollRequest, ::FaceRecordList>(std::bind(&WithStreamedUnaryMethod_detectExtractEnroll<BaseClass>::StreameddetectExtractEnroll, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_detectExtractEnroll() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status detectExtractEnroll(::grpc::ServerContext* /*context*/, const ::DetectExtractEnrollRequest* /*request*/, ::FaceRecordList* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreameddetectExtractEnroll(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::DetectExtractEnrollRequest,::FaceRecordList>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_detectExtractSearch : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_detectExtractSearch() {
      ::grpc::Service::MarkMethodStreamed(8,
        new ::grpc::internal::StreamedUnaryHandler< ::DetectExtractSearchRequest, ::FaceRecordList>(std::bind(&WithStreamedUnaryMethod_detectExtractSearch<BaseClass>::StreameddetectExtractSearch, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_detectExtractSearch() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status detectExtractSearch(::grpc::ServerContext* /*context*/, const ::DetectExtractSearchRequest* /*request*/, ::FaceRecordList* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreameddetectExtractSearch(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::DetectExtractSearchRequest,::FaceRecordList>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_galleryList : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_galleryList() {
      ::grpc::Service::MarkMethodStreamed(9,
        new ::grpc::internal::StreamedUnaryHandler< ::GalleryListRequest, ::GalleryList>(std::bind(&WithStreamedUnaryMethod_galleryList<BaseClass>::StreamedgalleryList, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_galleryList() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status galleryList(::grpc::ServerContext* /*context*/, const ::GalleryListRequest* /*request*/, ::GalleryList* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedgalleryList(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::GalleryListRequest,::GalleryList>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_galleryDelete : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_galleryDelete() {
      ::grpc::Service::MarkMethodStreamed(10,
        new ::grpc::internal::StreamedUnaryHandler< ::GalleryDeleteRequest, ::Empty>(std::bind(&WithStreamedUnaryMethod_galleryDelete<BaseClass>::StreamedgalleryDelete, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_galleryDelete() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status galleryDelete(::grpc::ServerContext* /*context*/, const ::GalleryDeleteRequest* /*request*/, ::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedgalleryDelete(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::GalleryDeleteRequest,::Empty>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_enrollmentList : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_enrollmentList() {
      ::grpc::Service::MarkMethodStreamed(11,
        new ::grpc::internal::StreamedUnaryHandler< ::EnrollmentListRequest, ::FaceRecordList>(std::bind(&WithStreamedUnaryMethod_enrollmentList<BaseClass>::StreamedenrollmentList, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_enrollmentList() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status enrollmentList(::grpc::ServerContext* /*context*/, const ::EnrollmentListRequest* /*request*/, ::FaceRecordList* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedenrollmentList(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::EnrollmentListRequest,::FaceRecordList>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_enrollmentDelete : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_enrollmentDelete() {
      ::grpc::Service::MarkMethodStreamed(12,
        new ::grpc::internal::StreamedUnaryHandler< ::EnrollmentDeleteRequest, ::FaceRecordList>(std::bind(&WithStreamedUnaryMethod_enrollmentDelete<BaseClass>::StreamedenrollmentDelete, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_enrollmentDelete() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status enrollmentDelete(::grpc::ServerContext* /*context*/, const ::EnrollmentDeleteRequest* /*request*/, ::FaceRecordList* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedenrollmentDelete(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::EnrollmentDeleteRequest,::FaceRecordList>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_enrollmentDeleteConditional : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_enrollmentDeleteConditional() {
      ::grpc::Service::MarkMethodStreamed(13,
        new ::grpc::internal::StreamedUnaryHandler< ::EnrollmentDeleteRequest, ::FaceRecordList>(std::bind(&WithStreamedUnaryMethod_enrollmentDeleteConditional<BaseClass>::StreamedenrollmentDeleteConditional, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_enrollmentDeleteConditional() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status enrollmentDeleteConditional(::grpc::ServerContext* /*context*/, const ::EnrollmentDeleteRequest* /*request*/, ::FaceRecordList* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedenrollmentDeleteConditional(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::EnrollmentDeleteRequest,::FaceRecordList>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_enrollmentTransfer : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_enrollmentTransfer() {
      ::grpc::Service::MarkMethodStreamed(14,
        new ::grpc::internal::StreamedUnaryHandler< ::EnrollmentDeleteRequest, ::FaceRecordList>(std::bind(&WithStreamedUnaryMethod_enrollmentTransfer<BaseClass>::StreamedenrollmentTransfer, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_enrollmentTransfer() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status enrollmentTransfer(::grpc::ServerContext* /*context*/, const ::EnrollmentDeleteRequest* /*request*/, ::FaceRecordList* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedenrollmentTransfer(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::EnrollmentDeleteRequest,::FaceRecordList>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_echo : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_echo() {
      ::grpc::Service::MarkMethodStreamed(15,
        new ::grpc::internal::StreamedUnaryHandler< ::Matrix, ::Matrix>(std::bind(&WithStreamedUnaryMethod_echo<BaseClass>::Streamedecho, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_echo() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status echo(::grpc::ServerContext* /*context*/, const ::Matrix* /*request*/, ::Matrix* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status Streamedecho(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::Matrix,::Matrix>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_status<WithStreamedUnaryMethod_detect<WithStreamedUnaryMethod_extract<WithStreamedUnaryMethod_score<WithStreamedUnaryMethod_enroll<WithStreamedUnaryMethod_search<WithStreamedUnaryMethod_detectExtract<WithStreamedUnaryMethod_detectExtractEnroll<WithStreamedUnaryMethod_detectExtractSearch<WithStreamedUnaryMethod_galleryList<WithStreamedUnaryMethod_galleryDelete<WithStreamedUnaryMethod_enrollmentList<WithStreamedUnaryMethod_enrollmentDelete<WithStreamedUnaryMethod_enrollmentDeleteConditional<WithStreamedUnaryMethod_enrollmentTransfer<WithStreamedUnaryMethod_echo<Service > > > > > > > > > > > > > > > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_status<WithStreamedUnaryMethod_detect<WithStreamedUnaryMethod_extract<WithStreamedUnaryMethod_score<WithStreamedUnaryMethod_enroll<WithStreamedUnaryMethod_search<WithStreamedUnaryMethod_detectExtract<WithStreamedUnaryMethod_detectExtractEnroll<WithStreamedUnaryMethod_detectExtractSearch<WithStreamedUnaryMethod_galleryList<WithStreamedUnaryMethod_galleryDelete<WithStreamedUnaryMethod_enrollmentList<WithStreamedUnaryMethod_enrollmentDelete<WithStreamedUnaryMethod_enrollmentDeleteConditional<WithStreamedUnaryMethod_enrollmentTransfer<WithStreamedUnaryMethod_echo<Service > > > > > > > > > > > > > > > > StreamedService;
};


#endif  // GRPC_faro_2fproto_2fface_5fservice_2eproto__INCLUDED
