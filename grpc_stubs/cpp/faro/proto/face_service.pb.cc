// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: faro/proto/face_service.proto

#include "faro/proto/face_service.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_faro_2fproto_2fface_5fservice_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_AccessRecord_faro_2fproto_2fface_5fservice_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_faro_2fproto_2fface_5fservice_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<5> scc_info_Attribute_faro_2fproto_2fface_5fservice_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_faro_2fproto_2fface_5fservice_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_DetectRequest_faro_2fproto_2fface_5fservice_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_faro_2fproto_2fface_5fservice_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_Detection_faro_2fproto_2fface_5fservice_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_faro_2fproto_2fface_5fservice_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_DetectionOptions_faro_2fproto_2fface_5fservice_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_faro_2fproto_2fface_5fservice_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_EnrollOptions_faro_2fproto_2fface_5fservice_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_faro_2fproto_2fface_5fservice_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_EnrollRequest_faro_2fproto_2fface_5fservice_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_faro_2fproto_2fface_5fservice_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_EnrollmentInfo_faro_2fproto_2fface_5fservice_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_faro_2fproto_2fface_5fservice_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ErrorMessage_faro_2fproto_2fface_5fservice_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_faro_2fproto_2fface_5fservice_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ExtractOptions_faro_2fproto_2fface_5fservice_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_faro_2fproto_2fface_5fservice_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_ExtractRequest_faro_2fproto_2fface_5fservice_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_faro_2fproto_2fface_5fservice_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<6> scc_info_FaceRecord_faro_2fproto_2fface_5fservice_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_faro_2fproto_2fface_5fservice_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_FaceTemplate_faro_2fproto_2fface_5fservice_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_faro_2fproto_2fface_5fservice_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GalleryInfo_faro_2fproto_2fface_5fservice_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_faro_2fproto_2fimage_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Image_faro_2fproto_2fimage_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_faro_2fproto_2fface_5fservice_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Landmark_faro_2fproto_2fface_5fservice_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_faro_2fproto_2fface_5fservice_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_MatchInfo_faro_2fproto_2fface_5fservice_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_faro_2fproto_2fgeometry_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Matrix_faro_2fproto_2fgeometry_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_faro_2fproto_2fgeometry_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Point2D_faro_2fproto_2fgeometry_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_faro_2fproto_2fgeometry_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Rect_faro_2fproto_2fgeometry_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_faro_2fproto_2fface_5fservice_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SearchRequest_faro_2fproto_2fface_5fservice_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_faro_2fproto_2fface_5fservice_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_TemplateList_faro_2fproto_2fface_5fservice_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_faro_2fproto_2fgeometry_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Vector_faro_2fproto_2fgeometry_2eproto;
class AttributeDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Attribute> _instance;
} _Attribute_default_instance_;
class ErrorMessageDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ErrorMessage> _instance;
} _ErrorMessage_default_instance_;
class DetectionDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Detection> _instance;
} _Detection_default_instance_;
class LandmarkDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Landmark> _instance;
} _Landmark_default_instance_;
class DetectionOptionsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DetectionOptions> _instance;
} _DetectionOptions_default_instance_;
class ExtractOptionsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ExtractOptions> _instance;
} _ExtractOptions_default_instance_;
class EnrollOptionsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<EnrollOptions> _instance;
} _EnrollOptions_default_instance_;
class DetectionListDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DetectionList> _instance;
} _DetectionList_default_instance_;
class MatchListDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MatchList> _instance;
} _MatchList_default_instance_;
class MatchInfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MatchInfo> _instance;
} _MatchInfo_default_instance_;
class TemplateInputDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TemplateInput> _instance;
} _TemplateInput_default_instance_;
class FaceTemplateDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<FaceTemplate> _instance;
} _FaceTemplate_default_instance_;
class TemplateListDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TemplateList> _instance;
} _TemplateList_default_instance_;
class AccessRecordDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AccessRecord> _instance;
} _AccessRecord_default_instance_;
class FaceRecordDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<FaceRecord> _instance;
} _FaceRecord_default_instance_;
class FaceRecordListDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<FaceRecordList> _instance;
} _FaceRecordList_default_instance_;
class VerificationRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<VerificationRequest> _instance;
} _VerificationRequest_default_instance_;
class VerificationResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<VerificationResponse> _instance;
} _VerificationResponse_default_instance_;
class SearchRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SearchRequest> _instance;
} _SearchRequest_default_instance_;
class SearchResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SearchResponse> _instance;
} _SearchResponse_default_instance_;
class EnrollRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<EnrollRequest> _instance;
} _EnrollRequest_default_instance_;
class DetectRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DetectRequest> _instance;
} _DetectRequest_default_instance_;
class ExtractRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ExtractRequest> _instance;
} _ExtractRequest_default_instance_;
class ScoreRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ScoreRequest> _instance;
} _ScoreRequest_default_instance_;
class DetectExtractRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DetectExtractRequest> _instance;
} _DetectExtractRequest_default_instance_;
class DetectExtractEnrollRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DetectExtractEnrollRequest> _instance;
} _DetectExtractEnrollRequest_default_instance_;
class DetectExtractSearchRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DetectExtractSearchRequest> _instance;
} _DetectExtractSearchRequest_default_instance_;
class FaceStatusRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<FaceStatusRequest> _instance;
} _FaceStatusRequest_default_instance_;
class FaceServiceInfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<FaceServiceInfo> _instance;
} _FaceServiceInfo_default_instance_;
class GalleryListRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GalleryListRequest> _instance;
} _GalleryListRequest_default_instance_;
class GalleryDeleteRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GalleryDeleteRequest> _instance;
} _GalleryDeleteRequest_default_instance_;
class EnrollmentListRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<EnrollmentListRequest> _instance;
} _EnrollmentListRequest_default_instance_;
class EnrollmentInfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<EnrollmentInfo> _instance;
} _EnrollmentInfo_default_instance_;
class EnrollmentListResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<EnrollmentListResponse> _instance;
} _EnrollmentListResponse_default_instance_;
class EnrollmentDeleteRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<EnrollmentDeleteRequest> _instance;
} _EnrollmentDeleteRequest_default_instance_;
class GalleryInfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GalleryInfo> _instance;
} _GalleryInfo_default_instance_;
class GalleryListDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GalleryList> _instance;
} _GalleryList_default_instance_;
class EmptyDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Empty> _instance;
} _Empty_default_instance_;
static void InitDefaultsscc_info_AccessRecord_faro_2fproto_2fface_5fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_AccessRecord_default_instance_;
    new (ptr) ::AccessRecord();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::AccessRecord::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_AccessRecord_faro_2fproto_2fface_5fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_AccessRecord_faro_2fproto_2fface_5fservice_2eproto}, {
      &scc_info_Attribute_faro_2fproto_2fface_5fservice_2eproto.base,}};

static void InitDefaultsscc_info_Attribute_faro_2fproto_2fface_5fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_Attribute_default_instance_;
    new (ptr) ::Attribute();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Attribute::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<5> scc_info_Attribute_faro_2fproto_2fface_5fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 5, InitDefaultsscc_info_Attribute_faro_2fproto_2fface_5fservice_2eproto}, {
      &scc_info_Matrix_faro_2fproto_2fgeometry_2eproto.base,
      &scc_info_Vector_faro_2fproto_2fgeometry_2eproto.base,
      &scc_info_Image_faro_2fproto_2fimage_2eproto.base,
      &scc_info_Point2D_faro_2fproto_2fgeometry_2eproto.base,
      &scc_info_Rect_faro_2fproto_2fgeometry_2eproto.base,}};

static void InitDefaultsscc_info_DetectExtractEnrollRequest_faro_2fproto_2fface_5fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_DetectExtractEnrollRequest_default_instance_;
    new (ptr) ::DetectExtractEnrollRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::DetectExtractEnrollRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_DetectExtractEnrollRequest_faro_2fproto_2fface_5fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 3, InitDefaultsscc_info_DetectExtractEnrollRequest_faro_2fproto_2fface_5fservice_2eproto}, {
      &scc_info_DetectRequest_faro_2fproto_2fface_5fservice_2eproto.base,
      &scc_info_ExtractRequest_faro_2fproto_2fface_5fservice_2eproto.base,
      &scc_info_EnrollRequest_faro_2fproto_2fface_5fservice_2eproto.base,}};

static void InitDefaultsscc_info_DetectExtractRequest_faro_2fproto_2fface_5fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_DetectExtractRequest_default_instance_;
    new (ptr) ::DetectExtractRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::DetectExtractRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_DetectExtractRequest_faro_2fproto_2fface_5fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsscc_info_DetectExtractRequest_faro_2fproto_2fface_5fservice_2eproto}, {
      &scc_info_DetectRequest_faro_2fproto_2fface_5fservice_2eproto.base,
      &scc_info_ExtractRequest_faro_2fproto_2fface_5fservice_2eproto.base,}};

static void InitDefaultsscc_info_DetectExtractSearchRequest_faro_2fproto_2fface_5fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_DetectExtractSearchRequest_default_instance_;
    new (ptr) ::DetectExtractSearchRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::DetectExtractSearchRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_DetectExtractSearchRequest_faro_2fproto_2fface_5fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 3, InitDefaultsscc_info_DetectExtractSearchRequest_faro_2fproto_2fface_5fservice_2eproto}, {
      &scc_info_DetectRequest_faro_2fproto_2fface_5fservice_2eproto.base,
      &scc_info_ExtractRequest_faro_2fproto_2fface_5fservice_2eproto.base,
      &scc_info_SearchRequest_faro_2fproto_2fface_5fservice_2eproto.base,}};

static void InitDefaultsscc_info_DetectRequest_faro_2fproto_2fface_5fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_DetectRequest_default_instance_;
    new (ptr) ::DetectRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::DetectRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_DetectRequest_faro_2fproto_2fface_5fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsscc_info_DetectRequest_faro_2fproto_2fface_5fservice_2eproto}, {
      &scc_info_Image_faro_2fproto_2fimage_2eproto.base,
      &scc_info_DetectionOptions_faro_2fproto_2fface_5fservice_2eproto.base,}};

static void InitDefaultsscc_info_Detection_faro_2fproto_2fface_5fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_Detection_default_instance_;
    new (ptr) ::Detection();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Detection::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_Detection_faro_2fproto_2fface_5fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsscc_info_Detection_faro_2fproto_2fface_5fservice_2eproto}, {
      &scc_info_Rect_faro_2fproto_2fgeometry_2eproto.base,
      &scc_info_Attribute_faro_2fproto_2fface_5fservice_2eproto.base,}};

static void InitDefaultsscc_info_DetectionList_faro_2fproto_2fface_5fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_DetectionList_default_instance_;
    new (ptr) ::DetectionList();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::DetectionList::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_DetectionList_faro_2fproto_2fface_5fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsscc_info_DetectionList_faro_2fproto_2fface_5fservice_2eproto}, {
      &scc_info_Detection_faro_2fproto_2fface_5fservice_2eproto.base,
      &scc_info_DetectionOptions_faro_2fproto_2fface_5fservice_2eproto.base,}};

static void InitDefaultsscc_info_DetectionOptions_faro_2fproto_2fface_5fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_DetectionOptions_default_instance_;
    new (ptr) ::DetectionOptions();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::DetectionOptions::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_DetectionOptions_faro_2fproto_2fface_5fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_DetectionOptions_faro_2fproto_2fface_5fservice_2eproto}, {
      &scc_info_Attribute_faro_2fproto_2fface_5fservice_2eproto.base,}};

static void InitDefaultsscc_info_Empty_faro_2fproto_2fface_5fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_Empty_default_instance_;
    new (ptr) ::Empty();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Empty::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Empty_faro_2fproto_2fface_5fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_Empty_faro_2fproto_2fface_5fservice_2eproto}, {}};

static void InitDefaultsscc_info_EnrollOptions_faro_2fproto_2fface_5fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_EnrollOptions_default_instance_;
    new (ptr) ::EnrollOptions();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::EnrollOptions::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_EnrollOptions_faro_2fproto_2fface_5fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_EnrollOptions_faro_2fproto_2fface_5fservice_2eproto}, {
      &scc_info_Attribute_faro_2fproto_2fface_5fservice_2eproto.base,}};

static void InitDefaultsscc_info_EnrollRequest_faro_2fproto_2fface_5fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_EnrollRequest_default_instance_;
    new (ptr) ::EnrollRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::EnrollRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_EnrollRequest_faro_2fproto_2fface_5fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsscc_info_EnrollRequest_faro_2fproto_2fface_5fservice_2eproto}, {
      &scc_info_FaceRecord_faro_2fproto_2fface_5fservice_2eproto.base,
      &scc_info_EnrollOptions_faro_2fproto_2fface_5fservice_2eproto.base,}};

static void InitDefaultsscc_info_EnrollmentDeleteRequest_faro_2fproto_2fface_5fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_EnrollmentDeleteRequest_default_instance_;
    new (ptr) ::EnrollmentDeleteRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::EnrollmentDeleteRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_EnrollmentDeleteRequest_faro_2fproto_2fface_5fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_EnrollmentDeleteRequest_faro_2fproto_2fface_5fservice_2eproto}, {}};

static void InitDefaultsscc_info_EnrollmentInfo_faro_2fproto_2fface_5fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_EnrollmentInfo_default_instance_;
    new (ptr) ::EnrollmentInfo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::EnrollmentInfo::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_EnrollmentInfo_faro_2fproto_2fface_5fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_EnrollmentInfo_faro_2fproto_2fface_5fservice_2eproto}, {}};

static void InitDefaultsscc_info_EnrollmentListRequest_faro_2fproto_2fface_5fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_EnrollmentListRequest_default_instance_;
    new (ptr) ::EnrollmentListRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::EnrollmentListRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_EnrollmentListRequest_faro_2fproto_2fface_5fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_EnrollmentListRequest_faro_2fproto_2fface_5fservice_2eproto}, {}};

static void InitDefaultsscc_info_EnrollmentListResponse_faro_2fproto_2fface_5fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_EnrollmentListResponse_default_instance_;
    new (ptr) ::EnrollmentListResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::EnrollmentListResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_EnrollmentListResponse_faro_2fproto_2fface_5fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_EnrollmentListResponse_faro_2fproto_2fface_5fservice_2eproto}, {
      &scc_info_EnrollmentInfo_faro_2fproto_2fface_5fservice_2eproto.base,}};

static void InitDefaultsscc_info_ErrorMessage_faro_2fproto_2fface_5fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_ErrorMessage_default_instance_;
    new (ptr) ::ErrorMessage();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ErrorMessage::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ErrorMessage_faro_2fproto_2fface_5fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_ErrorMessage_faro_2fproto_2fface_5fservice_2eproto}, {}};

static void InitDefaultsscc_info_ExtractOptions_faro_2fproto_2fface_5fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_ExtractOptions_default_instance_;
    new (ptr) ::ExtractOptions();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ExtractOptions::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ExtractOptions_faro_2fproto_2fface_5fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_ExtractOptions_faro_2fproto_2fface_5fservice_2eproto}, {
      &scc_info_Attribute_faro_2fproto_2fface_5fservice_2eproto.base,}};

static void InitDefaultsscc_info_ExtractRequest_faro_2fproto_2fface_5fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_ExtractRequest_default_instance_;
    new (ptr) ::ExtractRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ExtractRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_ExtractRequest_faro_2fproto_2fface_5fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 3, InitDefaultsscc_info_ExtractRequest_faro_2fproto_2fface_5fservice_2eproto}, {
      &scc_info_Image_faro_2fproto_2fimage_2eproto.base,
      &scc_info_FaceRecord_faro_2fproto_2fface_5fservice_2eproto.base,
      &scc_info_ExtractOptions_faro_2fproto_2fface_5fservice_2eproto.base,}};

static void InitDefaultsscc_info_FaceRecord_faro_2fproto_2fface_5fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_FaceRecord_default_instance_;
    new (ptr) ::FaceRecord();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  {
    void* ptr = &::_FaceRecordList_default_instance_;
    new (ptr) ::FaceRecordList();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::FaceRecord::InitAsDefaultInstance();
  ::FaceRecordList::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<6> scc_info_FaceRecord_faro_2fproto_2fface_5fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 6, InitDefaultsscc_info_FaceRecord_faro_2fproto_2fface_5fservice_2eproto}, {
      &scc_info_Attribute_faro_2fproto_2fface_5fservice_2eproto.base,
      &scc_info_AccessRecord_faro_2fproto_2fface_5fservice_2eproto.base,
      &scc_info_Image_faro_2fproto_2fimage_2eproto.base,
      &scc_info_Detection_faro_2fproto_2fface_5fservice_2eproto.base,
      &scc_info_Landmark_faro_2fproto_2fface_5fservice_2eproto.base,
      &scc_info_FaceTemplate_faro_2fproto_2fface_5fservice_2eproto.base,}};

static void InitDefaultsscc_info_FaceServiceInfo_faro_2fproto_2fface_5fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_FaceServiceInfo_default_instance_;
    new (ptr) ::FaceServiceInfo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::FaceServiceInfo::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_FaceServiceInfo_faro_2fproto_2fface_5fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_FaceServiceInfo_faro_2fproto_2fface_5fservice_2eproto}, {}};

static void InitDefaultsscc_info_FaceStatusRequest_faro_2fproto_2fface_5fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_FaceStatusRequest_default_instance_;
    new (ptr) ::FaceStatusRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::FaceStatusRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_FaceStatusRequest_faro_2fproto_2fface_5fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_FaceStatusRequest_faro_2fproto_2fface_5fservice_2eproto}, {}};

static void InitDefaultsscc_info_FaceTemplate_faro_2fproto_2fface_5fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_FaceTemplate_default_instance_;
    new (ptr) ::FaceTemplate();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::FaceTemplate::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_FaceTemplate_faro_2fproto_2fface_5fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_FaceTemplate_faro_2fproto_2fface_5fservice_2eproto}, {
      &scc_info_Vector_faro_2fproto_2fgeometry_2eproto.base,}};

static void InitDefaultsscc_info_GalleryDeleteRequest_faro_2fproto_2fface_5fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_GalleryDeleteRequest_default_instance_;
    new (ptr) ::GalleryDeleteRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::GalleryDeleteRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GalleryDeleteRequest_faro_2fproto_2fface_5fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_GalleryDeleteRequest_faro_2fproto_2fface_5fservice_2eproto}, {}};

static void InitDefaultsscc_info_GalleryInfo_faro_2fproto_2fface_5fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_GalleryInfo_default_instance_;
    new (ptr) ::GalleryInfo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::GalleryInfo::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GalleryInfo_faro_2fproto_2fface_5fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_GalleryInfo_faro_2fproto_2fface_5fservice_2eproto}, {}};

static void InitDefaultsscc_info_GalleryList_faro_2fproto_2fface_5fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_GalleryList_default_instance_;
    new (ptr) ::GalleryList();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::GalleryList::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_GalleryList_faro_2fproto_2fface_5fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_GalleryList_faro_2fproto_2fface_5fservice_2eproto}, {
      &scc_info_GalleryInfo_faro_2fproto_2fface_5fservice_2eproto.base,}};

static void InitDefaultsscc_info_GalleryListRequest_faro_2fproto_2fface_5fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_GalleryListRequest_default_instance_;
    new (ptr) ::GalleryListRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::GalleryListRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GalleryListRequest_faro_2fproto_2fface_5fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_GalleryListRequest_faro_2fproto_2fface_5fservice_2eproto}, {}};

static void InitDefaultsscc_info_Landmark_faro_2fproto_2fface_5fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_Landmark_default_instance_;
    new (ptr) ::Landmark();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Landmark::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Landmark_faro_2fproto_2fface_5fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_Landmark_faro_2fproto_2fface_5fservice_2eproto}, {
      &scc_info_Point2D_faro_2fproto_2fgeometry_2eproto.base,}};

static void InitDefaultsscc_info_MatchInfo_faro_2fproto_2fface_5fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_MatchInfo_default_instance_;
    new (ptr) ::MatchInfo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::MatchInfo::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_MatchInfo_faro_2fproto_2fface_5fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_MatchInfo_faro_2fproto_2fface_5fservice_2eproto}, {
      &scc_info_Image_faro_2fproto_2fimage_2eproto.base,}};

static void InitDefaultsscc_info_MatchList_faro_2fproto_2fface_5fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_MatchList_default_instance_;
    new (ptr) ::MatchList();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::MatchList::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_MatchList_faro_2fproto_2fface_5fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_MatchList_faro_2fproto_2fface_5fservice_2eproto}, {
      &scc_info_MatchInfo_faro_2fproto_2fface_5fservice_2eproto.base,}};

static void InitDefaultsscc_info_ScoreRequest_faro_2fproto_2fface_5fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_ScoreRequest_default_instance_;
    new (ptr) ::ScoreRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ScoreRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_ScoreRequest_faro_2fproto_2fface_5fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsscc_info_ScoreRequest_faro_2fproto_2fface_5fservice_2eproto}, {
      &scc_info_FaceRecord_faro_2fproto_2fface_5fservice_2eproto.base,
      &scc_info_TemplateList_faro_2fproto_2fface_5fservice_2eproto.base,}};

static void InitDefaultsscc_info_SearchRequest_faro_2fproto_2fface_5fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_SearchRequest_default_instance_;
    new (ptr) ::SearchRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::SearchRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SearchRequest_faro_2fproto_2fface_5fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_SearchRequest_faro_2fproto_2fface_5fservice_2eproto}, {
      &scc_info_FaceRecord_faro_2fproto_2fface_5fservice_2eproto.base,}};

static void InitDefaultsscc_info_SearchResponse_faro_2fproto_2fface_5fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_SearchResponse_default_instance_;
    new (ptr) ::SearchResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::SearchResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_SearchResponse_faro_2fproto_2fface_5fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsscc_info_SearchResponse_faro_2fproto_2fface_5fservice_2eproto}, {
      &scc_info_ErrorMessage_faro_2fproto_2fface_5fservice_2eproto.base,
      &scc_info_FaceRecord_faro_2fproto_2fface_5fservice_2eproto.base,}};

static void InitDefaultsscc_info_TemplateInput_faro_2fproto_2fface_5fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_TemplateInput_default_instance_;
    new (ptr) ::TemplateInput();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::TemplateInput::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_TemplateInput_faro_2fproto_2fface_5fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsscc_info_TemplateInput_faro_2fproto_2fface_5fservice_2eproto}, {
      &scc_info_Image_faro_2fproto_2fimage_2eproto.base,
      &scc_info_Rect_faro_2fproto_2fgeometry_2eproto.base,}};

static void InitDefaultsscc_info_TemplateList_faro_2fproto_2fface_5fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_TemplateList_default_instance_;
    new (ptr) ::TemplateList();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::TemplateList::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_TemplateList_faro_2fproto_2fface_5fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_TemplateList_faro_2fproto_2fface_5fservice_2eproto}, {
      &scc_info_FaceTemplate_faro_2fproto_2fface_5fservice_2eproto.base,}};

static void InitDefaultsscc_info_VerificationRequest_faro_2fproto_2fface_5fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_VerificationRequest_default_instance_;
    new (ptr) ::VerificationRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::VerificationRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_VerificationRequest_faro_2fproto_2fface_5fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_VerificationRequest_faro_2fproto_2fface_5fservice_2eproto}, {
      &scc_info_FaceRecord_faro_2fproto_2fface_5fservice_2eproto.base,}};

static void InitDefaultsscc_info_VerificationResponse_faro_2fproto_2fface_5fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_VerificationResponse_default_instance_;
    new (ptr) ::VerificationResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::VerificationResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_VerificationResponse_faro_2fproto_2fface_5fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_VerificationResponse_faro_2fproto_2fface_5fservice_2eproto}, {
      &scc_info_FaceRecord_faro_2fproto_2fface_5fservice_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_faro_2fproto_2fface_5fservice_2eproto[38];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_faro_2fproto_2fface_5fservice_2eproto[3];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_faro_2fproto_2fface_5fservice_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_faro_2fproto_2fface_5fservice_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Attribute, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Attribute, key_),
  PROTOBUF_FIELD_OFFSET(::Attribute, description_),
  PROTOBUF_FIELD_OFFSET(::Attribute, buffer_),
  PROTOBUF_FIELD_OFFSET(::Attribute, fvalue_),
  PROTOBUF_FIELD_OFFSET(::Attribute, ivalue_),
  PROTOBUF_FIELD_OFFSET(::Attribute, text_),
  PROTOBUF_FIELD_OFFSET(::Attribute, pickle_),
  PROTOBUF_FIELD_OFFSET(::Attribute, json_),
  PROTOBUF_FIELD_OFFSET(::Attribute, matrix_),
  PROTOBUF_FIELD_OFFSET(::Attribute, vector_),
  PROTOBUF_FIELD_OFFSET(::Attribute, image_),
  PROTOBUF_FIELD_OFFSET(::Attribute, point_),
  PROTOBUF_FIELD_OFFSET(::Attribute, rect_),
  PROTOBUF_FIELD_OFFSET(::Attribute, xml_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ErrorMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ErrorMessage, error_code_),
  PROTOBUF_FIELD_OFFSET(::ErrorMessage, error_message_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Detection, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Detection, score_),
  PROTOBUF_FIELD_OFFSET(::Detection, location_),
  PROTOBUF_FIELD_OFFSET(::Detection, detection_id_),
  PROTOBUF_FIELD_OFFSET(::Detection, detection_class_),
  PROTOBUF_FIELD_OFFSET(::Detection, attributes_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Landmark, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Landmark, landmark_id_),
  PROTOBUF_FIELD_OFFSET(::Landmark, location_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::DetectionOptions, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::DetectionOptions, algorithm_id_),
  PROTOBUF_FIELD_OFFSET(::DetectionOptions, best_),
  PROTOBUF_FIELD_OFFSET(::DetectionOptions, threshold_),
  PROTOBUF_FIELD_OFFSET(::DetectionOptions, scale_levels_),
  PROTOBUF_FIELD_OFFSET(::DetectionOptions, scan_levels_),
  PROTOBUF_FIELD_OFFSET(::DetectionOptions, scan_overlap_),
  PROTOBUF_FIELD_OFFSET(::DetectionOptions, min_size_),
  PROTOBUF_FIELD_OFFSET(::DetectionOptions, attributes_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ExtractOptions, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ExtractOptions, algorithm_id_),
  PROTOBUF_FIELD_OFFSET(::ExtractOptions, attributes_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::EnrollOptions, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::EnrollOptions, attributes_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::DetectionList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::DetectionList, detections_),
  PROTOBUF_FIELD_OFFSET(::DetectionList, detection_time_),
  PROTOBUF_FIELD_OFFSET(::DetectionList, image_width_),
  PROTOBUF_FIELD_OFFSET(::DetectionList, image_height_),
  PROTOBUF_FIELD_OFFSET(::DetectionList, detection_count_),
  PROTOBUF_FIELD_OFFSET(::DetectionList, options_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::MatchList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::MatchList, match_list_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::MatchInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::MatchInfo, score_),
  PROTOBUF_FIELD_OFFSET(::MatchInfo, image_id_),
  PROTOBUF_FIELD_OFFSET(::MatchInfo, detection_id_),
  PROTOBUF_FIELD_OFFSET(::MatchInfo, subject_id_),
  PROTOBUF_FIELD_OFFSET(::MatchInfo, subject_name_),
  PROTOBUF_FIELD_OFFSET(::MatchInfo, face_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::TemplateInput, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TemplateInput, im_),
  PROTOBUF_FIELD_OFFSET(::TemplateInput, detections_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::FaceTemplate, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::FaceTemplate, data_),
  PROTOBUF_FIELD_OFFSET(::FaceTemplate, buffer_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::TemplateList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TemplateList, templates_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::AccessRecord, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::AccessRecord, datetime_),
  PROTOBUF_FIELD_OFFSET(::AccessRecord, notes_),
  PROTOBUF_FIELD_OFFSET(::AccessRecord, credential_),
  PROTOBUF_FIELD_OFFSET(::AccessRecord, metadata_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::FaceRecord, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::FaceRecord, subject_id_),
  PROTOBUF_FIELD_OFFSET(::FaceRecord, name_),
  PROTOBUF_FIELD_OFFSET(::FaceRecord, source_),
  PROTOBUF_FIELD_OFFSET(::FaceRecord, frame_),
  PROTOBUF_FIELD_OFFSET(::FaceRecord, notes_),
  PROTOBUF_FIELD_OFFSET(::FaceRecord, gallery_key_),
  PROTOBUF_FIELD_OFFSET(::FaceRecord, collection_date_),
  PROTOBUF_FIELD_OFFSET(::FaceRecord, enrollment_date_),
  PROTOBUF_FIELD_OFFSET(::FaceRecord, metadata_),
  PROTOBUF_FIELD_OFFSET(::FaceRecord, access_records_),
  PROTOBUF_FIELD_OFFSET(::FaceRecord, view_),
  PROTOBUF_FIELD_OFFSET(::FaceRecord, aligned_),
  PROTOBUF_FIELD_OFFSET(::FaceRecord, detection_),
  PROTOBUF_FIELD_OFFSET(::FaceRecord, landmarks_),
  PROTOBUF_FIELD_OFFSET(::FaceRecord, attributes_),
  PROTOBUF_FIELD_OFFSET(::FaceRecord, internal_data_),
  PROTOBUF_FIELD_OFFSET(::FaceRecord, template__),
  PROTOBUF_FIELD_OFFSET(::FaceRecord, score_),
  PROTOBUF_FIELD_OFFSET(::FaceRecord, search_results_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::FaceRecordList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::FaceRecordList, face_records_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::VerificationRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::VerificationRequest, gallery_),
  PROTOBUF_FIELD_OFFSET(::VerificationRequest, subject_id_),
  PROTOBUF_FIELD_OFFSET(::VerificationRequest, face_record_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::VerificationResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::VerificationResponse, error_code_),
  PROTOBUF_FIELD_OFFSET(::VerificationResponse, error_message_),
  PROTOBUF_FIELD_OFFSET(::VerificationResponse, success_),
  PROTOBUF_FIELD_OFFSET(::VerificationResponse, confidence_),
  PROTOBUF_FIELD_OFFSET(::VerificationResponse, matches_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::SearchRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::SearchRequest, search_gallery_),
  PROTOBUF_FIELD_OFFSET(::SearchRequest, probes_),
  PROTOBUF_FIELD_OFFSET(::SearchRequest, max_results_),
  PROTOBUF_FIELD_OFFSET(::SearchRequest, threshold_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::SearchResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::SearchResponse, message_),
  PROTOBUF_FIELD_OFFSET(::SearchResponse, probes_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::EnrollRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::EnrollRequest, enroll_gallery_),
  PROTOBUF_FIELD_OFFSET(::EnrollRequest, records_),
  PROTOBUF_FIELD_OFFSET(::EnrollRequest, enroll_options_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::DetectRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::DetectRequest, image_),
  PROTOBUF_FIELD_OFFSET(::DetectRequest, source_),
  PROTOBUF_FIELD_OFFSET(::DetectRequest, frame_),
  PROTOBUF_FIELD_OFFSET(::DetectRequest, subject_id_),
  PROTOBUF_FIELD_OFFSET(::DetectRequest, subject_name_),
  PROTOBUF_FIELD_OFFSET(::DetectRequest, detect_options_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ExtractRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ExtractRequest, image_),
  PROTOBUF_FIELD_OFFSET(::ExtractRequest, records_),
  PROTOBUF_FIELD_OFFSET(::ExtractRequest, extract_options_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ScoreRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ScoreRequest, face_probes_),
  PROTOBUF_FIELD_OFFSET(::ScoreRequest, face_gallery_),
  PROTOBUF_FIELD_OFFSET(::ScoreRequest, template_probes_),
  PROTOBUF_FIELD_OFFSET(::ScoreRequest, template_gallery_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::DetectExtractRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::DetectExtractRequest, detect_request_),
  PROTOBUF_FIELD_OFFSET(::DetectExtractRequest, extract_request_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::DetectExtractEnrollRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::DetectExtractEnrollRequest, detect_request_),
  PROTOBUF_FIELD_OFFSET(::DetectExtractEnrollRequest, extract_request_),
  PROTOBUF_FIELD_OFFSET(::DetectExtractEnrollRequest, enroll_request_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::DetectExtractSearchRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::DetectExtractSearchRequest, detect_request_),
  PROTOBUF_FIELD_OFFSET(::DetectExtractSearchRequest, extract_request_),
  PROTOBUF_FIELD_OFFSET(::DetectExtractSearchRequest, search_request_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::FaceStatusRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::FaceServiceInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::FaceServiceInfo, status_),
  PROTOBUF_FIELD_OFFSET(::FaceServiceInfo, worker_count_),
  PROTOBUF_FIELD_OFFSET(::FaceServiceInfo, detection_support_),
  PROTOBUF_FIELD_OFFSET(::FaceServiceInfo, extract_support_),
  PROTOBUF_FIELD_OFFSET(::FaceServiceInfo, score_support_),
  PROTOBUF_FIELD_OFFSET(::FaceServiceInfo, attribute_support_),
  PROTOBUF_FIELD_OFFSET(::FaceServiceInfo, score_type_),
  PROTOBUF_FIELD_OFFSET(::FaceServiceInfo, detection_threshold_),
  PROTOBUF_FIELD_OFFSET(::FaceServiceInfo, match_threshold_),
  PROTOBUF_FIELD_OFFSET(::FaceServiceInfo, algorithm_),
  PROTOBUF_FIELD_OFFSET(::FaceServiceInfo, notes_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::GalleryListRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::GalleryDeleteRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::GalleryDeleteRequest, gallery_name_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::EnrollmentListRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::EnrollmentListRequest, gallery_name_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::EnrollmentInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::EnrollmentInfo, subject_id_),
  PROTOBUF_FIELD_OFFSET(::EnrollmentInfo, name_),
  PROTOBUF_FIELD_OFFSET(::EnrollmentInfo, face_count_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::EnrollmentListResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::EnrollmentListResponse, gallery_name_),
  PROTOBUF_FIELD_OFFSET(::EnrollmentListResponse, enrollments_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::EnrollmentDeleteRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::EnrollmentDeleteRequest, gallery_name_),
  PROTOBUF_FIELD_OFFSET(::EnrollmentDeleteRequest, subject_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::GalleryInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::GalleryInfo, gallery_name_),
  PROTOBUF_FIELD_OFFSET(::GalleryInfo, face_count_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::GalleryList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::GalleryList, galleries_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Empty, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::Attribute)},
  { 19, -1, sizeof(::ErrorMessage)},
  { 26, -1, sizeof(::Detection)},
  { 36, -1, sizeof(::Landmark)},
  { 43, -1, sizeof(::DetectionOptions)},
  { 56, -1, sizeof(::ExtractOptions)},
  { 63, -1, sizeof(::EnrollOptions)},
  { 69, -1, sizeof(::DetectionList)},
  { 80, -1, sizeof(::MatchList)},
  { 86, -1, sizeof(::MatchInfo)},
  { 97, -1, sizeof(::TemplateInput)},
  { 104, -1, sizeof(::FaceTemplate)},
  { 111, -1, sizeof(::TemplateList)},
  { 117, -1, sizeof(::AccessRecord)},
  { 126, -1, sizeof(::FaceRecord)},
  { 150, -1, sizeof(::FaceRecordList)},
  { 156, -1, sizeof(::VerificationRequest)},
  { 164, -1, sizeof(::VerificationResponse)},
  { 174, -1, sizeof(::SearchRequest)},
  { 183, -1, sizeof(::SearchResponse)},
  { 190, -1, sizeof(::EnrollRequest)},
  { 198, -1, sizeof(::DetectRequest)},
  { 209, -1, sizeof(::ExtractRequest)},
  { 217, -1, sizeof(::ScoreRequest)},
  { 226, -1, sizeof(::DetectExtractRequest)},
  { 233, -1, sizeof(::DetectExtractEnrollRequest)},
  { 241, -1, sizeof(::DetectExtractSearchRequest)},
  { 249, -1, sizeof(::FaceStatusRequest)},
  { 254, -1, sizeof(::FaceServiceInfo)},
  { 270, -1, sizeof(::GalleryListRequest)},
  { 275, -1, sizeof(::GalleryDeleteRequest)},
  { 281, -1, sizeof(::EnrollmentListRequest)},
  { 287, -1, sizeof(::EnrollmentInfo)},
  { 295, -1, sizeof(::EnrollmentListResponse)},
  { 302, -1, sizeof(::EnrollmentDeleteRequest)},
  { 309, -1, sizeof(::GalleryInfo)},
  { 316, -1, sizeof(::GalleryList)},
  { 322, -1, sizeof(::Empty)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_Attribute_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_ErrorMessage_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_Detection_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_Landmark_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_DetectionOptions_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_ExtractOptions_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_EnrollOptions_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_DetectionList_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_MatchList_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_MatchInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_TemplateInput_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_FaceTemplate_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_TemplateList_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_AccessRecord_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_FaceRecord_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_FaceRecordList_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_VerificationRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_VerificationResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_SearchRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_SearchResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_EnrollRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_DetectRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_ExtractRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_ScoreRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_DetectExtractRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_DetectExtractEnrollRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_DetectExtractSearchRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_FaceStatusRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_FaceServiceInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_GalleryListRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_GalleryDeleteRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_EnrollmentListRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_EnrollmentInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_EnrollmentListResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_EnrollmentDeleteRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_GalleryInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_GalleryList_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_Empty_default_instance_),
};

const char descriptor_table_protodef_faro_2fproto_2fface_5fservice_2eproto[] =
  "\n\035faro/proto/face_service.proto\032\026faro/pr"
  "oto/image.proto\032\031faro/proto/geometry.pro"
  "to\"\215\002\n\tAttribute\022\013\n\003key\030\001 \001(\t\022\023\n\013descrip"
  "tion\030\002 \001(\t\022\016\n\006buffer\030\003 \001(\014\022\016\n\006fvalue\030\004 \001"
  "(\002\022\016\n\006ivalue\030\005 \001(\005\022\014\n\004text\030\006 \001(\t\022\016\n\006pick"
  "le\030\007 \001(\014\022\014\n\004json\030\010 \001(\014\022\027\n\006matrix\030\t \001(\0132\007"
  ".Matrix\022\027\n\006vector\030\n \001(\0132\007.Vector\022\025\n\005imag"
  "e\030\013 \001(\0132\006.Image\022\027\n\005point\030\014 \001(\0132\010.Point2D"
  "\022\023\n\004rect\030\r \001(\0132\005.Rect\022\013\n\003xml\030\016 \001(\014\"9\n\014Er"
  "rorMessage\022\022\n\nerror_code\030\003 \001(\005\022\025\n\rerror_"
  "message\030\004 \001(\t\"\202\001\n\tDetection\022\r\n\005score\030\001 \001"
  "(\002\022\027\n\010location\030\002 \001(\0132\005.Rect\022\024\n\014detection"
  "_id\030\003 \001(\005\022\027\n\017detection_class\030\004 \001(\t\022\036\n\nat"
  "tributes\030\005 \003(\0132\n.Attribute\";\n\010Landmark\022\023"
  "\n\013landmark_id\030\001 \001(\t\022\032\n\010location\030\002 \001(\0132\010."
  "Point2D\"\274\001\n\020DetectionOptions\022\024\n\014algorith"
  "m_id\030\001 \001(\t\022\014\n\004best\030\002 \001(\010\022\021\n\tthreshold\030\003 "
  "\001(\002\022\024\n\014scale_levels\030\004 \001(\005\022\023\n\013scan_levels"
  "\030\005 \001(\005\022\024\n\014scan_overlap\030\006 \001(\002\022\020\n\010min_size"
  "\030\007 \001(\005\022\036\n\nattributes\030\010 \003(\0132\n.Attribute\"F"
  "\n\016ExtractOptions\022\024\n\014algorithm_id\030\001 \001(\t\022\036"
  "\n\nattributes\030\010 \003(\0132\n.Attribute\"/\n\rEnroll"
  "Options\022\036\n\nattributes\030\010 \003(\0132\n.Attribute\""
  "\257\001\n\rDetectionList\022\036\n\ndetections\030\001 \003(\0132\n."
  "Detection\022\026\n\016detection_time\030\002 \001(\002\022\023\n\013ima"
  "ge_width\030\003 \001(\005\022\024\n\014image_height\030\004 \001(\005\022\027\n\017"
  "detection_count\030\005 \001(\005\022\"\n\007options\030\006 \001(\0132\021"
  ".DetectionOptions\"+\n\tMatchList\022\036\n\nmatch_"
  "list\030\001 \003(\0132\n.MatchInfo\"\202\001\n\tMatchInfo\022\r\n\005"
  "score\030\001 \001(\002\022\020\n\010image_id\030\002 \001(\t\022\024\n\014detecti"
  "on_id\030\003 \001(\t\022\022\n\nsubject_id\030\004 \001(\t\022\024\n\014subje"
  "ct_name\030\005 \001(\t\022\024\n\004face\030\006 \001(\0132\006.Image\">\n\rT"
  "emplateInput\022\022\n\002im\030\001 \001(\0132\006.Image\022\031\n\ndete"
  "ctions\030\002 \003(\0132\005.Rect\"5\n\014FaceTemplate\022\025\n\004d"
  "ata\030\001 \001(\0132\007.Vector\022\016\n\006buffer\030\002 \001(\014\"0\n\014Te"
  "mplateList\022 \n\ttemplates\030\001 \003(\0132\r.FaceTemp"
  "late\"a\n\014AccessRecord\022\020\n\010datetime\030\001 \001(\002\022\r"
  "\n\005notes\030\002 \001(\t\022\022\n\ncredential\030\003 \001(\t\022\034\n\010met"
  "adata\030\004 \003(\0132\n.Attribute\"\360\003\n\nFaceRecord\022\022"
  "\n\nsubject_id\030\001 \001(\t\022\014\n\004name\030\005 \001(\t\022\016\n\006sour"
  "ce\030\004 \001(\t\022\r\n\005frame\030\016 \001(\003\022\r\n\005notes\030\006 \001(\t\022\023"
  "\n\013gallery_key\030\017 \001(\t\022\027\n\017collection_date\030\020"
  " \001(\002\022\027\n\017enrollment_date\030\021 \001(\002\022\034\n\010metadat"
  "a\030\022 \003(\0132\n.Attribute\022%\n\016access_records\030\023 "
  "\003(\0132\r.AccessRecord\022\024\n\004view\030\007 \001(\0132\006.Image"
  "\022\027\n\007aligned\030\t \001(\0132\006.Image\022\035\n\tdetection\030\002"
  " \001(\0132\n.Detection\022\034\n\tlandmarks\030\010 \003(\0132\t.La"
  "ndmark\022\036\n\nattributes\030\n \003(\0132\n.Attribute\022!"
  "\n\rinternal_data\030\013 \003(\0132\n.Attribute\022\037\n\010tem"
  "plate\030\003 \001(\0132\r.FaceTemplate\022\r\n\005score\030\014 \001("
  "\002\022\'\n\016search_results\030\r \001(\0132\017.FaceRecordLi"
  "st\"3\n\016FaceRecordList\022!\n\014face_records\030\001 \003"
  "(\0132\013.FaceRecord\"\\\n\023VerificationRequest\022\017"
  "\n\007gallery\030\001 \001(\t\022\022\n\nsubject_id\030\002 \001(\t\022 \n\013f"
  "ace_record\030\003 \003(\0132\013.FaceRecord\"\204\001\n\024Verifi"
  "cationResponse\022\022\n\nerror_code\030\004 \001(\005\022\025\n\rer"
  "ror_message\030\005 \001(\t\022\017\n\007success\030\001 \001(\010\022\022\n\nco"
  "nfidence\030\002 \001(\002\022\034\n\007matches\030\003 \003(\0132\013.FaceRe"
  "cord\"p\n\rSearchRequest\022\026\n\016search_gallery\030"
  "\001 \001(\t\022\037\n\006probes\030\003 \001(\0132\017.FaceRecordList\022\023"
  "\n\013max_results\030\004 \001(\005\022\021\n\tthreshold\030\005 \001(\002\"Q"
  "\n\016SearchResponse\022\036\n\007message\030\001 \001(\0132\r.Erro"
  "rMessage\022\037\n\006probes\030\002 \001(\0132\017.FaceRecordLis"
  "t\"q\n\rEnrollRequest\022\026\n\016enroll_gallery\030\001 \001"
  "(\t\022 \n\007records\030\002 \001(\0132\017.FaceRecordList\022&\n\016"
  "enroll_options\030\n \001(\0132\016.EnrollOptions\"\232\001\n"
  "\rDetectRequest\022\025\n\005image\030\001 \001(\0132\006.Image\022\016\n"
  "\006source\030\002 \001(\t\022\r\n\005frame\030\003 \001(\003\022\022\n\nsubject_"
  "id\030\004 \001(\t\022\024\n\014subject_name\030\005 \001(\t\022)\n\016detect"
  "_options\030\010 \001(\0132\021.DetectionOptions\"s\n\016Ext"
  "ractRequest\022\025\n\005image\030\001 \001(\0132\006.Image\022 \n\007re"
  "cords\030\004 \001(\0132\017.FaceRecordList\022(\n\017extract_"
  "options\030\t \001(\0132\017.ExtractOptions\"\254\001\n\014Score"
  "Request\022$\n\013face_probes\030\001 \001(\0132\017.FaceRecor"
  "dList\022%\n\014face_gallery\030\002 \001(\0132\017.FaceRecord"
  "List\022&\n\017template_probes\030\003 \001(\0132\r.Template"
  "List\022\'\n\020template_gallery\030\004 \001(\0132\r.Templat"
  "eList\"h\n\024DetectExtractRequest\022&\n\016detect_"
  "request\030\001 \001(\0132\016.DetectRequest\022(\n\017extract"
  "_request\030\002 \001(\0132\017.ExtractRequest\"\226\001\n\032Dete"
  "ctExtractEnrollRequest\022&\n\016detect_request"
  "\030\001 \001(\0132\016.DetectRequest\022(\n\017extract_reques"
  "t\030\002 \001(\0132\017.ExtractRequest\022&\n\016enroll_reque"
  "st\030\003 \001(\0132\016.EnrollRequest\"\226\001\n\032DetectExtra"
  "ctSearchRequest\022&\n\016detect_request\030\001 \001(\0132"
  "\016.DetectRequest\022(\n\017extract_request\030\002 \001(\013"
  "2\017.ExtractRequest\022&\n\016search_request\030\003 \001("
  "\0132\016.SearchRequest\"\023\n\021FaceStatusRequest\"\245"
  "\002\n\017FaceServiceInfo\022\036\n\006status\030\001 \001(\0162\016.Ser"
  "viceStatus\022\024\n\014worker_count\030\002 \001(\005\022\031\n\021dete"
  "ction_support\030\003 \001(\010\022\027\n\017extract_support\030\004"
  " \001(\010\022\025\n\rscore_support\030\005 \001(\010\022\031\n\021attribute"
  "_support\030\006 \001(\010\022\036\n\nscore_type\030\007 \001(\0162\n.Sco"
  "reType\022\033\n\023detection_threshold\030\010 \001(\002\022\027\n\017m"
  "atch_threshold\030\t \001(\002\022\021\n\talgorithm\030\n \001(\t\022"
  "\r\n\005notes\030\013 \001(\t\"\024\n\022GalleryListRequest\",\n\024"
  "GalleryDeleteRequest\022\024\n\014gallery_name\030\001 \001"
  "(\t\"-\n\025EnrollmentListRequest\022\024\n\014gallery_n"
  "ame\030\001 \001(\t\"F\n\016EnrollmentInfo\022\022\n\nsubject_i"
  "d\030\001 \001(\t\022\014\n\004name\030\002 \001(\t\022\022\n\nface_count\030\003 \001("
  "\005\"T\n\026EnrollmentListResponse\022\024\n\014gallery_n"
  "ame\030\001 \001(\t\022$\n\013enrollments\030\002 \003(\0132\017.Enrollm"
  "entInfo\"C\n\027EnrollmentDeleteRequest\022\024\n\014ga"
  "llery_name\030\001 \001(\t\022\022\n\nsubject_id\030\002 \001(\t\"7\n\013"
  "GalleryInfo\022\024\n\014gallery_name\030\001 \001(\t\022\022\n\nfac"
  "e_count\030\002 \001(\003\".\n\013GalleryList\022\037\n\tgallerie"
  "s\030\001 \003(\0132\014.GalleryInfo\"\007\n\005Empty*<\n\rServic"
  "eStatus\022\013\n\007UNKNOWN\020\000\022\t\n\005READY\020\001\022\t\n\005ERROR"
  "\020\002\022\010\n\004BUSY\020\003*k\n\010DataType\022\t\n\005EMPTY\020\000\022\n\n\006S"
  "TRING\020\001\022\007\n\003INT\020\002\022\t\n\005FLOAT\020\003\022\t\n\005BYTES\020\004\022\n"
  "\n\006VECTOR\020\005\022\n\n\006PICKLE\020\006\022\007\n\003XML\020\007\022\010\n\004JSON\020"
  "\010*4\n\tScoreType\022\n\n\006SERVER\020\000\022\006\n\002L1\020\001\022\006\n\002L2"
  "\020\002\022\013\n\007NEG_DOT\020\0032\364\006\n\017FaceRecognition\0220\n\006s"
  "tatus\022\022.FaceStatusRequest\032\020.FaceServiceI"
  "nfo\"\000\022+\n\006detect\022\016.DetectRequest\032\017.FaceRe"
  "cordList\"\000\022-\n\007extract\022\017.ExtractRequest\032\017"
  ".FaceRecordList\"\000\022!\n\005score\022\r.ScoreReques"
  "t\032\007.Matrix\"\000\022+\n\006enroll\022\016.EnrollRequest\032\017"
  ".FaceRecordList\"\000\022+\n\006search\022\016.SearchRequ"
  "est\032\017.FaceRecordList\"\000\0229\n\rdetectExtract\022"
  "\025.DetectExtractRequest\032\017.FaceRecordList\""
  "\000\022E\n\023detectExtractEnroll\022\033.DetectExtract"
  "EnrollRequest\032\017.FaceRecordList\"\000\022E\n\023dete"
  "ctExtractSearch\022\033.DetectExtractSearchReq"
  "uest\032\017.FaceRecordList\"\000\0222\n\013galleryList\022\023"
  ".GalleryListRequest\032\014.GalleryList\"\000\0220\n\rg"
  "alleryDelete\022\025.GalleryDeleteRequest\032\006.Em"
  "pty\"\000\022;\n\016enrollmentList\022\026.EnrollmentList"
  "Request\032\017.FaceRecordList\"\000\022\?\n\020enrollment"
  "Delete\022\030.EnrollmentDeleteRequest\032\017.FaceR"
  "ecordList\"\000\022J\n\033enrollmentDeleteCondition"
  "al\022\030.EnrollmentDeleteRequest\032\017.FaceRecor"
  "dList\"\000\022A\n\022enrollmentTransfer\022\030.Enrollme"
  "ntDeleteRequest\032\017.FaceRecordList\"\000\022\032\n\004ec"
  "ho\022\007.Matrix\032\007.Matrix\"\000b\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_faro_2fproto_2fface_5fservice_2eproto_deps[2] = {
  &::descriptor_table_faro_2fproto_2fgeometry_2eproto,
  &::descriptor_table_faro_2fproto_2fimage_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_faro_2fproto_2fface_5fservice_2eproto_sccs[37] = {
  &scc_info_AccessRecord_faro_2fproto_2fface_5fservice_2eproto.base,
  &scc_info_Attribute_faro_2fproto_2fface_5fservice_2eproto.base,
  &scc_info_DetectExtractEnrollRequest_faro_2fproto_2fface_5fservice_2eproto.base,
  &scc_info_DetectExtractRequest_faro_2fproto_2fface_5fservice_2eproto.base,
  &scc_info_DetectExtractSearchRequest_faro_2fproto_2fface_5fservice_2eproto.base,
  &scc_info_DetectRequest_faro_2fproto_2fface_5fservice_2eproto.base,
  &scc_info_Detection_faro_2fproto_2fface_5fservice_2eproto.base,
  &scc_info_DetectionList_faro_2fproto_2fface_5fservice_2eproto.base,
  &scc_info_DetectionOptions_faro_2fproto_2fface_5fservice_2eproto.base,
  &scc_info_Empty_faro_2fproto_2fface_5fservice_2eproto.base,
  &scc_info_EnrollOptions_faro_2fproto_2fface_5fservice_2eproto.base,
  &scc_info_EnrollRequest_faro_2fproto_2fface_5fservice_2eproto.base,
  &scc_info_EnrollmentDeleteRequest_faro_2fproto_2fface_5fservice_2eproto.base,
  &scc_info_EnrollmentInfo_faro_2fproto_2fface_5fservice_2eproto.base,
  &scc_info_EnrollmentListRequest_faro_2fproto_2fface_5fservice_2eproto.base,
  &scc_info_EnrollmentListResponse_faro_2fproto_2fface_5fservice_2eproto.base,
  &scc_info_ErrorMessage_faro_2fproto_2fface_5fservice_2eproto.base,
  &scc_info_ExtractOptions_faro_2fproto_2fface_5fservice_2eproto.base,
  &scc_info_ExtractRequest_faro_2fproto_2fface_5fservice_2eproto.base,
  &scc_info_FaceRecord_faro_2fproto_2fface_5fservice_2eproto.base,
  &scc_info_FaceServiceInfo_faro_2fproto_2fface_5fservice_2eproto.base,
  &scc_info_FaceStatusRequest_faro_2fproto_2fface_5fservice_2eproto.base,
  &scc_info_FaceTemplate_faro_2fproto_2fface_5fservice_2eproto.base,
  &scc_info_GalleryDeleteRequest_faro_2fproto_2fface_5fservice_2eproto.base,
  &scc_info_GalleryInfo_faro_2fproto_2fface_5fservice_2eproto.base,
  &scc_info_GalleryList_faro_2fproto_2fface_5fservice_2eproto.base,
  &scc_info_GalleryListRequest_faro_2fproto_2fface_5fservice_2eproto.base,
  &scc_info_Landmark_faro_2fproto_2fface_5fservice_2eproto.base,
  &scc_info_MatchInfo_faro_2fproto_2fface_5fservice_2eproto.base,
  &scc_info_MatchList_faro_2fproto_2fface_5fservice_2eproto.base,
  &scc_info_ScoreRequest_faro_2fproto_2fface_5fservice_2eproto.base,
  &scc_info_SearchRequest_faro_2fproto_2fface_5fservice_2eproto.base,
  &scc_info_SearchResponse_faro_2fproto_2fface_5fservice_2eproto.base,
  &scc_info_TemplateInput_faro_2fproto_2fface_5fservice_2eproto.base,
  &scc_info_TemplateList_faro_2fproto_2fface_5fservice_2eproto.base,
  &scc_info_VerificationRequest_faro_2fproto_2fface_5fservice_2eproto.base,
  &scc_info_VerificationResponse_faro_2fproto_2fface_5fservice_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_faro_2fproto_2fface_5fservice_2eproto_once;
static bool descriptor_table_faro_2fproto_2fface_5fservice_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_faro_2fproto_2fface_5fservice_2eproto = {
  &descriptor_table_faro_2fproto_2fface_5fservice_2eproto_initialized, descriptor_table_protodef_faro_2fproto_2fface_5fservice_2eproto, "faro/proto/face_service.proto", 5390,
  &descriptor_table_faro_2fproto_2fface_5fservice_2eproto_once, descriptor_table_faro_2fproto_2fface_5fservice_2eproto_sccs, descriptor_table_faro_2fproto_2fface_5fservice_2eproto_deps, 37, 2,
  schemas, file_default_instances, TableStruct_faro_2fproto_2fface_5fservice_2eproto::offsets,
  file_level_metadata_faro_2fproto_2fface_5fservice_2eproto, 38, file_level_enum_descriptors_faro_2fproto_2fface_5fservice_2eproto, file_level_service_descriptors_faro_2fproto_2fface_5fservice_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_faro_2fproto_2fface_5fservice_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_faro_2fproto_2fface_5fservice_2eproto), true);
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ServiceStatus_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_faro_2fproto_2fface_5fservice_2eproto);
  return file_level_enum_descriptors_faro_2fproto_2fface_5fservice_2eproto[0];
}
bool ServiceStatus_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* DataType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_faro_2fproto_2fface_5fservice_2eproto);
  return file_level_enum_descriptors_faro_2fproto_2fface_5fservice_2eproto[1];
}
bool DataType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ScoreType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_faro_2fproto_2fface_5fservice_2eproto);
  return file_level_enum_descriptors_faro_2fproto_2fface_5fservice_2eproto[2];
}
bool ScoreType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}


// ===================================================================

void Attribute::InitAsDefaultInstance() {
  ::_Attribute_default_instance_._instance.get_mutable()->matrix_ = const_cast< ::Matrix*>(
      ::Matrix::internal_default_instance());
  ::_Attribute_default_instance_._instance.get_mutable()->vector_ = const_cast< ::Vector*>(
      ::Vector::internal_default_instance());
  ::_Attribute_default_instance_._instance.get_mutable()->image_ = const_cast< ::Image*>(
      ::Image::internal_default_instance());
  ::_Attribute_default_instance_._instance.get_mutable()->point_ = const_cast< ::Point2D*>(
      ::Point2D::internal_default_instance());
  ::_Attribute_default_instance_._instance.get_mutable()->rect_ = const_cast< ::Rect*>(
      ::Rect::internal_default_instance());
}
class Attribute::HasBitSetters {
 public:
  static const ::Matrix& matrix(const Attribute* msg);
  static const ::Vector& vector(const Attribute* msg);
  static const ::Image& image(const Attribute* msg);
  static const ::Point2D& point(const Attribute* msg);
  static const ::Rect& rect(const Attribute* msg);
};

const ::Matrix&
Attribute::HasBitSetters::matrix(const Attribute* msg) {
  return *msg->matrix_;
}
const ::Vector&
Attribute::HasBitSetters::vector(const Attribute* msg) {
  return *msg->vector_;
}
const ::Image&
Attribute::HasBitSetters::image(const Attribute* msg) {
  return *msg->image_;
}
const ::Point2D&
Attribute::HasBitSetters::point(const Attribute* msg) {
  return *msg->point_;
}
const ::Rect&
Attribute::HasBitSetters::rect(const Attribute* msg) {
  return *msg->rect_;
}
void Attribute::clear_matrix() {
  if (GetArenaNoVirtual() == nullptr && matrix_ != nullptr) {
    delete matrix_;
  }
  matrix_ = nullptr;
}
void Attribute::clear_vector() {
  if (GetArenaNoVirtual() == nullptr && vector_ != nullptr) {
    delete vector_;
  }
  vector_ = nullptr;
}
void Attribute::clear_image() {
  if (GetArenaNoVirtual() == nullptr && image_ != nullptr) {
    delete image_;
  }
  image_ = nullptr;
}
void Attribute::clear_point() {
  if (GetArenaNoVirtual() == nullptr && point_ != nullptr) {
    delete point_;
  }
  point_ = nullptr;
}
void Attribute::clear_rect() {
  if (GetArenaNoVirtual() == nullptr && rect_ != nullptr) {
    delete rect_;
  }
  rect_ = nullptr;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Attribute::kKeyFieldNumber;
const int Attribute::kDescriptionFieldNumber;
const int Attribute::kBufferFieldNumber;
const int Attribute::kFvalueFieldNumber;
const int Attribute::kIvalueFieldNumber;
const int Attribute::kTextFieldNumber;
const int Attribute::kPickleFieldNumber;
const int Attribute::kJsonFieldNumber;
const int Attribute::kMatrixFieldNumber;
const int Attribute::kVectorFieldNumber;
const int Attribute::kImageFieldNumber;
const int Attribute::kPointFieldNumber;
const int Attribute::kRectFieldNumber;
const int Attribute::kXmlFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Attribute::Attribute()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Attribute)
}
Attribute::Attribute(const Attribute& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.key().size() > 0) {
    key_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.key_);
  }
  description_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.description().size() > 0) {
    description_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.description_);
  }
  buffer_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.buffer().size() > 0) {
    buffer_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.buffer_);
  }
  text_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.text().size() > 0) {
    text_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.text_);
  }
  pickle_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.pickle().size() > 0) {
    pickle_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.pickle_);
  }
  json_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.json().size() > 0) {
    json_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.json_);
  }
  xml_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.xml().size() > 0) {
    xml_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.xml_);
  }
  if (from.has_matrix()) {
    matrix_ = new ::Matrix(*from.matrix_);
  } else {
    matrix_ = nullptr;
  }
  if (from.has_vector()) {
    vector_ = new ::Vector(*from.vector_);
  } else {
    vector_ = nullptr;
  }
  if (from.has_image()) {
    image_ = new ::Image(*from.image_);
  } else {
    image_ = nullptr;
  }
  if (from.has_point()) {
    point_ = new ::Point2D(*from.point_);
  } else {
    point_ = nullptr;
  }
  if (from.has_rect()) {
    rect_ = new ::Rect(*from.rect_);
  } else {
    rect_ = nullptr;
  }
  ::memcpy(&fvalue_, &from.fvalue_,
    static_cast<size_t>(reinterpret_cast<char*>(&ivalue_) -
    reinterpret_cast<char*>(&fvalue_)) + sizeof(ivalue_));
  // @@protoc_insertion_point(copy_constructor:Attribute)
}

void Attribute::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Attribute_faro_2fproto_2fface_5fservice_2eproto.base);
  key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  description_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  buffer_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  text_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  pickle_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  json_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  xml_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&matrix_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&ivalue_) -
      reinterpret_cast<char*>(&matrix_)) + sizeof(ivalue_));
}

Attribute::~Attribute() {
  // @@protoc_insertion_point(destructor:Attribute)
  SharedDtor();
}

void Attribute::SharedDtor() {
  key_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  description_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  buffer_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  text_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  pickle_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  json_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  xml_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete matrix_;
  if (this != internal_default_instance()) delete vector_;
  if (this != internal_default_instance()) delete image_;
  if (this != internal_default_instance()) delete point_;
  if (this != internal_default_instance()) delete rect_;
}

void Attribute::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Attribute& Attribute::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Attribute_faro_2fproto_2fface_5fservice_2eproto.base);
  return *internal_default_instance();
}


void Attribute::Clear() {
// @@protoc_insertion_point(message_clear_start:Attribute)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  key_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  description_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  buffer_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  text_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  pickle_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  json_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  xml_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && matrix_ != nullptr) {
    delete matrix_;
  }
  matrix_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && vector_ != nullptr) {
    delete vector_;
  }
  vector_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && image_ != nullptr) {
    delete image_;
  }
  image_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && point_ != nullptr) {
    delete point_;
  }
  point_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && rect_ != nullptr) {
    delete rect_;
  }
  rect_ = nullptr;
  ::memset(&fvalue_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&ivalue_) -
      reinterpret_cast<char*>(&fvalue_)) + sizeof(ivalue_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* Attribute::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string key = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_key(), ptr, ctx, "Attribute.key");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string description = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_description(), ptr, ctx, "Attribute.description");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes buffer = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_buffer(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // float fvalue = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 37)) {
          fvalue_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // int32 ivalue = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          ivalue_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string text = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_text(), ptr, ctx, "Attribute.text");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes pickle = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_pickle(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes json = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_json(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .Matrix matrix = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr = ctx->ParseMessage(mutable_matrix(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .Vector vector = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr = ctx->ParseMessage(mutable_vector(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .Image image = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          ptr = ctx->ParseMessage(mutable_image(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .Point2D point = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          ptr = ctx->ParseMessage(mutable_point(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .Rect rect = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 106)) {
          ptr = ctx->ParseMessage(mutable_rect(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes xml = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 114)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_xml(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool Attribute::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:Attribute)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string key = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_key()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->key().data(), static_cast<int>(this->key().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "Attribute.key"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string description = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_description()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->description().data(), static_cast<int>(this->description().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "Attribute.description"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes buffer = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadBytes(
                input, this->mutable_buffer()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float fvalue = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (37 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &fvalue_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 ivalue = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (40 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &ivalue_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string text = 6;
      case 6: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (50 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_text()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->text().data(), static_cast<int>(this->text().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "Attribute.text"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes pickle = 7;
      case 7: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (58 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadBytes(
                input, this->mutable_pickle()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes json = 8;
      case 8: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (66 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadBytes(
                input, this->mutable_json()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .Matrix matrix = 9;
      case 9: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (74 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_matrix()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .Vector vector = 10;
      case 10: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (82 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_vector()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .Image image = 11;
      case 11: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (90 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_image()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .Point2D point = 12;
      case 12: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (98 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_point()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .Rect rect = 13;
      case 13: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (106 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_rect()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes xml = 14;
      case 14: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (114 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadBytes(
                input, this->mutable_xml()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Attribute)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Attribute)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void Attribute::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Attribute)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string key = 1;
  if (this->key().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->key().data(), static_cast<int>(this->key().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Attribute.key");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->key(), output);
  }

  // string description = 2;
  if (this->description().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->description().data(), static_cast<int>(this->description().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Attribute.description");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->description(), output);
  }

  // bytes buffer = 3;
  if (this->buffer().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->buffer(), output);
  }

  // float fvalue = 4;
  if (!(this->fvalue() <= 0 && this->fvalue() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(4, this->fvalue(), output);
  }

  // int32 ivalue = 5;
  if (this->ivalue() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(5, this->ivalue(), output);
  }

  // string text = 6;
  if (this->text().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->text().data(), static_cast<int>(this->text().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Attribute.text");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->text(), output);
  }

  // bytes pickle = 7;
  if (this->pickle().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesMaybeAliased(
      7, this->pickle(), output);
  }

  // bytes json = 8;
  if (this->json().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesMaybeAliased(
      8, this->json(), output);
  }

  // .Matrix matrix = 9;
  if (this->has_matrix()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, HasBitSetters::matrix(this), output);
  }

  // .Vector vector = 10;
  if (this->has_vector()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, HasBitSetters::vector(this), output);
  }

  // .Image image = 11;
  if (this->has_image()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, HasBitSetters::image(this), output);
  }

  // .Point2D point = 12;
  if (this->has_point()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      12, HasBitSetters::point(this), output);
  }

  // .Rect rect = 13;
  if (this->has_rect()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      13, HasBitSetters::rect(this), output);
  }

  // bytes xml = 14;
  if (this->xml().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesMaybeAliased(
      14, this->xml(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Attribute)
}

::PROTOBUF_NAMESPACE_ID::uint8* Attribute::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Attribute)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string key = 1;
  if (this->key().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->key().data(), static_cast<int>(this->key().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Attribute.key");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        1, this->key(), target);
  }

  // string description = 2;
  if (this->description().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->description().data(), static_cast<int>(this->description().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Attribute.description");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        2, this->description(), target);
  }

  // bytes buffer = 3;
  if (this->buffer().size() > 0) {
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesToArray(
        3, this->buffer(), target);
  }

  // float fvalue = 4;
  if (!(this->fvalue() <= 0 && this->fvalue() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(4, this->fvalue(), target);
  }

  // int32 ivalue = 5;
  if (this->ivalue() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->ivalue(), target);
  }

  // string text = 6;
  if (this->text().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->text().data(), static_cast<int>(this->text().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Attribute.text");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        6, this->text(), target);
  }

  // bytes pickle = 7;
  if (this->pickle().size() > 0) {
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesToArray(
        7, this->pickle(), target);
  }

  // bytes json = 8;
  if (this->json().size() > 0) {
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesToArray(
        8, this->json(), target);
  }

  // .Matrix matrix = 9;
  if (this->has_matrix()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        9, HasBitSetters::matrix(this), target);
  }

  // .Vector vector = 10;
  if (this->has_vector()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        10, HasBitSetters::vector(this), target);
  }

  // .Image image = 11;
  if (this->has_image()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        11, HasBitSetters::image(this), target);
  }

  // .Point2D point = 12;
  if (this->has_point()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        12, HasBitSetters::point(this), target);
  }

  // .Rect rect = 13;
  if (this->has_rect()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        13, HasBitSetters::rect(this), target);
  }

  // bytes xml = 14;
  if (this->xml().size() > 0) {
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesToArray(
        14, this->xml(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Attribute)
  return target;
}

size_t Attribute::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Attribute)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string key = 1;
  if (this->key().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->key());
  }

  // string description = 2;
  if (this->description().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->description());
  }

  // bytes buffer = 3;
  if (this->buffer().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->buffer());
  }

  // string text = 6;
  if (this->text().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->text());
  }

  // bytes pickle = 7;
  if (this->pickle().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->pickle());
  }

  // bytes json = 8;
  if (this->json().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->json());
  }

  // bytes xml = 14;
  if (this->xml().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->xml());
  }

  // .Matrix matrix = 9;
  if (this->has_matrix()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *matrix_);
  }

  // .Vector vector = 10;
  if (this->has_vector()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *vector_);
  }

  // .Image image = 11;
  if (this->has_image()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *image_);
  }

  // .Point2D point = 12;
  if (this->has_point()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *point_);
  }

  // .Rect rect = 13;
  if (this->has_rect()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *rect_);
  }

  // float fvalue = 4;
  if (!(this->fvalue() <= 0 && this->fvalue() >= 0)) {
    total_size += 1 + 4;
  }

  // int32 ivalue = 5;
  if (this->ivalue() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->ivalue());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Attribute::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Attribute)
  GOOGLE_DCHECK_NE(&from, this);
  const Attribute* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Attribute>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Attribute)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Attribute)
    MergeFrom(*source);
  }
}

void Attribute::MergeFrom(const Attribute& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Attribute)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.key().size() > 0) {

    key_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.key_);
  }
  if (from.description().size() > 0) {

    description_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.description_);
  }
  if (from.buffer().size() > 0) {

    buffer_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.buffer_);
  }
  if (from.text().size() > 0) {

    text_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.text_);
  }
  if (from.pickle().size() > 0) {

    pickle_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.pickle_);
  }
  if (from.json().size() > 0) {

    json_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.json_);
  }
  if (from.xml().size() > 0) {

    xml_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.xml_);
  }
  if (from.has_matrix()) {
    mutable_matrix()->::Matrix::MergeFrom(from.matrix());
  }
  if (from.has_vector()) {
    mutable_vector()->::Vector::MergeFrom(from.vector());
  }
  if (from.has_image()) {
    mutable_image()->::Image::MergeFrom(from.image());
  }
  if (from.has_point()) {
    mutable_point()->::Point2D::MergeFrom(from.point());
  }
  if (from.has_rect()) {
    mutable_rect()->::Rect::MergeFrom(from.rect());
  }
  if (!(from.fvalue() <= 0 && from.fvalue() >= 0)) {
    set_fvalue(from.fvalue());
  }
  if (from.ivalue() != 0) {
    set_ivalue(from.ivalue());
  }
}

void Attribute::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Attribute)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Attribute::CopyFrom(const Attribute& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Attribute)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Attribute::IsInitialized() const {
  return true;
}

void Attribute::Swap(Attribute* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Attribute::InternalSwap(Attribute* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  key_.Swap(&other->key_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  description_.Swap(&other->description_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  buffer_.Swap(&other->buffer_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  text_.Swap(&other->text_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  pickle_.Swap(&other->pickle_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  json_.Swap(&other->json_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  xml_.Swap(&other->xml_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(matrix_, other->matrix_);
  swap(vector_, other->vector_);
  swap(image_, other->image_);
  swap(point_, other->point_);
  swap(rect_, other->rect_);
  swap(fvalue_, other->fvalue_);
  swap(ivalue_, other->ivalue_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Attribute::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ErrorMessage::InitAsDefaultInstance() {
}
class ErrorMessage::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ErrorMessage::kErrorCodeFieldNumber;
const int ErrorMessage::kErrorMessageFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ErrorMessage::ErrorMessage()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ErrorMessage)
}
ErrorMessage::ErrorMessage(const ErrorMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  error_message_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.error_message().size() > 0) {
    error_message_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.error_message_);
  }
  error_code_ = from.error_code_;
  // @@protoc_insertion_point(copy_constructor:ErrorMessage)
}

void ErrorMessage::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ErrorMessage_faro_2fproto_2fface_5fservice_2eproto.base);
  error_message_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  error_code_ = 0;
}

ErrorMessage::~ErrorMessage() {
  // @@protoc_insertion_point(destructor:ErrorMessage)
  SharedDtor();
}

void ErrorMessage::SharedDtor() {
  error_message_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ErrorMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ErrorMessage& ErrorMessage::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ErrorMessage_faro_2fproto_2fface_5fservice_2eproto.base);
  return *internal_default_instance();
}


void ErrorMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:ErrorMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  error_message_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  error_code_ = 0;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ErrorMessage::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 error_code = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          error_code_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string error_message = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_error_message(), ptr, ctx, "ErrorMessage.error_message");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ErrorMessage::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:ErrorMessage)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 error_code = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &error_code_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string error_message = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (34 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_error_message()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->error_message().data(), static_cast<int>(this->error_message().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "ErrorMessage.error_message"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ErrorMessage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ErrorMessage)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ErrorMessage::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ErrorMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 error_code = 3;
  if (this->error_code() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(3, this->error_code(), output);
  }

  // string error_message = 4;
  if (this->error_message().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->error_message().data(), static_cast<int>(this->error_message().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ErrorMessage.error_message");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->error_message(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ErrorMessage)
}

::PROTOBUF_NAMESPACE_ID::uint8* ErrorMessage::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ErrorMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 error_code = 3;
  if (this->error_code() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->error_code(), target);
  }

  // string error_message = 4;
  if (this->error_message().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->error_message().data(), static_cast<int>(this->error_message().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ErrorMessage.error_message");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        4, this->error_message(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ErrorMessage)
  return target;
}

size_t ErrorMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ErrorMessage)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string error_message = 4;
  if (this->error_message().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->error_message());
  }

  // int32 error_code = 3;
  if (this->error_code() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->error_code());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ErrorMessage::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ErrorMessage)
  GOOGLE_DCHECK_NE(&from, this);
  const ErrorMessage* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ErrorMessage>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ErrorMessage)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ErrorMessage)
    MergeFrom(*source);
  }
}

void ErrorMessage::MergeFrom(const ErrorMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ErrorMessage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.error_message().size() > 0) {

    error_message_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.error_message_);
  }
  if (from.error_code() != 0) {
    set_error_code(from.error_code());
  }
}

void ErrorMessage::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ErrorMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ErrorMessage::CopyFrom(const ErrorMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ErrorMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ErrorMessage::IsInitialized() const {
  return true;
}

void ErrorMessage::Swap(ErrorMessage* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ErrorMessage::InternalSwap(ErrorMessage* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  error_message_.Swap(&other->error_message_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(error_code_, other->error_code_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ErrorMessage::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Detection::InitAsDefaultInstance() {
  ::_Detection_default_instance_._instance.get_mutable()->location_ = const_cast< ::Rect*>(
      ::Rect::internal_default_instance());
}
class Detection::HasBitSetters {
 public:
  static const ::Rect& location(const Detection* msg);
};

const ::Rect&
Detection::HasBitSetters::location(const Detection* msg) {
  return *msg->location_;
}
void Detection::clear_location() {
  if (GetArenaNoVirtual() == nullptr && location_ != nullptr) {
    delete location_;
  }
  location_ = nullptr;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Detection::kScoreFieldNumber;
const int Detection::kLocationFieldNumber;
const int Detection::kDetectionIdFieldNumber;
const int Detection::kDetectionClassFieldNumber;
const int Detection::kAttributesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Detection::Detection()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Detection)
}
Detection::Detection(const Detection& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      attributes_(from.attributes_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  detection_class_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.detection_class().size() > 0) {
    detection_class_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.detection_class_);
  }
  if (from.has_location()) {
    location_ = new ::Rect(*from.location_);
  } else {
    location_ = nullptr;
  }
  ::memcpy(&score_, &from.score_,
    static_cast<size_t>(reinterpret_cast<char*>(&detection_id_) -
    reinterpret_cast<char*>(&score_)) + sizeof(detection_id_));
  // @@protoc_insertion_point(copy_constructor:Detection)
}

void Detection::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Detection_faro_2fproto_2fface_5fservice_2eproto.base);
  detection_class_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&location_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&detection_id_) -
      reinterpret_cast<char*>(&location_)) + sizeof(detection_id_));
}

Detection::~Detection() {
  // @@protoc_insertion_point(destructor:Detection)
  SharedDtor();
}

void Detection::SharedDtor() {
  detection_class_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete location_;
}

void Detection::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Detection& Detection::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Detection_faro_2fproto_2fface_5fservice_2eproto.base);
  return *internal_default_instance();
}


void Detection::Clear() {
// @@protoc_insertion_point(message_clear_start:Detection)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  attributes_.Clear();
  detection_class_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && location_ != nullptr) {
    delete location_;
  }
  location_ = nullptr;
  ::memset(&score_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&detection_id_) -
      reinterpret_cast<char*>(&score_)) + sizeof(detection_id_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* Detection::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // float score = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13)) {
          score_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // .Rect location = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(mutable_location(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 detection_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          detection_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string detection_class = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_detection_class(), ptr, ctx, "Detection.detection_class");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .Attribute attributes = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_attributes(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 42);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool Detection::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:Detection)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // float score = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (13 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &score_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .Rect location = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_location()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 detection_id = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &detection_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string detection_class = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (34 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_detection_class()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->detection_class().data(), static_cast<int>(this->detection_class().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "Detection.detection_class"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .Attribute attributes = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (42 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_attributes()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Detection)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Detection)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void Detection::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Detection)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float score = 1;
  if (!(this->score() <= 0 && this->score() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(1, this->score(), output);
  }

  // .Rect location = 2;
  if (this->has_location()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, HasBitSetters::location(this), output);
  }

  // int32 detection_id = 3;
  if (this->detection_id() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(3, this->detection_id(), output);
  }

  // string detection_class = 4;
  if (this->detection_class().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->detection_class().data(), static_cast<int>(this->detection_class().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Detection.detection_class");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->detection_class(), output);
  }

  // repeated .Attribute attributes = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->attributes_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      5,
      this->attributes(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Detection)
}

::PROTOBUF_NAMESPACE_ID::uint8* Detection::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Detection)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float score = 1;
  if (!(this->score() <= 0 && this->score() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1, this->score(), target);
  }

  // .Rect location = 2;
  if (this->has_location()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, HasBitSetters::location(this), target);
  }

  // int32 detection_id = 3;
  if (this->detection_id() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->detection_id(), target);
  }

  // string detection_class = 4;
  if (this->detection_class().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->detection_class().data(), static_cast<int>(this->detection_class().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Detection.detection_class");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        4, this->detection_class(), target);
  }

  // repeated .Attribute attributes = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->attributes_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, this->attributes(static_cast<int>(i)), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Detection)
  return target;
}

size_t Detection::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Detection)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .Attribute attributes = 5;
  {
    unsigned int count = static_cast<unsigned int>(this->attributes_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->attributes(static_cast<int>(i)));
    }
  }

  // string detection_class = 4;
  if (this->detection_class().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->detection_class());
  }

  // .Rect location = 2;
  if (this->has_location()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *location_);
  }

  // float score = 1;
  if (!(this->score() <= 0 && this->score() >= 0)) {
    total_size += 1 + 4;
  }

  // int32 detection_id = 3;
  if (this->detection_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->detection_id());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Detection::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Detection)
  GOOGLE_DCHECK_NE(&from, this);
  const Detection* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Detection>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Detection)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Detection)
    MergeFrom(*source);
  }
}

void Detection::MergeFrom(const Detection& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Detection)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  attributes_.MergeFrom(from.attributes_);
  if (from.detection_class().size() > 0) {

    detection_class_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.detection_class_);
  }
  if (from.has_location()) {
    mutable_location()->::Rect::MergeFrom(from.location());
  }
  if (!(from.score() <= 0 && from.score() >= 0)) {
    set_score(from.score());
  }
  if (from.detection_id() != 0) {
    set_detection_id(from.detection_id());
  }
}

void Detection::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Detection)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Detection::CopyFrom(const Detection& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Detection)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Detection::IsInitialized() const {
  return true;
}

void Detection::Swap(Detection* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Detection::InternalSwap(Detection* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  CastToBase(&attributes_)->InternalSwap(CastToBase(&other->attributes_));
  detection_class_.Swap(&other->detection_class_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(location_, other->location_);
  swap(score_, other->score_);
  swap(detection_id_, other->detection_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Detection::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Landmark::InitAsDefaultInstance() {
  ::_Landmark_default_instance_._instance.get_mutable()->location_ = const_cast< ::Point2D*>(
      ::Point2D::internal_default_instance());
}
class Landmark::HasBitSetters {
 public:
  static const ::Point2D& location(const Landmark* msg);
};

const ::Point2D&
Landmark::HasBitSetters::location(const Landmark* msg) {
  return *msg->location_;
}
void Landmark::clear_location() {
  if (GetArenaNoVirtual() == nullptr && location_ != nullptr) {
    delete location_;
  }
  location_ = nullptr;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Landmark::kLandmarkIdFieldNumber;
const int Landmark::kLocationFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Landmark::Landmark()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Landmark)
}
Landmark::Landmark(const Landmark& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  landmark_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.landmark_id().size() > 0) {
    landmark_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.landmark_id_);
  }
  if (from.has_location()) {
    location_ = new ::Point2D(*from.location_);
  } else {
    location_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:Landmark)
}

void Landmark::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Landmark_faro_2fproto_2fface_5fservice_2eproto.base);
  landmark_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  location_ = nullptr;
}

Landmark::~Landmark() {
  // @@protoc_insertion_point(destructor:Landmark)
  SharedDtor();
}

void Landmark::SharedDtor() {
  landmark_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete location_;
}

void Landmark::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Landmark& Landmark::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Landmark_faro_2fproto_2fface_5fservice_2eproto.base);
  return *internal_default_instance();
}


void Landmark::Clear() {
// @@protoc_insertion_point(message_clear_start:Landmark)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  landmark_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && location_ != nullptr) {
    delete location_;
  }
  location_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* Landmark::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string landmark_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_landmark_id(), ptr, ctx, "Landmark.landmark_id");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .Point2D location = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(mutable_location(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool Landmark::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:Landmark)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string landmark_id = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_landmark_id()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->landmark_id().data(), static_cast<int>(this->landmark_id().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "Landmark.landmark_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .Point2D location = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_location()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Landmark)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Landmark)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void Landmark::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Landmark)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string landmark_id = 1;
  if (this->landmark_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->landmark_id().data(), static_cast<int>(this->landmark_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Landmark.landmark_id");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->landmark_id(), output);
  }

  // .Point2D location = 2;
  if (this->has_location()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, HasBitSetters::location(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Landmark)
}

::PROTOBUF_NAMESPACE_ID::uint8* Landmark::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Landmark)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string landmark_id = 1;
  if (this->landmark_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->landmark_id().data(), static_cast<int>(this->landmark_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Landmark.landmark_id");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        1, this->landmark_id(), target);
  }

  // .Point2D location = 2;
  if (this->has_location()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, HasBitSetters::location(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Landmark)
  return target;
}

size_t Landmark::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Landmark)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string landmark_id = 1;
  if (this->landmark_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->landmark_id());
  }

  // .Point2D location = 2;
  if (this->has_location()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *location_);
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Landmark::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Landmark)
  GOOGLE_DCHECK_NE(&from, this);
  const Landmark* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Landmark>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Landmark)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Landmark)
    MergeFrom(*source);
  }
}

void Landmark::MergeFrom(const Landmark& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Landmark)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.landmark_id().size() > 0) {

    landmark_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.landmark_id_);
  }
  if (from.has_location()) {
    mutable_location()->::Point2D::MergeFrom(from.location());
  }
}

void Landmark::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Landmark)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Landmark::CopyFrom(const Landmark& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Landmark)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Landmark::IsInitialized() const {
  return true;
}

void Landmark::Swap(Landmark* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Landmark::InternalSwap(Landmark* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  landmark_id_.Swap(&other->landmark_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(location_, other->location_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Landmark::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void DetectionOptions::InitAsDefaultInstance() {
}
class DetectionOptions::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DetectionOptions::kAlgorithmIdFieldNumber;
const int DetectionOptions::kBestFieldNumber;
const int DetectionOptions::kThresholdFieldNumber;
const int DetectionOptions::kScaleLevelsFieldNumber;
const int DetectionOptions::kScanLevelsFieldNumber;
const int DetectionOptions::kScanOverlapFieldNumber;
const int DetectionOptions::kMinSizeFieldNumber;
const int DetectionOptions::kAttributesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DetectionOptions::DetectionOptions()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:DetectionOptions)
}
DetectionOptions::DetectionOptions(const DetectionOptions& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      attributes_(from.attributes_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  algorithm_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.algorithm_id().size() > 0) {
    algorithm_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.algorithm_id_);
  }
  ::memcpy(&best_, &from.best_,
    static_cast<size_t>(reinterpret_cast<char*>(&min_size_) -
    reinterpret_cast<char*>(&best_)) + sizeof(min_size_));
  // @@protoc_insertion_point(copy_constructor:DetectionOptions)
}

void DetectionOptions::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_DetectionOptions_faro_2fproto_2fface_5fservice_2eproto.base);
  algorithm_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&best_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&min_size_) -
      reinterpret_cast<char*>(&best_)) + sizeof(min_size_));
}

DetectionOptions::~DetectionOptions() {
  // @@protoc_insertion_point(destructor:DetectionOptions)
  SharedDtor();
}

void DetectionOptions::SharedDtor() {
  algorithm_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void DetectionOptions::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DetectionOptions& DetectionOptions::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DetectionOptions_faro_2fproto_2fface_5fservice_2eproto.base);
  return *internal_default_instance();
}


void DetectionOptions::Clear() {
// @@protoc_insertion_point(message_clear_start:DetectionOptions)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  attributes_.Clear();
  algorithm_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&best_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&min_size_) -
      reinterpret_cast<char*>(&best_)) + sizeof(min_size_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* DetectionOptions::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string algorithm_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_algorithm_id(), ptr, ctx, "DetectionOptions.algorithm_id");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool best = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          best_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // float threshold = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          threshold_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // int32 scale_levels = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          scale_levels_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 scan_levels = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          scan_levels_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // float scan_overlap = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 53)) {
          scan_overlap_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // int32 min_size = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          min_size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .Attribute attributes = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_attributes(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 66);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool DetectionOptions::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:DetectionOptions)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string algorithm_id = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_algorithm_id()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->algorithm_id().data(), static_cast<int>(this->algorithm_id().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "DetectionOptions.algorithm_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool best = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &best_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float threshold = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (29 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &threshold_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 scale_levels = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (32 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &scale_levels_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 scan_levels = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (40 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &scan_levels_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float scan_overlap = 6;
      case 6: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (53 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &scan_overlap_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 min_size = 7;
      case 7: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (56 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &min_size_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .Attribute attributes = 8;
      case 8: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (66 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_attributes()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:DetectionOptions)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:DetectionOptions)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void DetectionOptions::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:DetectionOptions)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string algorithm_id = 1;
  if (this->algorithm_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->algorithm_id().data(), static_cast<int>(this->algorithm_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "DetectionOptions.algorithm_id");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->algorithm_id(), output);
  }

  // bool best = 2;
  if (this->best() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(2, this->best(), output);
  }

  // float threshold = 3;
  if (!(this->threshold() <= 0 && this->threshold() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(3, this->threshold(), output);
  }

  // int32 scale_levels = 4;
  if (this->scale_levels() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(4, this->scale_levels(), output);
  }

  // int32 scan_levels = 5;
  if (this->scan_levels() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(5, this->scan_levels(), output);
  }

  // float scan_overlap = 6;
  if (!(this->scan_overlap() <= 0 && this->scan_overlap() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(6, this->scan_overlap(), output);
  }

  // int32 min_size = 7;
  if (this->min_size() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(7, this->min_size(), output);
  }

  // repeated .Attribute attributes = 8;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->attributes_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      8,
      this->attributes(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:DetectionOptions)
}

::PROTOBUF_NAMESPACE_ID::uint8* DetectionOptions::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:DetectionOptions)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string algorithm_id = 1;
  if (this->algorithm_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->algorithm_id().data(), static_cast<int>(this->algorithm_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "DetectionOptions.algorithm_id");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        1, this->algorithm_id(), target);
  }

  // bool best = 2;
  if (this->best() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->best(), target);
  }

  // float threshold = 3;
  if (!(this->threshold() <= 0 && this->threshold() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->threshold(), target);
  }

  // int32 scale_levels = 4;
  if (this->scale_levels() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->scale_levels(), target);
  }

  // int32 scan_levels = 5;
  if (this->scan_levels() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->scan_levels(), target);
  }

  // float scan_overlap = 6;
  if (!(this->scan_overlap() <= 0 && this->scan_overlap() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(6, this->scan_overlap(), target);
  }

  // int32 min_size = 7;
  if (this->min_size() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(7, this->min_size(), target);
  }

  // repeated .Attribute attributes = 8;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->attributes_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        8, this->attributes(static_cast<int>(i)), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DetectionOptions)
  return target;
}

size_t DetectionOptions::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:DetectionOptions)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .Attribute attributes = 8;
  {
    unsigned int count = static_cast<unsigned int>(this->attributes_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->attributes(static_cast<int>(i)));
    }
  }

  // string algorithm_id = 1;
  if (this->algorithm_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->algorithm_id());
  }

  // bool best = 2;
  if (this->best() != 0) {
    total_size += 1 + 1;
  }

  // float threshold = 3;
  if (!(this->threshold() <= 0 && this->threshold() >= 0)) {
    total_size += 1 + 4;
  }

  // int32 scale_levels = 4;
  if (this->scale_levels() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->scale_levels());
  }

  // int32 scan_levels = 5;
  if (this->scan_levels() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->scan_levels());
  }

  // float scan_overlap = 6;
  if (!(this->scan_overlap() <= 0 && this->scan_overlap() >= 0)) {
    total_size += 1 + 4;
  }

  // int32 min_size = 7;
  if (this->min_size() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->min_size());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DetectionOptions::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:DetectionOptions)
  GOOGLE_DCHECK_NE(&from, this);
  const DetectionOptions* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DetectionOptions>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:DetectionOptions)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:DetectionOptions)
    MergeFrom(*source);
  }
}

void DetectionOptions::MergeFrom(const DetectionOptions& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:DetectionOptions)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  attributes_.MergeFrom(from.attributes_);
  if (from.algorithm_id().size() > 0) {

    algorithm_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.algorithm_id_);
  }
  if (from.best() != 0) {
    set_best(from.best());
  }
  if (!(from.threshold() <= 0 && from.threshold() >= 0)) {
    set_threshold(from.threshold());
  }
  if (from.scale_levels() != 0) {
    set_scale_levels(from.scale_levels());
  }
  if (from.scan_levels() != 0) {
    set_scan_levels(from.scan_levels());
  }
  if (!(from.scan_overlap() <= 0 && from.scan_overlap() >= 0)) {
    set_scan_overlap(from.scan_overlap());
  }
  if (from.min_size() != 0) {
    set_min_size(from.min_size());
  }
}

void DetectionOptions::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:DetectionOptions)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DetectionOptions::CopyFrom(const DetectionOptions& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:DetectionOptions)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DetectionOptions::IsInitialized() const {
  return true;
}

void DetectionOptions::Swap(DetectionOptions* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DetectionOptions::InternalSwap(DetectionOptions* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  CastToBase(&attributes_)->InternalSwap(CastToBase(&other->attributes_));
  algorithm_id_.Swap(&other->algorithm_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(best_, other->best_);
  swap(threshold_, other->threshold_);
  swap(scale_levels_, other->scale_levels_);
  swap(scan_levels_, other->scan_levels_);
  swap(scan_overlap_, other->scan_overlap_);
  swap(min_size_, other->min_size_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DetectionOptions::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ExtractOptions::InitAsDefaultInstance() {
}
class ExtractOptions::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ExtractOptions::kAlgorithmIdFieldNumber;
const int ExtractOptions::kAttributesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ExtractOptions::ExtractOptions()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ExtractOptions)
}
ExtractOptions::ExtractOptions(const ExtractOptions& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      attributes_(from.attributes_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  algorithm_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.algorithm_id().size() > 0) {
    algorithm_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.algorithm_id_);
  }
  // @@protoc_insertion_point(copy_constructor:ExtractOptions)
}

void ExtractOptions::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ExtractOptions_faro_2fproto_2fface_5fservice_2eproto.base);
  algorithm_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

ExtractOptions::~ExtractOptions() {
  // @@protoc_insertion_point(destructor:ExtractOptions)
  SharedDtor();
}

void ExtractOptions::SharedDtor() {
  algorithm_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ExtractOptions::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ExtractOptions& ExtractOptions::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ExtractOptions_faro_2fproto_2fface_5fservice_2eproto.base);
  return *internal_default_instance();
}


void ExtractOptions::Clear() {
// @@protoc_insertion_point(message_clear_start:ExtractOptions)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  attributes_.Clear();
  algorithm_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ExtractOptions::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string algorithm_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_algorithm_id(), ptr, ctx, "ExtractOptions.algorithm_id");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .Attribute attributes = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_attributes(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 66);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ExtractOptions::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:ExtractOptions)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string algorithm_id = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_algorithm_id()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->algorithm_id().data(), static_cast<int>(this->algorithm_id().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "ExtractOptions.algorithm_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .Attribute attributes = 8;
      case 8: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (66 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_attributes()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ExtractOptions)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ExtractOptions)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ExtractOptions::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ExtractOptions)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string algorithm_id = 1;
  if (this->algorithm_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->algorithm_id().data(), static_cast<int>(this->algorithm_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ExtractOptions.algorithm_id");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->algorithm_id(), output);
  }

  // repeated .Attribute attributes = 8;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->attributes_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      8,
      this->attributes(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ExtractOptions)
}

::PROTOBUF_NAMESPACE_ID::uint8* ExtractOptions::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ExtractOptions)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string algorithm_id = 1;
  if (this->algorithm_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->algorithm_id().data(), static_cast<int>(this->algorithm_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ExtractOptions.algorithm_id");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        1, this->algorithm_id(), target);
  }

  // repeated .Attribute attributes = 8;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->attributes_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        8, this->attributes(static_cast<int>(i)), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ExtractOptions)
  return target;
}

size_t ExtractOptions::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ExtractOptions)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .Attribute attributes = 8;
  {
    unsigned int count = static_cast<unsigned int>(this->attributes_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->attributes(static_cast<int>(i)));
    }
  }

  // string algorithm_id = 1;
  if (this->algorithm_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->algorithm_id());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ExtractOptions::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ExtractOptions)
  GOOGLE_DCHECK_NE(&from, this);
  const ExtractOptions* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ExtractOptions>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ExtractOptions)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ExtractOptions)
    MergeFrom(*source);
  }
}

void ExtractOptions::MergeFrom(const ExtractOptions& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ExtractOptions)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  attributes_.MergeFrom(from.attributes_);
  if (from.algorithm_id().size() > 0) {

    algorithm_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.algorithm_id_);
  }
}

void ExtractOptions::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ExtractOptions)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ExtractOptions::CopyFrom(const ExtractOptions& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ExtractOptions)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ExtractOptions::IsInitialized() const {
  return true;
}

void ExtractOptions::Swap(ExtractOptions* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ExtractOptions::InternalSwap(ExtractOptions* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  CastToBase(&attributes_)->InternalSwap(CastToBase(&other->attributes_));
  algorithm_id_.Swap(&other->algorithm_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata ExtractOptions::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void EnrollOptions::InitAsDefaultInstance() {
}
class EnrollOptions::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int EnrollOptions::kAttributesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

EnrollOptions::EnrollOptions()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:EnrollOptions)
}
EnrollOptions::EnrollOptions(const EnrollOptions& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      attributes_(from.attributes_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:EnrollOptions)
}

void EnrollOptions::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_EnrollOptions_faro_2fproto_2fface_5fservice_2eproto.base);
}

EnrollOptions::~EnrollOptions() {
  // @@protoc_insertion_point(destructor:EnrollOptions)
  SharedDtor();
}

void EnrollOptions::SharedDtor() {
}

void EnrollOptions::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const EnrollOptions& EnrollOptions::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_EnrollOptions_faro_2fproto_2fface_5fservice_2eproto.base);
  return *internal_default_instance();
}


void EnrollOptions::Clear() {
// @@protoc_insertion_point(message_clear_start:EnrollOptions)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  attributes_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* EnrollOptions::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .Attribute attributes = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_attributes(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 66);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool EnrollOptions::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:EnrollOptions)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .Attribute attributes = 8;
      case 8: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (66 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_attributes()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:EnrollOptions)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:EnrollOptions)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void EnrollOptions::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:EnrollOptions)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .Attribute attributes = 8;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->attributes_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      8,
      this->attributes(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:EnrollOptions)
}

::PROTOBUF_NAMESPACE_ID::uint8* EnrollOptions::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:EnrollOptions)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .Attribute attributes = 8;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->attributes_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        8, this->attributes(static_cast<int>(i)), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:EnrollOptions)
  return target;
}

size_t EnrollOptions::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:EnrollOptions)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .Attribute attributes = 8;
  {
    unsigned int count = static_cast<unsigned int>(this->attributes_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->attributes(static_cast<int>(i)));
    }
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void EnrollOptions::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:EnrollOptions)
  GOOGLE_DCHECK_NE(&from, this);
  const EnrollOptions* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<EnrollOptions>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:EnrollOptions)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:EnrollOptions)
    MergeFrom(*source);
  }
}

void EnrollOptions::MergeFrom(const EnrollOptions& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:EnrollOptions)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  attributes_.MergeFrom(from.attributes_);
}

void EnrollOptions::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:EnrollOptions)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EnrollOptions::CopyFrom(const EnrollOptions& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:EnrollOptions)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EnrollOptions::IsInitialized() const {
  return true;
}

void EnrollOptions::Swap(EnrollOptions* other) {
  if (other == this) return;
  InternalSwap(other);
}
void EnrollOptions::InternalSwap(EnrollOptions* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  CastToBase(&attributes_)->InternalSwap(CastToBase(&other->attributes_));
}

::PROTOBUF_NAMESPACE_ID::Metadata EnrollOptions::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void DetectionList::InitAsDefaultInstance() {
  ::_DetectionList_default_instance_._instance.get_mutable()->options_ = const_cast< ::DetectionOptions*>(
      ::DetectionOptions::internal_default_instance());
}
class DetectionList::HasBitSetters {
 public:
  static const ::DetectionOptions& options(const DetectionList* msg);
};

const ::DetectionOptions&
DetectionList::HasBitSetters::options(const DetectionList* msg) {
  return *msg->options_;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DetectionList::kDetectionsFieldNumber;
const int DetectionList::kDetectionTimeFieldNumber;
const int DetectionList::kImageWidthFieldNumber;
const int DetectionList::kImageHeightFieldNumber;
const int DetectionList::kDetectionCountFieldNumber;
const int DetectionList::kOptionsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DetectionList::DetectionList()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:DetectionList)
}
DetectionList::DetectionList(const DetectionList& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      detections_(from.detections_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_options()) {
    options_ = new ::DetectionOptions(*from.options_);
  } else {
    options_ = nullptr;
  }
  ::memcpy(&detection_time_, &from.detection_time_,
    static_cast<size_t>(reinterpret_cast<char*>(&detection_count_) -
    reinterpret_cast<char*>(&detection_time_)) + sizeof(detection_count_));
  // @@protoc_insertion_point(copy_constructor:DetectionList)
}

void DetectionList::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_DetectionList_faro_2fproto_2fface_5fservice_2eproto.base);
  ::memset(&options_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&detection_count_) -
      reinterpret_cast<char*>(&options_)) + sizeof(detection_count_));
}

DetectionList::~DetectionList() {
  // @@protoc_insertion_point(destructor:DetectionList)
  SharedDtor();
}

void DetectionList::SharedDtor() {
  if (this != internal_default_instance()) delete options_;
}

void DetectionList::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DetectionList& DetectionList::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DetectionList_faro_2fproto_2fface_5fservice_2eproto.base);
  return *internal_default_instance();
}


void DetectionList::Clear() {
// @@protoc_insertion_point(message_clear_start:DetectionList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  detections_.Clear();
  if (GetArenaNoVirtual() == nullptr && options_ != nullptr) {
    delete options_;
  }
  options_ = nullptr;
  ::memset(&detection_time_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&detection_count_) -
      reinterpret_cast<char*>(&detection_time_)) + sizeof(detection_count_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* DetectionList::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .Detection detections = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_detections(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 10);
        } else goto handle_unusual;
        continue;
      // float detection_time = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          detection_time_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // int32 image_width = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          image_width_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 image_height = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          image_height_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 detection_count = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          detection_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .DetectionOptions options = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(mutable_options(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool DetectionList::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:DetectionList)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .Detection detections = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_detections()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float detection_time = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (21 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &detection_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 image_width = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &image_width_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 image_height = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (32 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &image_height_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 detection_count = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (40 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &detection_count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .DetectionOptions options = 6;
      case 6: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (50 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_options()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:DetectionList)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:DetectionList)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void DetectionList::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:DetectionList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .Detection detections = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->detections_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->detections(static_cast<int>(i)),
      output);
  }

  // float detection_time = 2;
  if (!(this->detection_time() <= 0 && this->detection_time() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(2, this->detection_time(), output);
  }

  // int32 image_width = 3;
  if (this->image_width() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(3, this->image_width(), output);
  }

  // int32 image_height = 4;
  if (this->image_height() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(4, this->image_height(), output);
  }

  // int32 detection_count = 5;
  if (this->detection_count() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(5, this->detection_count(), output);
  }

  // .DetectionOptions options = 6;
  if (this->has_options()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, HasBitSetters::options(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:DetectionList)
}

::PROTOBUF_NAMESPACE_ID::uint8* DetectionList::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:DetectionList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .Detection detections = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->detections_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->detections(static_cast<int>(i)), target);
  }

  // float detection_time = 2;
  if (!(this->detection_time() <= 0 && this->detection_time() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->detection_time(), target);
  }

  // int32 image_width = 3;
  if (this->image_width() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->image_width(), target);
  }

  // int32 image_height = 4;
  if (this->image_height() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->image_height(), target);
  }

  // int32 detection_count = 5;
  if (this->detection_count() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->detection_count(), target);
  }

  // .DetectionOptions options = 6;
  if (this->has_options()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        6, HasBitSetters::options(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DetectionList)
  return target;
}

size_t DetectionList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:DetectionList)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .Detection detections = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->detections_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->detections(static_cast<int>(i)));
    }
  }

  // .DetectionOptions options = 6;
  if (this->has_options()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *options_);
  }

  // float detection_time = 2;
  if (!(this->detection_time() <= 0 && this->detection_time() >= 0)) {
    total_size += 1 + 4;
  }

  // int32 image_width = 3;
  if (this->image_width() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->image_width());
  }

  // int32 image_height = 4;
  if (this->image_height() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->image_height());
  }

  // int32 detection_count = 5;
  if (this->detection_count() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->detection_count());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DetectionList::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:DetectionList)
  GOOGLE_DCHECK_NE(&from, this);
  const DetectionList* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DetectionList>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:DetectionList)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:DetectionList)
    MergeFrom(*source);
  }
}

void DetectionList::MergeFrom(const DetectionList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:DetectionList)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  detections_.MergeFrom(from.detections_);
  if (from.has_options()) {
    mutable_options()->::DetectionOptions::MergeFrom(from.options());
  }
  if (!(from.detection_time() <= 0 && from.detection_time() >= 0)) {
    set_detection_time(from.detection_time());
  }
  if (from.image_width() != 0) {
    set_image_width(from.image_width());
  }
  if (from.image_height() != 0) {
    set_image_height(from.image_height());
  }
  if (from.detection_count() != 0) {
    set_detection_count(from.detection_count());
  }
}

void DetectionList::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:DetectionList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DetectionList::CopyFrom(const DetectionList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:DetectionList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DetectionList::IsInitialized() const {
  return true;
}

void DetectionList::Swap(DetectionList* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DetectionList::InternalSwap(DetectionList* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  CastToBase(&detections_)->InternalSwap(CastToBase(&other->detections_));
  swap(options_, other->options_);
  swap(detection_time_, other->detection_time_);
  swap(image_width_, other->image_width_);
  swap(image_height_, other->image_height_);
  swap(detection_count_, other->detection_count_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DetectionList::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MatchList::InitAsDefaultInstance() {
}
class MatchList::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MatchList::kMatchListFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MatchList::MatchList()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MatchList)
}
MatchList::MatchList(const MatchList& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      match_list_(from.match_list_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:MatchList)
}

void MatchList::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MatchList_faro_2fproto_2fface_5fservice_2eproto.base);
}

MatchList::~MatchList() {
  // @@protoc_insertion_point(destructor:MatchList)
  SharedDtor();
}

void MatchList::SharedDtor() {
}

void MatchList::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MatchList& MatchList::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MatchList_faro_2fproto_2fface_5fservice_2eproto.base);
  return *internal_default_instance();
}


void MatchList::Clear() {
// @@protoc_insertion_point(message_clear_start:MatchList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  match_list_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* MatchList::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .MatchInfo match_list = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_match_list(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 10);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool MatchList::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:MatchList)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .MatchInfo match_list = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_match_list()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MatchList)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MatchList)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void MatchList::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MatchList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .MatchInfo match_list = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->match_list_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->match_list(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MatchList)
}

::PROTOBUF_NAMESPACE_ID::uint8* MatchList::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MatchList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .MatchInfo match_list = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->match_list_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->match_list(static_cast<int>(i)), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MatchList)
  return target;
}

size_t MatchList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:MatchList)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .MatchInfo match_list = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->match_list_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->match_list(static_cast<int>(i)));
    }
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MatchList::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:MatchList)
  GOOGLE_DCHECK_NE(&from, this);
  const MatchList* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MatchList>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:MatchList)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:MatchList)
    MergeFrom(*source);
  }
}

void MatchList::MergeFrom(const MatchList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:MatchList)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  match_list_.MergeFrom(from.match_list_);
}

void MatchList::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:MatchList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MatchList::CopyFrom(const MatchList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:MatchList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MatchList::IsInitialized() const {
  return true;
}

void MatchList::Swap(MatchList* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MatchList::InternalSwap(MatchList* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  CastToBase(&match_list_)->InternalSwap(CastToBase(&other->match_list_));
}

::PROTOBUF_NAMESPACE_ID::Metadata MatchList::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MatchInfo::InitAsDefaultInstance() {
  ::_MatchInfo_default_instance_._instance.get_mutable()->face_ = const_cast< ::Image*>(
      ::Image::internal_default_instance());
}
class MatchInfo::HasBitSetters {
 public:
  static const ::Image& face(const MatchInfo* msg);
};

const ::Image&
MatchInfo::HasBitSetters::face(const MatchInfo* msg) {
  return *msg->face_;
}
void MatchInfo::clear_face() {
  if (GetArenaNoVirtual() == nullptr && face_ != nullptr) {
    delete face_;
  }
  face_ = nullptr;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MatchInfo::kScoreFieldNumber;
const int MatchInfo::kImageIdFieldNumber;
const int MatchInfo::kDetectionIdFieldNumber;
const int MatchInfo::kSubjectIdFieldNumber;
const int MatchInfo::kSubjectNameFieldNumber;
const int MatchInfo::kFaceFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MatchInfo::MatchInfo()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MatchInfo)
}
MatchInfo::MatchInfo(const MatchInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  image_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.image_id().size() > 0) {
    image_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.image_id_);
  }
  detection_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.detection_id().size() > 0) {
    detection_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.detection_id_);
  }
  subject_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.subject_id().size() > 0) {
    subject_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.subject_id_);
  }
  subject_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.subject_name().size() > 0) {
    subject_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.subject_name_);
  }
  if (from.has_face()) {
    face_ = new ::Image(*from.face_);
  } else {
    face_ = nullptr;
  }
  score_ = from.score_;
  // @@protoc_insertion_point(copy_constructor:MatchInfo)
}

void MatchInfo::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MatchInfo_faro_2fproto_2fface_5fservice_2eproto.base);
  image_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  detection_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  subject_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  subject_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&face_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&score_) -
      reinterpret_cast<char*>(&face_)) + sizeof(score_));
}

MatchInfo::~MatchInfo() {
  // @@protoc_insertion_point(destructor:MatchInfo)
  SharedDtor();
}

void MatchInfo::SharedDtor() {
  image_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  detection_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  subject_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  subject_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete face_;
}

void MatchInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MatchInfo& MatchInfo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MatchInfo_faro_2fproto_2fface_5fservice_2eproto.base);
  return *internal_default_instance();
}


void MatchInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:MatchInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  image_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  detection_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  subject_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  subject_name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && face_ != nullptr) {
    delete face_;
  }
  face_ = nullptr;
  score_ = 0;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* MatchInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // float score = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13)) {
          score_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // string image_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_image_id(), ptr, ctx, "MatchInfo.image_id");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string detection_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_detection_id(), ptr, ctx, "MatchInfo.detection_id");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string subject_id = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_subject_id(), ptr, ctx, "MatchInfo.subject_id");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string subject_name = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_subject_name(), ptr, ctx, "MatchInfo.subject_name");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .Image face = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(mutable_face(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool MatchInfo::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:MatchInfo)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // float score = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (13 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &score_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string image_id = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_image_id()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->image_id().data(), static_cast<int>(this->image_id().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "MatchInfo.image_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string detection_id = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_detection_id()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->detection_id().data(), static_cast<int>(this->detection_id().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "MatchInfo.detection_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string subject_id = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (34 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_subject_id()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->subject_id().data(), static_cast<int>(this->subject_id().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "MatchInfo.subject_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string subject_name = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (42 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_subject_name()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->subject_name().data(), static_cast<int>(this->subject_name().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "MatchInfo.subject_name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .Image face = 6;
      case 6: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (50 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_face()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MatchInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MatchInfo)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void MatchInfo::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MatchInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float score = 1;
  if (!(this->score() <= 0 && this->score() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(1, this->score(), output);
  }

  // string image_id = 2;
  if (this->image_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->image_id().data(), static_cast<int>(this->image_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "MatchInfo.image_id");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->image_id(), output);
  }

  // string detection_id = 3;
  if (this->detection_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->detection_id().data(), static_cast<int>(this->detection_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "MatchInfo.detection_id");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->detection_id(), output);
  }

  // string subject_id = 4;
  if (this->subject_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->subject_id().data(), static_cast<int>(this->subject_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "MatchInfo.subject_id");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->subject_id(), output);
  }

  // string subject_name = 5;
  if (this->subject_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->subject_name().data(), static_cast<int>(this->subject_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "MatchInfo.subject_name");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->subject_name(), output);
  }

  // .Image face = 6;
  if (this->has_face()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, HasBitSetters::face(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MatchInfo)
}

::PROTOBUF_NAMESPACE_ID::uint8* MatchInfo::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MatchInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float score = 1;
  if (!(this->score() <= 0 && this->score() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1, this->score(), target);
  }

  // string image_id = 2;
  if (this->image_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->image_id().data(), static_cast<int>(this->image_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "MatchInfo.image_id");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        2, this->image_id(), target);
  }

  // string detection_id = 3;
  if (this->detection_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->detection_id().data(), static_cast<int>(this->detection_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "MatchInfo.detection_id");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        3, this->detection_id(), target);
  }

  // string subject_id = 4;
  if (this->subject_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->subject_id().data(), static_cast<int>(this->subject_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "MatchInfo.subject_id");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        4, this->subject_id(), target);
  }

  // string subject_name = 5;
  if (this->subject_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->subject_name().data(), static_cast<int>(this->subject_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "MatchInfo.subject_name");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        5, this->subject_name(), target);
  }

  // .Image face = 6;
  if (this->has_face()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        6, HasBitSetters::face(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MatchInfo)
  return target;
}

size_t MatchInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:MatchInfo)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string image_id = 2;
  if (this->image_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->image_id());
  }

  // string detection_id = 3;
  if (this->detection_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->detection_id());
  }

  // string subject_id = 4;
  if (this->subject_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->subject_id());
  }

  // string subject_name = 5;
  if (this->subject_name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->subject_name());
  }

  // .Image face = 6;
  if (this->has_face()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *face_);
  }

  // float score = 1;
  if (!(this->score() <= 0 && this->score() >= 0)) {
    total_size += 1 + 4;
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MatchInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:MatchInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const MatchInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MatchInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:MatchInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:MatchInfo)
    MergeFrom(*source);
  }
}

void MatchInfo::MergeFrom(const MatchInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:MatchInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.image_id().size() > 0) {

    image_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.image_id_);
  }
  if (from.detection_id().size() > 0) {

    detection_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.detection_id_);
  }
  if (from.subject_id().size() > 0) {

    subject_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.subject_id_);
  }
  if (from.subject_name().size() > 0) {

    subject_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.subject_name_);
  }
  if (from.has_face()) {
    mutable_face()->::Image::MergeFrom(from.face());
  }
  if (!(from.score() <= 0 && from.score() >= 0)) {
    set_score(from.score());
  }
}

void MatchInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:MatchInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MatchInfo::CopyFrom(const MatchInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:MatchInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MatchInfo::IsInitialized() const {
  return true;
}

void MatchInfo::Swap(MatchInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MatchInfo::InternalSwap(MatchInfo* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  image_id_.Swap(&other->image_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  detection_id_.Swap(&other->detection_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  subject_id_.Swap(&other->subject_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  subject_name_.Swap(&other->subject_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(face_, other->face_);
  swap(score_, other->score_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MatchInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void TemplateInput::InitAsDefaultInstance() {
  ::_TemplateInput_default_instance_._instance.get_mutable()->im_ = const_cast< ::Image*>(
      ::Image::internal_default_instance());
}
class TemplateInput::HasBitSetters {
 public:
  static const ::Image& im(const TemplateInput* msg);
};

const ::Image&
TemplateInput::HasBitSetters::im(const TemplateInput* msg) {
  return *msg->im_;
}
void TemplateInput::clear_im() {
  if (GetArenaNoVirtual() == nullptr && im_ != nullptr) {
    delete im_;
  }
  im_ = nullptr;
}
void TemplateInput::clear_detections() {
  detections_.Clear();
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TemplateInput::kImFieldNumber;
const int TemplateInput::kDetectionsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TemplateInput::TemplateInput()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:TemplateInput)
}
TemplateInput::TemplateInput(const TemplateInput& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      detections_(from.detections_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_im()) {
    im_ = new ::Image(*from.im_);
  } else {
    im_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:TemplateInput)
}

void TemplateInput::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_TemplateInput_faro_2fproto_2fface_5fservice_2eproto.base);
  im_ = nullptr;
}

TemplateInput::~TemplateInput() {
  // @@protoc_insertion_point(destructor:TemplateInput)
  SharedDtor();
}

void TemplateInput::SharedDtor() {
  if (this != internal_default_instance()) delete im_;
}

void TemplateInput::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TemplateInput& TemplateInput::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TemplateInput_faro_2fproto_2fface_5fservice_2eproto.base);
  return *internal_default_instance();
}


void TemplateInput::Clear() {
// @@protoc_insertion_point(message_clear_start:TemplateInput)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  detections_.Clear();
  if (GetArenaNoVirtual() == nullptr && im_ != nullptr) {
    delete im_;
  }
  im_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* TemplateInput::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .Image im = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_im(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .Rect detections = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_detections(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 18);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool TemplateInput::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:TemplateInput)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .Image im = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_im()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .Rect detections = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_detections()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:TemplateInput)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:TemplateInput)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void TemplateInput::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:TemplateInput)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .Image im = 1;
  if (this->has_im()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::im(this), output);
  }

  // repeated .Rect detections = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->detections_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      2,
      this->detections(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:TemplateInput)
}

::PROTOBUF_NAMESPACE_ID::uint8* TemplateInput::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:TemplateInput)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .Image im = 1;
  if (this->has_im()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::im(this), target);
  }

  // repeated .Rect detections = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->detections_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->detections(static_cast<int>(i)), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TemplateInput)
  return target;
}

size_t TemplateInput::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TemplateInput)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .Rect detections = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->detections_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->detections(static_cast<int>(i)));
    }
  }

  // .Image im = 1;
  if (this->has_im()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *im_);
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TemplateInput::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TemplateInput)
  GOOGLE_DCHECK_NE(&from, this);
  const TemplateInput* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TemplateInput>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TemplateInput)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TemplateInput)
    MergeFrom(*source);
  }
}

void TemplateInput::MergeFrom(const TemplateInput& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TemplateInput)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  detections_.MergeFrom(from.detections_);
  if (from.has_im()) {
    mutable_im()->::Image::MergeFrom(from.im());
  }
}

void TemplateInput::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TemplateInput)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TemplateInput::CopyFrom(const TemplateInput& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TemplateInput)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TemplateInput::IsInitialized() const {
  return true;
}

void TemplateInput::Swap(TemplateInput* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TemplateInput::InternalSwap(TemplateInput* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  CastToBase(&detections_)->InternalSwap(CastToBase(&other->detections_));
  swap(im_, other->im_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TemplateInput::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void FaceTemplate::InitAsDefaultInstance() {
  ::_FaceTemplate_default_instance_._instance.get_mutable()->data_ = const_cast< ::Vector*>(
      ::Vector::internal_default_instance());
}
class FaceTemplate::HasBitSetters {
 public:
  static const ::Vector& data(const FaceTemplate* msg);
};

const ::Vector&
FaceTemplate::HasBitSetters::data(const FaceTemplate* msg) {
  return *msg->data_;
}
void FaceTemplate::clear_data() {
  if (GetArenaNoVirtual() == nullptr && data_ != nullptr) {
    delete data_;
  }
  data_ = nullptr;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int FaceTemplate::kDataFieldNumber;
const int FaceTemplate::kBufferFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

FaceTemplate::FaceTemplate()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:FaceTemplate)
}
FaceTemplate::FaceTemplate(const FaceTemplate& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  buffer_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.buffer().size() > 0) {
    buffer_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.buffer_);
  }
  if (from.has_data()) {
    data_ = new ::Vector(*from.data_);
  } else {
    data_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:FaceTemplate)
}

void FaceTemplate::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_FaceTemplate_faro_2fproto_2fface_5fservice_2eproto.base);
  buffer_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  data_ = nullptr;
}

FaceTemplate::~FaceTemplate() {
  // @@protoc_insertion_point(destructor:FaceTemplate)
  SharedDtor();
}

void FaceTemplate::SharedDtor() {
  buffer_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete data_;
}

void FaceTemplate::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const FaceTemplate& FaceTemplate::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_FaceTemplate_faro_2fproto_2fface_5fservice_2eproto.base);
  return *internal_default_instance();
}


void FaceTemplate::Clear() {
// @@protoc_insertion_point(message_clear_start:FaceTemplate)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  buffer_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && data_ != nullptr) {
    delete data_;
  }
  data_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* FaceTemplate::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .Vector data = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_data(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes buffer = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_buffer(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool FaceTemplate::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:FaceTemplate)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .Vector data = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes buffer = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadBytes(
                input, this->mutable_buffer()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:FaceTemplate)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:FaceTemplate)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void FaceTemplate::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:FaceTemplate)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .Vector data = 1;
  if (this->has_data()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::data(this), output);
  }

  // bytes buffer = 2;
  if (this->buffer().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->buffer(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:FaceTemplate)
}

::PROTOBUF_NAMESPACE_ID::uint8* FaceTemplate::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:FaceTemplate)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .Vector data = 1;
  if (this->has_data()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::data(this), target);
  }

  // bytes buffer = 2;
  if (this->buffer().size() > 0) {
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesToArray(
        2, this->buffer(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:FaceTemplate)
  return target;
}

size_t FaceTemplate::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:FaceTemplate)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes buffer = 2;
  if (this->buffer().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->buffer());
  }

  // .Vector data = 1;
  if (this->has_data()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *data_);
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FaceTemplate::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:FaceTemplate)
  GOOGLE_DCHECK_NE(&from, this);
  const FaceTemplate* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<FaceTemplate>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:FaceTemplate)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:FaceTemplate)
    MergeFrom(*source);
  }
}

void FaceTemplate::MergeFrom(const FaceTemplate& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:FaceTemplate)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.buffer().size() > 0) {

    buffer_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.buffer_);
  }
  if (from.has_data()) {
    mutable_data()->::Vector::MergeFrom(from.data());
  }
}

void FaceTemplate::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:FaceTemplate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FaceTemplate::CopyFrom(const FaceTemplate& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:FaceTemplate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FaceTemplate::IsInitialized() const {
  return true;
}

void FaceTemplate::Swap(FaceTemplate* other) {
  if (other == this) return;
  InternalSwap(other);
}
void FaceTemplate::InternalSwap(FaceTemplate* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  buffer_.Swap(&other->buffer_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(data_, other->data_);
}

::PROTOBUF_NAMESPACE_ID::Metadata FaceTemplate::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void TemplateList::InitAsDefaultInstance() {
}
class TemplateList::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TemplateList::kTemplatesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TemplateList::TemplateList()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:TemplateList)
}
TemplateList::TemplateList(const TemplateList& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      templates_(from.templates_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:TemplateList)
}

void TemplateList::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_TemplateList_faro_2fproto_2fface_5fservice_2eproto.base);
}

TemplateList::~TemplateList() {
  // @@protoc_insertion_point(destructor:TemplateList)
  SharedDtor();
}

void TemplateList::SharedDtor() {
}

void TemplateList::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TemplateList& TemplateList::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TemplateList_faro_2fproto_2fface_5fservice_2eproto.base);
  return *internal_default_instance();
}


void TemplateList::Clear() {
// @@protoc_insertion_point(message_clear_start:TemplateList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  templates_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* TemplateList::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .FaceTemplate templates = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_templates(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 10);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool TemplateList::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:TemplateList)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .FaceTemplate templates = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_templates()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:TemplateList)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:TemplateList)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void TemplateList::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:TemplateList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .FaceTemplate templates = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->templates_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->templates(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:TemplateList)
}

::PROTOBUF_NAMESPACE_ID::uint8* TemplateList::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:TemplateList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .FaceTemplate templates = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->templates_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->templates(static_cast<int>(i)), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TemplateList)
  return target;
}

size_t TemplateList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TemplateList)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .FaceTemplate templates = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->templates_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->templates(static_cast<int>(i)));
    }
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TemplateList::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TemplateList)
  GOOGLE_DCHECK_NE(&from, this);
  const TemplateList* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TemplateList>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TemplateList)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TemplateList)
    MergeFrom(*source);
  }
}

void TemplateList::MergeFrom(const TemplateList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TemplateList)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  templates_.MergeFrom(from.templates_);
}

void TemplateList::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TemplateList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TemplateList::CopyFrom(const TemplateList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TemplateList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TemplateList::IsInitialized() const {
  return true;
}

void TemplateList::Swap(TemplateList* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TemplateList::InternalSwap(TemplateList* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  CastToBase(&templates_)->InternalSwap(CastToBase(&other->templates_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TemplateList::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void AccessRecord::InitAsDefaultInstance() {
}
class AccessRecord::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AccessRecord::kDatetimeFieldNumber;
const int AccessRecord::kNotesFieldNumber;
const int AccessRecord::kCredentialFieldNumber;
const int AccessRecord::kMetadataFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AccessRecord::AccessRecord()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:AccessRecord)
}
AccessRecord::AccessRecord(const AccessRecord& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      metadata_(from.metadata_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  notes_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.notes().size() > 0) {
    notes_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.notes_);
  }
  credential_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.credential().size() > 0) {
    credential_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.credential_);
  }
  datetime_ = from.datetime_;
  // @@protoc_insertion_point(copy_constructor:AccessRecord)
}

void AccessRecord::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_AccessRecord_faro_2fproto_2fface_5fservice_2eproto.base);
  notes_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  credential_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  datetime_ = 0;
}

AccessRecord::~AccessRecord() {
  // @@protoc_insertion_point(destructor:AccessRecord)
  SharedDtor();
}

void AccessRecord::SharedDtor() {
  notes_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  credential_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void AccessRecord::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AccessRecord& AccessRecord::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AccessRecord_faro_2fproto_2fface_5fservice_2eproto.base);
  return *internal_default_instance();
}


void AccessRecord::Clear() {
// @@protoc_insertion_point(message_clear_start:AccessRecord)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  metadata_.Clear();
  notes_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  credential_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  datetime_ = 0;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* AccessRecord::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // float datetime = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13)) {
          datetime_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // string notes = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_notes(), ptr, ctx, "AccessRecord.notes");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string credential = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_credential(), ptr, ctx, "AccessRecord.credential");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .Attribute metadata = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_metadata(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 34);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool AccessRecord::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:AccessRecord)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // float datetime = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (13 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &datetime_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string notes = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_notes()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->notes().data(), static_cast<int>(this->notes().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "AccessRecord.notes"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string credential = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_credential()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->credential().data(), static_cast<int>(this->credential().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "AccessRecord.credential"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .Attribute metadata = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (34 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_metadata()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:AccessRecord)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:AccessRecord)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void AccessRecord::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:AccessRecord)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float datetime = 1;
  if (!(this->datetime() <= 0 && this->datetime() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(1, this->datetime(), output);
  }

  // string notes = 2;
  if (this->notes().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->notes().data(), static_cast<int>(this->notes().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "AccessRecord.notes");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->notes(), output);
  }

  // string credential = 3;
  if (this->credential().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->credential().data(), static_cast<int>(this->credential().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "AccessRecord.credential");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->credential(), output);
  }

  // repeated .Attribute metadata = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->metadata_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      4,
      this->metadata(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:AccessRecord)
}

::PROTOBUF_NAMESPACE_ID::uint8* AccessRecord::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:AccessRecord)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float datetime = 1;
  if (!(this->datetime() <= 0 && this->datetime() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1, this->datetime(), target);
  }

  // string notes = 2;
  if (this->notes().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->notes().data(), static_cast<int>(this->notes().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "AccessRecord.notes");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        2, this->notes(), target);
  }

  // string credential = 3;
  if (this->credential().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->credential().data(), static_cast<int>(this->credential().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "AccessRecord.credential");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        3, this->credential(), target);
  }

  // repeated .Attribute metadata = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->metadata_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, this->metadata(static_cast<int>(i)), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:AccessRecord)
  return target;
}

size_t AccessRecord::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:AccessRecord)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .Attribute metadata = 4;
  {
    unsigned int count = static_cast<unsigned int>(this->metadata_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->metadata(static_cast<int>(i)));
    }
  }

  // string notes = 2;
  if (this->notes().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->notes());
  }

  // string credential = 3;
  if (this->credential().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->credential());
  }

  // float datetime = 1;
  if (!(this->datetime() <= 0 && this->datetime() >= 0)) {
    total_size += 1 + 4;
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AccessRecord::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:AccessRecord)
  GOOGLE_DCHECK_NE(&from, this);
  const AccessRecord* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AccessRecord>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:AccessRecord)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:AccessRecord)
    MergeFrom(*source);
  }
}

void AccessRecord::MergeFrom(const AccessRecord& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:AccessRecord)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  metadata_.MergeFrom(from.metadata_);
  if (from.notes().size() > 0) {

    notes_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.notes_);
  }
  if (from.credential().size() > 0) {

    credential_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.credential_);
  }
  if (!(from.datetime() <= 0 && from.datetime() >= 0)) {
    set_datetime(from.datetime());
  }
}

void AccessRecord::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:AccessRecord)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AccessRecord::CopyFrom(const AccessRecord& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:AccessRecord)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AccessRecord::IsInitialized() const {
  return true;
}

void AccessRecord::Swap(AccessRecord* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AccessRecord::InternalSwap(AccessRecord* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  CastToBase(&metadata_)->InternalSwap(CastToBase(&other->metadata_));
  notes_.Swap(&other->notes_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  credential_.Swap(&other->credential_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(datetime_, other->datetime_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AccessRecord::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void FaceRecord::InitAsDefaultInstance() {
  ::_FaceRecord_default_instance_._instance.get_mutable()->view_ = const_cast< ::Image*>(
      ::Image::internal_default_instance());
  ::_FaceRecord_default_instance_._instance.get_mutable()->aligned_ = const_cast< ::Image*>(
      ::Image::internal_default_instance());
  ::_FaceRecord_default_instance_._instance.get_mutable()->detection_ = const_cast< ::Detection*>(
      ::Detection::internal_default_instance());
  ::_FaceRecord_default_instance_._instance.get_mutable()->template__ = const_cast< ::FaceTemplate*>(
      ::FaceTemplate::internal_default_instance());
  ::_FaceRecord_default_instance_._instance.get_mutable()->search_results_ = const_cast< ::FaceRecordList*>(
      ::FaceRecordList::internal_default_instance());
}
class FaceRecord::HasBitSetters {
 public:
  static const ::Image& view(const FaceRecord* msg);
  static const ::Image& aligned(const FaceRecord* msg);
  static const ::Detection& detection(const FaceRecord* msg);
  static const ::FaceTemplate& template_(const FaceRecord* msg);
  static const ::FaceRecordList& search_results(const FaceRecord* msg);
};

const ::Image&
FaceRecord::HasBitSetters::view(const FaceRecord* msg) {
  return *msg->view_;
}
const ::Image&
FaceRecord::HasBitSetters::aligned(const FaceRecord* msg) {
  return *msg->aligned_;
}
const ::Detection&
FaceRecord::HasBitSetters::detection(const FaceRecord* msg) {
  return *msg->detection_;
}
const ::FaceTemplate&
FaceRecord::HasBitSetters::template_(const FaceRecord* msg) {
  return *msg->template__;
}
const ::FaceRecordList&
FaceRecord::HasBitSetters::search_results(const FaceRecord* msg) {
  return *msg->search_results_;
}
void FaceRecord::clear_view() {
  if (GetArenaNoVirtual() == nullptr && view_ != nullptr) {
    delete view_;
  }
  view_ = nullptr;
}
void FaceRecord::clear_aligned() {
  if (GetArenaNoVirtual() == nullptr && aligned_ != nullptr) {
    delete aligned_;
  }
  aligned_ = nullptr;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int FaceRecord::kSubjectIdFieldNumber;
const int FaceRecord::kNameFieldNumber;
const int FaceRecord::kSourceFieldNumber;
const int FaceRecord::kFrameFieldNumber;
const int FaceRecord::kNotesFieldNumber;
const int FaceRecord::kGalleryKeyFieldNumber;
const int FaceRecord::kCollectionDateFieldNumber;
const int FaceRecord::kEnrollmentDateFieldNumber;
const int FaceRecord::kMetadataFieldNumber;
const int FaceRecord::kAccessRecordsFieldNumber;
const int FaceRecord::kViewFieldNumber;
const int FaceRecord::kAlignedFieldNumber;
const int FaceRecord::kDetectionFieldNumber;
const int FaceRecord::kLandmarksFieldNumber;
const int FaceRecord::kAttributesFieldNumber;
const int FaceRecord::kInternalDataFieldNumber;
const int FaceRecord::kTemplateFieldNumber;
const int FaceRecord::kScoreFieldNumber;
const int FaceRecord::kSearchResultsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

FaceRecord::FaceRecord()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:FaceRecord)
}
FaceRecord::FaceRecord(const FaceRecord& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      landmarks_(from.landmarks_),
      attributes_(from.attributes_),
      internal_data_(from.internal_data_),
      metadata_(from.metadata_),
      access_records_(from.access_records_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  subject_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.subject_id().size() > 0) {
    subject_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.subject_id_);
  }
  source_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.source().size() > 0) {
    source_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.source_);
  }
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.name().size() > 0) {
    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  notes_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.notes().size() > 0) {
    notes_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.notes_);
  }
  gallery_key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.gallery_key().size() > 0) {
    gallery_key_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.gallery_key_);
  }
  if (from.has_detection()) {
    detection_ = new ::Detection(*from.detection_);
  } else {
    detection_ = nullptr;
  }
  if (from.has_template_()) {
    template__ = new ::FaceTemplate(*from.template__);
  } else {
    template__ = nullptr;
  }
  if (from.has_view()) {
    view_ = new ::Image(*from.view_);
  } else {
    view_ = nullptr;
  }
  if (from.has_aligned()) {
    aligned_ = new ::Image(*from.aligned_);
  } else {
    aligned_ = nullptr;
  }
  if (from.has_search_results()) {
    search_results_ = new ::FaceRecordList(*from.search_results_);
  } else {
    search_results_ = nullptr;
  }
  ::memcpy(&frame_, &from.frame_,
    static_cast<size_t>(reinterpret_cast<char*>(&enrollment_date_) -
    reinterpret_cast<char*>(&frame_)) + sizeof(enrollment_date_));
  // @@protoc_insertion_point(copy_constructor:FaceRecord)
}

void FaceRecord::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_FaceRecord_faro_2fproto_2fface_5fservice_2eproto.base);
  subject_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  source_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  notes_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  gallery_key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&detection_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&enrollment_date_) -
      reinterpret_cast<char*>(&detection_)) + sizeof(enrollment_date_));
}

FaceRecord::~FaceRecord() {
  // @@protoc_insertion_point(destructor:FaceRecord)
  SharedDtor();
}

void FaceRecord::SharedDtor() {
  subject_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  source_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  notes_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  gallery_key_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete detection_;
  if (this != internal_default_instance()) delete template__;
  if (this != internal_default_instance()) delete view_;
  if (this != internal_default_instance()) delete aligned_;
  if (this != internal_default_instance()) delete search_results_;
}

void FaceRecord::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const FaceRecord& FaceRecord::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_FaceRecord_faro_2fproto_2fface_5fservice_2eproto.base);
  return *internal_default_instance();
}


void FaceRecord::Clear() {
// @@protoc_insertion_point(message_clear_start:FaceRecord)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  landmarks_.Clear();
  attributes_.Clear();
  internal_data_.Clear();
  metadata_.Clear();
  access_records_.Clear();
  subject_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  source_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  notes_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  gallery_key_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && detection_ != nullptr) {
    delete detection_;
  }
  detection_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && template__ != nullptr) {
    delete template__;
  }
  template__ = nullptr;
  if (GetArenaNoVirtual() == nullptr && view_ != nullptr) {
    delete view_;
  }
  view_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && aligned_ != nullptr) {
    delete aligned_;
  }
  aligned_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && search_results_ != nullptr) {
    delete search_results_;
  }
  search_results_ = nullptr;
  ::memset(&frame_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&enrollment_date_) -
      reinterpret_cast<char*>(&frame_)) + sizeof(enrollment_date_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* FaceRecord::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string subject_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_subject_id(), ptr, ctx, "FaceRecord.subject_id");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .Detection detection = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(mutable_detection(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .FaceTemplate template = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(mutable_template_(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string source = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_source(), ptr, ctx, "FaceRecord.source");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string name = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_name(), ptr, ctx, "FaceRecord.name");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string notes = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_notes(), ptr, ctx, "FaceRecord.notes");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .Image view = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(mutable_view(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .Landmark landmarks = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_landmarks(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 66);
        } else goto handle_unusual;
        continue;
      // .Image aligned = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr = ctx->ParseMessage(mutable_aligned(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .Attribute attributes = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_attributes(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 82);
        } else goto handle_unusual;
        continue;
      // repeated .Attribute internal_data = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_internal_data(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 90);
        } else goto handle_unusual;
        continue;
      // float score = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 101)) {
          score_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // .FaceRecordList search_results = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 106)) {
          ptr = ctx->ParseMessage(mutable_search_results(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 frame = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 112)) {
          frame_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string gallery_key = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 122)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_gallery_key(), ptr, ctx, "FaceRecord.gallery_key");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // float collection_date = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 133)) {
          collection_date_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float enrollment_date = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 141)) {
          enrollment_date_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // repeated .Attribute metadata = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 146)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(add_metadata(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint16>(ptr) == 402);
        } else goto handle_unusual;
        continue;
      // repeated .AccessRecord access_records = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 154)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(add_access_records(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint16>(ptr) == 410);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool FaceRecord::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:FaceRecord)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string subject_id = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_subject_id()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->subject_id().data(), static_cast<int>(this->subject_id().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "FaceRecord.subject_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .Detection detection = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_detection()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .FaceTemplate template = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_template_()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string source = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (34 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_source()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->source().data(), static_cast<int>(this->source().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "FaceRecord.source"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string name = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (42 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), static_cast<int>(this->name().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "FaceRecord.name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string notes = 6;
      case 6: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (50 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_notes()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->notes().data(), static_cast<int>(this->notes().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "FaceRecord.notes"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .Image view = 7;
      case 7: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (58 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_view()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .Landmark landmarks = 8;
      case 8: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (66 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_landmarks()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .Image aligned = 9;
      case 9: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (74 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_aligned()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .Attribute attributes = 10;
      case 10: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (82 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_attributes()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .Attribute internal_data = 11;
      case 11: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (90 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_internal_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float score = 12;
      case 12: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (101 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &score_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .FaceRecordList search_results = 13;
      case 13: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (106 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_search_results()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 frame = 14;
      case 14: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (112 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &frame_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string gallery_key = 15;
      case 15: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (122 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_gallery_key()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->gallery_key().data(), static_cast<int>(this->gallery_key().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "FaceRecord.gallery_key"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float collection_date = 16;
      case 16: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (133 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &collection_date_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float enrollment_date = 17;
      case 17: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (141 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &enrollment_date_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .Attribute metadata = 18;
      case 18: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (146 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_metadata()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .AccessRecord access_records = 19;
      case 19: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (154 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_access_records()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:FaceRecord)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:FaceRecord)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void FaceRecord::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:FaceRecord)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string subject_id = 1;
  if (this->subject_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->subject_id().data(), static_cast<int>(this->subject_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "FaceRecord.subject_id");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->subject_id(), output);
  }

  // .Detection detection = 2;
  if (this->has_detection()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, HasBitSetters::detection(this), output);
  }

  // .FaceTemplate template = 3;
  if (this->has_template_()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, HasBitSetters::template_(this), output);
  }

  // string source = 4;
  if (this->source().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->source().data(), static_cast<int>(this->source().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "FaceRecord.source");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->source(), output);
  }

  // string name = 5;
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "FaceRecord.name");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->name(), output);
  }

  // string notes = 6;
  if (this->notes().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->notes().data(), static_cast<int>(this->notes().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "FaceRecord.notes");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->notes(), output);
  }

  // .Image view = 7;
  if (this->has_view()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, HasBitSetters::view(this), output);
  }

  // repeated .Landmark landmarks = 8;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->landmarks_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      8,
      this->landmarks(static_cast<int>(i)),
      output);
  }

  // .Image aligned = 9;
  if (this->has_aligned()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, HasBitSetters::aligned(this), output);
  }

  // repeated .Attribute attributes = 10;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->attributes_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      10,
      this->attributes(static_cast<int>(i)),
      output);
  }

  // repeated .Attribute internal_data = 11;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->internal_data_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      11,
      this->internal_data(static_cast<int>(i)),
      output);
  }

  // float score = 12;
  if (!(this->score() <= 0 && this->score() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(12, this->score(), output);
  }

  // .FaceRecordList search_results = 13;
  if (this->has_search_results()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      13, HasBitSetters::search_results(this), output);
  }

  // int64 frame = 14;
  if (this->frame() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(14, this->frame(), output);
  }

  // string gallery_key = 15;
  if (this->gallery_key().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->gallery_key().data(), static_cast<int>(this->gallery_key().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "FaceRecord.gallery_key");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      15, this->gallery_key(), output);
  }

  // float collection_date = 16;
  if (!(this->collection_date() <= 0 && this->collection_date() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(16, this->collection_date(), output);
  }

  // float enrollment_date = 17;
  if (!(this->enrollment_date() <= 0 && this->enrollment_date() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(17, this->enrollment_date(), output);
  }

  // repeated .Attribute metadata = 18;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->metadata_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      18,
      this->metadata(static_cast<int>(i)),
      output);
  }

  // repeated .AccessRecord access_records = 19;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->access_records_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      19,
      this->access_records(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:FaceRecord)
}

::PROTOBUF_NAMESPACE_ID::uint8* FaceRecord::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:FaceRecord)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string subject_id = 1;
  if (this->subject_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->subject_id().data(), static_cast<int>(this->subject_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "FaceRecord.subject_id");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        1, this->subject_id(), target);
  }

  // .Detection detection = 2;
  if (this->has_detection()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, HasBitSetters::detection(this), target);
  }

  // .FaceTemplate template = 3;
  if (this->has_template_()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, HasBitSetters::template_(this), target);
  }

  // string source = 4;
  if (this->source().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->source().data(), static_cast<int>(this->source().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "FaceRecord.source");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        4, this->source(), target);
  }

  // string name = 5;
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "FaceRecord.name");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        5, this->name(), target);
  }

  // string notes = 6;
  if (this->notes().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->notes().data(), static_cast<int>(this->notes().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "FaceRecord.notes");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        6, this->notes(), target);
  }

  // .Image view = 7;
  if (this->has_view()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        7, HasBitSetters::view(this), target);
  }

  // repeated .Landmark landmarks = 8;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->landmarks_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        8, this->landmarks(static_cast<int>(i)), target);
  }

  // .Image aligned = 9;
  if (this->has_aligned()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        9, HasBitSetters::aligned(this), target);
  }

  // repeated .Attribute attributes = 10;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->attributes_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        10, this->attributes(static_cast<int>(i)), target);
  }

  // repeated .Attribute internal_data = 11;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->internal_data_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        11, this->internal_data(static_cast<int>(i)), target);
  }

  // float score = 12;
  if (!(this->score() <= 0 && this->score() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(12, this->score(), target);
  }

  // .FaceRecordList search_results = 13;
  if (this->has_search_results()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        13, HasBitSetters::search_results(this), target);
  }

  // int64 frame = 14;
  if (this->frame() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(14, this->frame(), target);
  }

  // string gallery_key = 15;
  if (this->gallery_key().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->gallery_key().data(), static_cast<int>(this->gallery_key().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "FaceRecord.gallery_key");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        15, this->gallery_key(), target);
  }

  // float collection_date = 16;
  if (!(this->collection_date() <= 0 && this->collection_date() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(16, this->collection_date(), target);
  }

  // float enrollment_date = 17;
  if (!(this->enrollment_date() <= 0 && this->enrollment_date() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(17, this->enrollment_date(), target);
  }

  // repeated .Attribute metadata = 18;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->metadata_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        18, this->metadata(static_cast<int>(i)), target);
  }

  // repeated .AccessRecord access_records = 19;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->access_records_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        19, this->access_records(static_cast<int>(i)), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:FaceRecord)
  return target;
}

size_t FaceRecord::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:FaceRecord)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .Landmark landmarks = 8;
  {
    unsigned int count = static_cast<unsigned int>(this->landmarks_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->landmarks(static_cast<int>(i)));
    }
  }

  // repeated .Attribute attributes = 10;
  {
    unsigned int count = static_cast<unsigned int>(this->attributes_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->attributes(static_cast<int>(i)));
    }
  }

  // repeated .Attribute internal_data = 11;
  {
    unsigned int count = static_cast<unsigned int>(this->internal_data_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->internal_data(static_cast<int>(i)));
    }
  }

  // repeated .Attribute metadata = 18;
  {
    unsigned int count = static_cast<unsigned int>(this->metadata_size());
    total_size += 2UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->metadata(static_cast<int>(i)));
    }
  }

  // repeated .AccessRecord access_records = 19;
  {
    unsigned int count = static_cast<unsigned int>(this->access_records_size());
    total_size += 2UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->access_records(static_cast<int>(i)));
    }
  }

  // string subject_id = 1;
  if (this->subject_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->subject_id());
  }

  // string source = 4;
  if (this->source().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->source());
  }

  // string name = 5;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->name());
  }

  // string notes = 6;
  if (this->notes().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->notes());
  }

  // string gallery_key = 15;
  if (this->gallery_key().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->gallery_key());
  }

  // .Detection detection = 2;
  if (this->has_detection()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *detection_);
  }

  // .FaceTemplate template = 3;
  if (this->has_template_()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *template__);
  }

  // .Image view = 7;
  if (this->has_view()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *view_);
  }

  // .Image aligned = 9;
  if (this->has_aligned()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *aligned_);
  }

  // .FaceRecordList search_results = 13;
  if (this->has_search_results()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *search_results_);
  }

  // int64 frame = 14;
  if (this->frame() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->frame());
  }

  // float score = 12;
  if (!(this->score() <= 0 && this->score() >= 0)) {
    total_size += 1 + 4;
  }

  // float collection_date = 16;
  if (!(this->collection_date() <= 0 && this->collection_date() >= 0)) {
    total_size += 2 + 4;
  }

  // float enrollment_date = 17;
  if (!(this->enrollment_date() <= 0 && this->enrollment_date() >= 0)) {
    total_size += 2 + 4;
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FaceRecord::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:FaceRecord)
  GOOGLE_DCHECK_NE(&from, this);
  const FaceRecord* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<FaceRecord>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:FaceRecord)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:FaceRecord)
    MergeFrom(*source);
  }
}

void FaceRecord::MergeFrom(const FaceRecord& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:FaceRecord)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  landmarks_.MergeFrom(from.landmarks_);
  attributes_.MergeFrom(from.attributes_);
  internal_data_.MergeFrom(from.internal_data_);
  metadata_.MergeFrom(from.metadata_);
  access_records_.MergeFrom(from.access_records_);
  if (from.subject_id().size() > 0) {

    subject_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.subject_id_);
  }
  if (from.source().size() > 0) {

    source_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.source_);
  }
  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.notes().size() > 0) {

    notes_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.notes_);
  }
  if (from.gallery_key().size() > 0) {

    gallery_key_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.gallery_key_);
  }
  if (from.has_detection()) {
    mutable_detection()->::Detection::MergeFrom(from.detection());
  }
  if (from.has_template_()) {
    mutable_template_()->::FaceTemplate::MergeFrom(from.template_());
  }
  if (from.has_view()) {
    mutable_view()->::Image::MergeFrom(from.view());
  }
  if (from.has_aligned()) {
    mutable_aligned()->::Image::MergeFrom(from.aligned());
  }
  if (from.has_search_results()) {
    mutable_search_results()->::FaceRecordList::MergeFrom(from.search_results());
  }
  if (from.frame() != 0) {
    set_frame(from.frame());
  }
  if (!(from.score() <= 0 && from.score() >= 0)) {
    set_score(from.score());
  }
  if (!(from.collection_date() <= 0 && from.collection_date() >= 0)) {
    set_collection_date(from.collection_date());
  }
  if (!(from.enrollment_date() <= 0 && from.enrollment_date() >= 0)) {
    set_enrollment_date(from.enrollment_date());
  }
}

void FaceRecord::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:FaceRecord)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FaceRecord::CopyFrom(const FaceRecord& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:FaceRecord)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FaceRecord::IsInitialized() const {
  return true;
}

void FaceRecord::Swap(FaceRecord* other) {
  if (other == this) return;
  InternalSwap(other);
}
void FaceRecord::InternalSwap(FaceRecord* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  CastToBase(&landmarks_)->InternalSwap(CastToBase(&other->landmarks_));
  CastToBase(&attributes_)->InternalSwap(CastToBase(&other->attributes_));
  CastToBase(&internal_data_)->InternalSwap(CastToBase(&other->internal_data_));
  CastToBase(&metadata_)->InternalSwap(CastToBase(&other->metadata_));
  CastToBase(&access_records_)->InternalSwap(CastToBase(&other->access_records_));
  subject_id_.Swap(&other->subject_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  source_.Swap(&other->source_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  notes_.Swap(&other->notes_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  gallery_key_.Swap(&other->gallery_key_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(detection_, other->detection_);
  swap(template__, other->template__);
  swap(view_, other->view_);
  swap(aligned_, other->aligned_);
  swap(search_results_, other->search_results_);
  swap(frame_, other->frame_);
  swap(score_, other->score_);
  swap(collection_date_, other->collection_date_);
  swap(enrollment_date_, other->enrollment_date_);
}

::PROTOBUF_NAMESPACE_ID::Metadata FaceRecord::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void FaceRecordList::InitAsDefaultInstance() {
}
class FaceRecordList::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int FaceRecordList::kFaceRecordsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

FaceRecordList::FaceRecordList()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:FaceRecordList)
}
FaceRecordList::FaceRecordList(const FaceRecordList& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      face_records_(from.face_records_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:FaceRecordList)
}

void FaceRecordList::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_FaceRecord_faro_2fproto_2fface_5fservice_2eproto.base);
}

FaceRecordList::~FaceRecordList() {
  // @@protoc_insertion_point(destructor:FaceRecordList)
  SharedDtor();
}

void FaceRecordList::SharedDtor() {
}

void FaceRecordList::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const FaceRecordList& FaceRecordList::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_FaceRecord_faro_2fproto_2fface_5fservice_2eproto.base);
  return *internal_default_instance();
}


void FaceRecordList::Clear() {
// @@protoc_insertion_point(message_clear_start:FaceRecordList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  face_records_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* FaceRecordList::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .FaceRecord face_records = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_face_records(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 10);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool FaceRecordList::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:FaceRecordList)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .FaceRecord face_records = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_face_records()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:FaceRecordList)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:FaceRecordList)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void FaceRecordList::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:FaceRecordList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .FaceRecord face_records = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->face_records_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->face_records(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:FaceRecordList)
}

::PROTOBUF_NAMESPACE_ID::uint8* FaceRecordList::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:FaceRecordList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .FaceRecord face_records = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->face_records_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->face_records(static_cast<int>(i)), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:FaceRecordList)
  return target;
}

size_t FaceRecordList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:FaceRecordList)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .FaceRecord face_records = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->face_records_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->face_records(static_cast<int>(i)));
    }
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FaceRecordList::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:FaceRecordList)
  GOOGLE_DCHECK_NE(&from, this);
  const FaceRecordList* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<FaceRecordList>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:FaceRecordList)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:FaceRecordList)
    MergeFrom(*source);
  }
}

void FaceRecordList::MergeFrom(const FaceRecordList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:FaceRecordList)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  face_records_.MergeFrom(from.face_records_);
}

void FaceRecordList::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:FaceRecordList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FaceRecordList::CopyFrom(const FaceRecordList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:FaceRecordList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FaceRecordList::IsInitialized() const {
  return true;
}

void FaceRecordList::Swap(FaceRecordList* other) {
  if (other == this) return;
  InternalSwap(other);
}
void FaceRecordList::InternalSwap(FaceRecordList* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  CastToBase(&face_records_)->InternalSwap(CastToBase(&other->face_records_));
}

::PROTOBUF_NAMESPACE_ID::Metadata FaceRecordList::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void VerificationRequest::InitAsDefaultInstance() {
}
class VerificationRequest::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int VerificationRequest::kGalleryFieldNumber;
const int VerificationRequest::kSubjectIdFieldNumber;
const int VerificationRequest::kFaceRecordFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

VerificationRequest::VerificationRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:VerificationRequest)
}
VerificationRequest::VerificationRequest(const VerificationRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      face_record_(from.face_record_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  gallery_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.gallery().size() > 0) {
    gallery_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.gallery_);
  }
  subject_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.subject_id().size() > 0) {
    subject_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.subject_id_);
  }
  // @@protoc_insertion_point(copy_constructor:VerificationRequest)
}

void VerificationRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_VerificationRequest_faro_2fproto_2fface_5fservice_2eproto.base);
  gallery_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  subject_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

VerificationRequest::~VerificationRequest() {
  // @@protoc_insertion_point(destructor:VerificationRequest)
  SharedDtor();
}

void VerificationRequest::SharedDtor() {
  gallery_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  subject_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void VerificationRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const VerificationRequest& VerificationRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_VerificationRequest_faro_2fproto_2fface_5fservice_2eproto.base);
  return *internal_default_instance();
}


void VerificationRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:VerificationRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  face_record_.Clear();
  gallery_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  subject_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* VerificationRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string gallery = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_gallery(), ptr, ctx, "VerificationRequest.gallery");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string subject_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_subject_id(), ptr, ctx, "VerificationRequest.subject_id");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .FaceRecord face_record = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_face_record(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 26);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool VerificationRequest::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:VerificationRequest)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string gallery = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_gallery()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->gallery().data(), static_cast<int>(this->gallery().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "VerificationRequest.gallery"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string subject_id = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_subject_id()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->subject_id().data(), static_cast<int>(this->subject_id().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "VerificationRequest.subject_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .FaceRecord face_record = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_face_record()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:VerificationRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:VerificationRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void VerificationRequest::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:VerificationRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string gallery = 1;
  if (this->gallery().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->gallery().data(), static_cast<int>(this->gallery().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "VerificationRequest.gallery");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->gallery(), output);
  }

  // string subject_id = 2;
  if (this->subject_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->subject_id().data(), static_cast<int>(this->subject_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "VerificationRequest.subject_id");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->subject_id(), output);
  }

  // repeated .FaceRecord face_record = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->face_record_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      3,
      this->face_record(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:VerificationRequest)
}

::PROTOBUF_NAMESPACE_ID::uint8* VerificationRequest::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:VerificationRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string gallery = 1;
  if (this->gallery().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->gallery().data(), static_cast<int>(this->gallery().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "VerificationRequest.gallery");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        1, this->gallery(), target);
  }

  // string subject_id = 2;
  if (this->subject_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->subject_id().data(), static_cast<int>(this->subject_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "VerificationRequest.subject_id");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        2, this->subject_id(), target);
  }

  // repeated .FaceRecord face_record = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->face_record_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->face_record(static_cast<int>(i)), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:VerificationRequest)
  return target;
}

size_t VerificationRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:VerificationRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .FaceRecord face_record = 3;
  {
    unsigned int count = static_cast<unsigned int>(this->face_record_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->face_record(static_cast<int>(i)));
    }
  }

  // string gallery = 1;
  if (this->gallery().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->gallery());
  }

  // string subject_id = 2;
  if (this->subject_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->subject_id());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void VerificationRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:VerificationRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const VerificationRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<VerificationRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:VerificationRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:VerificationRequest)
    MergeFrom(*source);
  }
}

void VerificationRequest::MergeFrom(const VerificationRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:VerificationRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  face_record_.MergeFrom(from.face_record_);
  if (from.gallery().size() > 0) {

    gallery_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.gallery_);
  }
  if (from.subject_id().size() > 0) {

    subject_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.subject_id_);
  }
}

void VerificationRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:VerificationRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VerificationRequest::CopyFrom(const VerificationRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:VerificationRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VerificationRequest::IsInitialized() const {
  return true;
}

void VerificationRequest::Swap(VerificationRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void VerificationRequest::InternalSwap(VerificationRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  CastToBase(&face_record_)->InternalSwap(CastToBase(&other->face_record_));
  gallery_.Swap(&other->gallery_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  subject_id_.Swap(&other->subject_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata VerificationRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void VerificationResponse::InitAsDefaultInstance() {
}
class VerificationResponse::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int VerificationResponse::kErrorCodeFieldNumber;
const int VerificationResponse::kErrorMessageFieldNumber;
const int VerificationResponse::kSuccessFieldNumber;
const int VerificationResponse::kConfidenceFieldNumber;
const int VerificationResponse::kMatchesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

VerificationResponse::VerificationResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:VerificationResponse)
}
VerificationResponse::VerificationResponse(const VerificationResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      matches_(from.matches_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  error_message_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.error_message().size() > 0) {
    error_message_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.error_message_);
  }
  ::memcpy(&success_, &from.success_,
    static_cast<size_t>(reinterpret_cast<char*>(&error_code_) -
    reinterpret_cast<char*>(&success_)) + sizeof(error_code_));
  // @@protoc_insertion_point(copy_constructor:VerificationResponse)
}

void VerificationResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_VerificationResponse_faro_2fproto_2fface_5fservice_2eproto.base);
  error_message_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&success_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&error_code_) -
      reinterpret_cast<char*>(&success_)) + sizeof(error_code_));
}

VerificationResponse::~VerificationResponse() {
  // @@protoc_insertion_point(destructor:VerificationResponse)
  SharedDtor();
}

void VerificationResponse::SharedDtor() {
  error_message_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void VerificationResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const VerificationResponse& VerificationResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_VerificationResponse_faro_2fproto_2fface_5fservice_2eproto.base);
  return *internal_default_instance();
}


void VerificationResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:VerificationResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  matches_.Clear();
  error_message_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&success_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&error_code_) -
      reinterpret_cast<char*>(&success_)) + sizeof(error_code_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* VerificationResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bool success = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          success_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // float confidence = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          confidence_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // repeated .FaceRecord matches = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_matches(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 26);
        } else goto handle_unusual;
        continue;
      // int32 error_code = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          error_code_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string error_message = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_error_message(), ptr, ctx, "VerificationResponse.error_message");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool VerificationResponse::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:VerificationResponse)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // bool success = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &success_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float confidence = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (21 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &confidence_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .FaceRecord matches = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_matches()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 error_code = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (32 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &error_code_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string error_message = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (42 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_error_message()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->error_message().data(), static_cast<int>(this->error_message().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "VerificationResponse.error_message"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:VerificationResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:VerificationResponse)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void VerificationResponse::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:VerificationResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool success = 1;
  if (this->success() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(1, this->success(), output);
  }

  // float confidence = 2;
  if (!(this->confidence() <= 0 && this->confidence() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(2, this->confidence(), output);
  }

  // repeated .FaceRecord matches = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->matches_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      3,
      this->matches(static_cast<int>(i)),
      output);
  }

  // int32 error_code = 4;
  if (this->error_code() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(4, this->error_code(), output);
  }

  // string error_message = 5;
  if (this->error_message().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->error_message().data(), static_cast<int>(this->error_message().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "VerificationResponse.error_message");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->error_message(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:VerificationResponse)
}

::PROTOBUF_NAMESPACE_ID::uint8* VerificationResponse::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:VerificationResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool success = 1;
  if (this->success() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->success(), target);
  }

  // float confidence = 2;
  if (!(this->confidence() <= 0 && this->confidence() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->confidence(), target);
  }

  // repeated .FaceRecord matches = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->matches_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->matches(static_cast<int>(i)), target);
  }

  // int32 error_code = 4;
  if (this->error_code() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->error_code(), target);
  }

  // string error_message = 5;
  if (this->error_message().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->error_message().data(), static_cast<int>(this->error_message().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "VerificationResponse.error_message");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        5, this->error_message(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:VerificationResponse)
  return target;
}

size_t VerificationResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:VerificationResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .FaceRecord matches = 3;
  {
    unsigned int count = static_cast<unsigned int>(this->matches_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->matches(static_cast<int>(i)));
    }
  }

  // string error_message = 5;
  if (this->error_message().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->error_message());
  }

  // bool success = 1;
  if (this->success() != 0) {
    total_size += 1 + 1;
  }

  // float confidence = 2;
  if (!(this->confidence() <= 0 && this->confidence() >= 0)) {
    total_size += 1 + 4;
  }

  // int32 error_code = 4;
  if (this->error_code() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->error_code());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void VerificationResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:VerificationResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const VerificationResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<VerificationResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:VerificationResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:VerificationResponse)
    MergeFrom(*source);
  }
}

void VerificationResponse::MergeFrom(const VerificationResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:VerificationResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  matches_.MergeFrom(from.matches_);
  if (from.error_message().size() > 0) {

    error_message_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.error_message_);
  }
  if (from.success() != 0) {
    set_success(from.success());
  }
  if (!(from.confidence() <= 0 && from.confidence() >= 0)) {
    set_confidence(from.confidence());
  }
  if (from.error_code() != 0) {
    set_error_code(from.error_code());
  }
}

void VerificationResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:VerificationResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VerificationResponse::CopyFrom(const VerificationResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:VerificationResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VerificationResponse::IsInitialized() const {
  return true;
}

void VerificationResponse::Swap(VerificationResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void VerificationResponse::InternalSwap(VerificationResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  CastToBase(&matches_)->InternalSwap(CastToBase(&other->matches_));
  error_message_.Swap(&other->error_message_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(success_, other->success_);
  swap(confidence_, other->confidence_);
  swap(error_code_, other->error_code_);
}

::PROTOBUF_NAMESPACE_ID::Metadata VerificationResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SearchRequest::InitAsDefaultInstance() {
  ::_SearchRequest_default_instance_._instance.get_mutable()->probes_ = const_cast< ::FaceRecordList*>(
      ::FaceRecordList::internal_default_instance());
}
class SearchRequest::HasBitSetters {
 public:
  static const ::FaceRecordList& probes(const SearchRequest* msg);
};

const ::FaceRecordList&
SearchRequest::HasBitSetters::probes(const SearchRequest* msg) {
  return *msg->probes_;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SearchRequest::kSearchGalleryFieldNumber;
const int SearchRequest::kProbesFieldNumber;
const int SearchRequest::kMaxResultsFieldNumber;
const int SearchRequest::kThresholdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SearchRequest::SearchRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:SearchRequest)
}
SearchRequest::SearchRequest(const SearchRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  search_gallery_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.search_gallery().size() > 0) {
    search_gallery_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.search_gallery_);
  }
  if (from.has_probes()) {
    probes_ = new ::FaceRecordList(*from.probes_);
  } else {
    probes_ = nullptr;
  }
  ::memcpy(&max_results_, &from.max_results_,
    static_cast<size_t>(reinterpret_cast<char*>(&threshold_) -
    reinterpret_cast<char*>(&max_results_)) + sizeof(threshold_));
  // @@protoc_insertion_point(copy_constructor:SearchRequest)
}

void SearchRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SearchRequest_faro_2fproto_2fface_5fservice_2eproto.base);
  search_gallery_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&probes_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&threshold_) -
      reinterpret_cast<char*>(&probes_)) + sizeof(threshold_));
}

SearchRequest::~SearchRequest() {
  // @@protoc_insertion_point(destructor:SearchRequest)
  SharedDtor();
}

void SearchRequest::SharedDtor() {
  search_gallery_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete probes_;
}

void SearchRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SearchRequest& SearchRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SearchRequest_faro_2fproto_2fface_5fservice_2eproto.base);
  return *internal_default_instance();
}


void SearchRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:SearchRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  search_gallery_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && probes_ != nullptr) {
    delete probes_;
  }
  probes_ = nullptr;
  ::memset(&max_results_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&threshold_) -
      reinterpret_cast<char*>(&max_results_)) + sizeof(threshold_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* SearchRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string search_gallery = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_search_gallery(), ptr, ctx, "SearchRequest.search_gallery");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .FaceRecordList probes = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(mutable_probes(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 max_results = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          max_results_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // float threshold = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 45)) {
          threshold_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool SearchRequest::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:SearchRequest)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string search_gallery = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_search_gallery()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->search_gallery().data(), static_cast<int>(this->search_gallery().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "SearchRequest.search_gallery"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .FaceRecordList probes = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_probes()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 max_results = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (32 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &max_results_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float threshold = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (45 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &threshold_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SearchRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SearchRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void SearchRequest::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SearchRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string search_gallery = 1;
  if (this->search_gallery().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->search_gallery().data(), static_cast<int>(this->search_gallery().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "SearchRequest.search_gallery");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->search_gallery(), output);
  }

  // .FaceRecordList probes = 3;
  if (this->has_probes()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, HasBitSetters::probes(this), output);
  }

  // int32 max_results = 4;
  if (this->max_results() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(4, this->max_results(), output);
  }

  // float threshold = 5;
  if (!(this->threshold() <= 0 && this->threshold() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(5, this->threshold(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SearchRequest)
}

::PROTOBUF_NAMESPACE_ID::uint8* SearchRequest::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:SearchRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string search_gallery = 1;
  if (this->search_gallery().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->search_gallery().data(), static_cast<int>(this->search_gallery().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "SearchRequest.search_gallery");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        1, this->search_gallery(), target);
  }

  // .FaceRecordList probes = 3;
  if (this->has_probes()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, HasBitSetters::probes(this), target);
  }

  // int32 max_results = 4;
  if (this->max_results() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->max_results(), target);
  }

  // float threshold = 5;
  if (!(this->threshold() <= 0 && this->threshold() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(5, this->threshold(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SearchRequest)
  return target;
}

size_t SearchRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SearchRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string search_gallery = 1;
  if (this->search_gallery().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->search_gallery());
  }

  // .FaceRecordList probes = 3;
  if (this->has_probes()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *probes_);
  }

  // int32 max_results = 4;
  if (this->max_results() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->max_results());
  }

  // float threshold = 5;
  if (!(this->threshold() <= 0 && this->threshold() >= 0)) {
    total_size += 1 + 4;
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SearchRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SearchRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const SearchRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SearchRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SearchRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SearchRequest)
    MergeFrom(*source);
  }
}

void SearchRequest::MergeFrom(const SearchRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SearchRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.search_gallery().size() > 0) {

    search_gallery_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.search_gallery_);
  }
  if (from.has_probes()) {
    mutable_probes()->::FaceRecordList::MergeFrom(from.probes());
  }
  if (from.max_results() != 0) {
    set_max_results(from.max_results());
  }
  if (!(from.threshold() <= 0 && from.threshold() >= 0)) {
    set_threshold(from.threshold());
  }
}

void SearchRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SearchRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SearchRequest::CopyFrom(const SearchRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SearchRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SearchRequest::IsInitialized() const {
  return true;
}

void SearchRequest::Swap(SearchRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SearchRequest::InternalSwap(SearchRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  search_gallery_.Swap(&other->search_gallery_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(probes_, other->probes_);
  swap(max_results_, other->max_results_);
  swap(threshold_, other->threshold_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SearchRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SearchResponse::InitAsDefaultInstance() {
  ::_SearchResponse_default_instance_._instance.get_mutable()->message_ = const_cast< ::ErrorMessage*>(
      ::ErrorMessage::internal_default_instance());
  ::_SearchResponse_default_instance_._instance.get_mutable()->probes_ = const_cast< ::FaceRecordList*>(
      ::FaceRecordList::internal_default_instance());
}
class SearchResponse::HasBitSetters {
 public:
  static const ::ErrorMessage& message(const SearchResponse* msg);
  static const ::FaceRecordList& probes(const SearchResponse* msg);
};

const ::ErrorMessage&
SearchResponse::HasBitSetters::message(const SearchResponse* msg) {
  return *msg->message_;
}
const ::FaceRecordList&
SearchResponse::HasBitSetters::probes(const SearchResponse* msg) {
  return *msg->probes_;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SearchResponse::kMessageFieldNumber;
const int SearchResponse::kProbesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SearchResponse::SearchResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:SearchResponse)
}
SearchResponse::SearchResponse(const SearchResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_message()) {
    message_ = new ::ErrorMessage(*from.message_);
  } else {
    message_ = nullptr;
  }
  if (from.has_probes()) {
    probes_ = new ::FaceRecordList(*from.probes_);
  } else {
    probes_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:SearchResponse)
}

void SearchResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SearchResponse_faro_2fproto_2fface_5fservice_2eproto.base);
  ::memset(&message_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&probes_) -
      reinterpret_cast<char*>(&message_)) + sizeof(probes_));
}

SearchResponse::~SearchResponse() {
  // @@protoc_insertion_point(destructor:SearchResponse)
  SharedDtor();
}

void SearchResponse::SharedDtor() {
  if (this != internal_default_instance()) delete message_;
  if (this != internal_default_instance()) delete probes_;
}

void SearchResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SearchResponse& SearchResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SearchResponse_faro_2fproto_2fface_5fservice_2eproto.base);
  return *internal_default_instance();
}


void SearchResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:SearchResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && message_ != nullptr) {
    delete message_;
  }
  message_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && probes_ != nullptr) {
    delete probes_;
  }
  probes_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* SearchResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .ErrorMessage message = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_message(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .FaceRecordList probes = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(mutable_probes(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool SearchResponse::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:SearchResponse)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .ErrorMessage message = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_message()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .FaceRecordList probes = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_probes()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SearchResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SearchResponse)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void SearchResponse::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SearchResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .ErrorMessage message = 1;
  if (this->has_message()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::message(this), output);
  }

  // .FaceRecordList probes = 2;
  if (this->has_probes()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, HasBitSetters::probes(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SearchResponse)
}

::PROTOBUF_NAMESPACE_ID::uint8* SearchResponse::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:SearchResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .ErrorMessage message = 1;
  if (this->has_message()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::message(this), target);
  }

  // .FaceRecordList probes = 2;
  if (this->has_probes()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, HasBitSetters::probes(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SearchResponse)
  return target;
}

size_t SearchResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SearchResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .ErrorMessage message = 1;
  if (this->has_message()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *message_);
  }

  // .FaceRecordList probes = 2;
  if (this->has_probes()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *probes_);
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SearchResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SearchResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const SearchResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SearchResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SearchResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SearchResponse)
    MergeFrom(*source);
  }
}

void SearchResponse::MergeFrom(const SearchResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SearchResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_message()) {
    mutable_message()->::ErrorMessage::MergeFrom(from.message());
  }
  if (from.has_probes()) {
    mutable_probes()->::FaceRecordList::MergeFrom(from.probes());
  }
}

void SearchResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SearchResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SearchResponse::CopyFrom(const SearchResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SearchResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SearchResponse::IsInitialized() const {
  return true;
}

void SearchResponse::Swap(SearchResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SearchResponse::InternalSwap(SearchResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(message_, other->message_);
  swap(probes_, other->probes_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SearchResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void EnrollRequest::InitAsDefaultInstance() {
  ::_EnrollRequest_default_instance_._instance.get_mutable()->records_ = const_cast< ::FaceRecordList*>(
      ::FaceRecordList::internal_default_instance());
  ::_EnrollRequest_default_instance_._instance.get_mutable()->enroll_options_ = const_cast< ::EnrollOptions*>(
      ::EnrollOptions::internal_default_instance());
}
class EnrollRequest::HasBitSetters {
 public:
  static const ::FaceRecordList& records(const EnrollRequest* msg);
  static const ::EnrollOptions& enroll_options(const EnrollRequest* msg);
};

const ::FaceRecordList&
EnrollRequest::HasBitSetters::records(const EnrollRequest* msg) {
  return *msg->records_;
}
const ::EnrollOptions&
EnrollRequest::HasBitSetters::enroll_options(const EnrollRequest* msg) {
  return *msg->enroll_options_;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int EnrollRequest::kEnrollGalleryFieldNumber;
const int EnrollRequest::kRecordsFieldNumber;
const int EnrollRequest::kEnrollOptionsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

EnrollRequest::EnrollRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:EnrollRequest)
}
EnrollRequest::EnrollRequest(const EnrollRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  enroll_gallery_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.enroll_gallery().size() > 0) {
    enroll_gallery_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.enroll_gallery_);
  }
  if (from.has_records()) {
    records_ = new ::FaceRecordList(*from.records_);
  } else {
    records_ = nullptr;
  }
  if (from.has_enroll_options()) {
    enroll_options_ = new ::EnrollOptions(*from.enroll_options_);
  } else {
    enroll_options_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:EnrollRequest)
}

void EnrollRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_EnrollRequest_faro_2fproto_2fface_5fservice_2eproto.base);
  enroll_gallery_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&records_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&enroll_options_) -
      reinterpret_cast<char*>(&records_)) + sizeof(enroll_options_));
}

EnrollRequest::~EnrollRequest() {
  // @@protoc_insertion_point(destructor:EnrollRequest)
  SharedDtor();
}

void EnrollRequest::SharedDtor() {
  enroll_gallery_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete records_;
  if (this != internal_default_instance()) delete enroll_options_;
}

void EnrollRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const EnrollRequest& EnrollRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_EnrollRequest_faro_2fproto_2fface_5fservice_2eproto.base);
  return *internal_default_instance();
}


void EnrollRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:EnrollRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  enroll_gallery_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && records_ != nullptr) {
    delete records_;
  }
  records_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && enroll_options_ != nullptr) {
    delete enroll_options_;
  }
  enroll_options_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* EnrollRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string enroll_gallery = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_enroll_gallery(), ptr, ctx, "EnrollRequest.enroll_gallery");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .FaceRecordList records = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(mutable_records(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .EnrollOptions enroll_options = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr = ctx->ParseMessage(mutable_enroll_options(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool EnrollRequest::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:EnrollRequest)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string enroll_gallery = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_enroll_gallery()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->enroll_gallery().data(), static_cast<int>(this->enroll_gallery().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "EnrollRequest.enroll_gallery"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .FaceRecordList records = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_records()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .EnrollOptions enroll_options = 10;
      case 10: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (82 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_enroll_options()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:EnrollRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:EnrollRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void EnrollRequest::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:EnrollRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string enroll_gallery = 1;
  if (this->enroll_gallery().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->enroll_gallery().data(), static_cast<int>(this->enroll_gallery().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "EnrollRequest.enroll_gallery");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->enroll_gallery(), output);
  }

  // .FaceRecordList records = 2;
  if (this->has_records()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, HasBitSetters::records(this), output);
  }

  // .EnrollOptions enroll_options = 10;
  if (this->has_enroll_options()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, HasBitSetters::enroll_options(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:EnrollRequest)
}

::PROTOBUF_NAMESPACE_ID::uint8* EnrollRequest::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:EnrollRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string enroll_gallery = 1;
  if (this->enroll_gallery().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->enroll_gallery().data(), static_cast<int>(this->enroll_gallery().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "EnrollRequest.enroll_gallery");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        1, this->enroll_gallery(), target);
  }

  // .FaceRecordList records = 2;
  if (this->has_records()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, HasBitSetters::records(this), target);
  }

  // .EnrollOptions enroll_options = 10;
  if (this->has_enroll_options()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        10, HasBitSetters::enroll_options(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:EnrollRequest)
  return target;
}

size_t EnrollRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:EnrollRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string enroll_gallery = 1;
  if (this->enroll_gallery().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->enroll_gallery());
  }

  // .FaceRecordList records = 2;
  if (this->has_records()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *records_);
  }

  // .EnrollOptions enroll_options = 10;
  if (this->has_enroll_options()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *enroll_options_);
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void EnrollRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:EnrollRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const EnrollRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<EnrollRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:EnrollRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:EnrollRequest)
    MergeFrom(*source);
  }
}

void EnrollRequest::MergeFrom(const EnrollRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:EnrollRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.enroll_gallery().size() > 0) {

    enroll_gallery_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.enroll_gallery_);
  }
  if (from.has_records()) {
    mutable_records()->::FaceRecordList::MergeFrom(from.records());
  }
  if (from.has_enroll_options()) {
    mutable_enroll_options()->::EnrollOptions::MergeFrom(from.enroll_options());
  }
}

void EnrollRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:EnrollRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EnrollRequest::CopyFrom(const EnrollRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:EnrollRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EnrollRequest::IsInitialized() const {
  return true;
}

void EnrollRequest::Swap(EnrollRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void EnrollRequest::InternalSwap(EnrollRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  enroll_gallery_.Swap(&other->enroll_gallery_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(records_, other->records_);
  swap(enroll_options_, other->enroll_options_);
}

::PROTOBUF_NAMESPACE_ID::Metadata EnrollRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void DetectRequest::InitAsDefaultInstance() {
  ::_DetectRequest_default_instance_._instance.get_mutable()->image_ = const_cast< ::Image*>(
      ::Image::internal_default_instance());
  ::_DetectRequest_default_instance_._instance.get_mutable()->detect_options_ = const_cast< ::DetectionOptions*>(
      ::DetectionOptions::internal_default_instance());
}
class DetectRequest::HasBitSetters {
 public:
  static const ::Image& image(const DetectRequest* msg);
  static const ::DetectionOptions& detect_options(const DetectRequest* msg);
};

const ::Image&
DetectRequest::HasBitSetters::image(const DetectRequest* msg) {
  return *msg->image_;
}
const ::DetectionOptions&
DetectRequest::HasBitSetters::detect_options(const DetectRequest* msg) {
  return *msg->detect_options_;
}
void DetectRequest::clear_image() {
  if (GetArenaNoVirtual() == nullptr && image_ != nullptr) {
    delete image_;
  }
  image_ = nullptr;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DetectRequest::kImageFieldNumber;
const int DetectRequest::kSourceFieldNumber;
const int DetectRequest::kFrameFieldNumber;
const int DetectRequest::kSubjectIdFieldNumber;
const int DetectRequest::kSubjectNameFieldNumber;
const int DetectRequest::kDetectOptionsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DetectRequest::DetectRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:DetectRequest)
}
DetectRequest::DetectRequest(const DetectRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  source_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.source().size() > 0) {
    source_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.source_);
  }
  subject_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.subject_id().size() > 0) {
    subject_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.subject_id_);
  }
  subject_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.subject_name().size() > 0) {
    subject_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.subject_name_);
  }
  if (from.has_image()) {
    image_ = new ::Image(*from.image_);
  } else {
    image_ = nullptr;
  }
  if (from.has_detect_options()) {
    detect_options_ = new ::DetectionOptions(*from.detect_options_);
  } else {
    detect_options_ = nullptr;
  }
  frame_ = from.frame_;
  // @@protoc_insertion_point(copy_constructor:DetectRequest)
}

void DetectRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_DetectRequest_faro_2fproto_2fface_5fservice_2eproto.base);
  source_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  subject_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  subject_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&image_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&frame_) -
      reinterpret_cast<char*>(&image_)) + sizeof(frame_));
}

DetectRequest::~DetectRequest() {
  // @@protoc_insertion_point(destructor:DetectRequest)
  SharedDtor();
}

void DetectRequest::SharedDtor() {
  source_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  subject_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  subject_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete image_;
  if (this != internal_default_instance()) delete detect_options_;
}

void DetectRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DetectRequest& DetectRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DetectRequest_faro_2fproto_2fface_5fservice_2eproto.base);
  return *internal_default_instance();
}


void DetectRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:DetectRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  source_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  subject_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  subject_name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && image_ != nullptr) {
    delete image_;
  }
  image_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && detect_options_ != nullptr) {
    delete detect_options_;
  }
  detect_options_ = nullptr;
  frame_ = PROTOBUF_LONGLONG(0);
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* DetectRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .Image image = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_image(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string source = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_source(), ptr, ctx, "DetectRequest.source");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 frame = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          frame_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string subject_id = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_subject_id(), ptr, ctx, "DetectRequest.subject_id");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string subject_name = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_subject_name(), ptr, ctx, "DetectRequest.subject_name");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .DetectionOptions detect_options = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ctx->ParseMessage(mutable_detect_options(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool DetectRequest::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:DetectRequest)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .Image image = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_image()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string source = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_source()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->source().data(), static_cast<int>(this->source().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "DetectRequest.source"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 frame = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &frame_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string subject_id = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (34 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_subject_id()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->subject_id().data(), static_cast<int>(this->subject_id().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "DetectRequest.subject_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string subject_name = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (42 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_subject_name()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->subject_name().data(), static_cast<int>(this->subject_name().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "DetectRequest.subject_name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .DetectionOptions detect_options = 8;
      case 8: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (66 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_detect_options()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:DetectRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:DetectRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void DetectRequest::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:DetectRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .Image image = 1;
  if (this->has_image()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::image(this), output);
  }

  // string source = 2;
  if (this->source().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->source().data(), static_cast<int>(this->source().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "DetectRequest.source");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->source(), output);
  }

  // int64 frame = 3;
  if (this->frame() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(3, this->frame(), output);
  }

  // string subject_id = 4;
  if (this->subject_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->subject_id().data(), static_cast<int>(this->subject_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "DetectRequest.subject_id");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->subject_id(), output);
  }

  // string subject_name = 5;
  if (this->subject_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->subject_name().data(), static_cast<int>(this->subject_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "DetectRequest.subject_name");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->subject_name(), output);
  }

  // .DetectionOptions detect_options = 8;
  if (this->has_detect_options()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, HasBitSetters::detect_options(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:DetectRequest)
}

::PROTOBUF_NAMESPACE_ID::uint8* DetectRequest::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:DetectRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .Image image = 1;
  if (this->has_image()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::image(this), target);
  }

  // string source = 2;
  if (this->source().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->source().data(), static_cast<int>(this->source().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "DetectRequest.source");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        2, this->source(), target);
  }

  // int64 frame = 3;
  if (this->frame() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(3, this->frame(), target);
  }

  // string subject_id = 4;
  if (this->subject_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->subject_id().data(), static_cast<int>(this->subject_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "DetectRequest.subject_id");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        4, this->subject_id(), target);
  }

  // string subject_name = 5;
  if (this->subject_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->subject_name().data(), static_cast<int>(this->subject_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "DetectRequest.subject_name");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        5, this->subject_name(), target);
  }

  // .DetectionOptions detect_options = 8;
  if (this->has_detect_options()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        8, HasBitSetters::detect_options(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DetectRequest)
  return target;
}

size_t DetectRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:DetectRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string source = 2;
  if (this->source().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->source());
  }

  // string subject_id = 4;
  if (this->subject_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->subject_id());
  }

  // string subject_name = 5;
  if (this->subject_name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->subject_name());
  }

  // .Image image = 1;
  if (this->has_image()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *image_);
  }

  // .DetectionOptions detect_options = 8;
  if (this->has_detect_options()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *detect_options_);
  }

  // int64 frame = 3;
  if (this->frame() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->frame());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DetectRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:DetectRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const DetectRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DetectRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:DetectRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:DetectRequest)
    MergeFrom(*source);
  }
}

void DetectRequest::MergeFrom(const DetectRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:DetectRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.source().size() > 0) {

    source_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.source_);
  }
  if (from.subject_id().size() > 0) {

    subject_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.subject_id_);
  }
  if (from.subject_name().size() > 0) {

    subject_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.subject_name_);
  }
  if (from.has_image()) {
    mutable_image()->::Image::MergeFrom(from.image());
  }
  if (from.has_detect_options()) {
    mutable_detect_options()->::DetectionOptions::MergeFrom(from.detect_options());
  }
  if (from.frame() != 0) {
    set_frame(from.frame());
  }
}

void DetectRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:DetectRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DetectRequest::CopyFrom(const DetectRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:DetectRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DetectRequest::IsInitialized() const {
  return true;
}

void DetectRequest::Swap(DetectRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DetectRequest::InternalSwap(DetectRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  source_.Swap(&other->source_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  subject_id_.Swap(&other->subject_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  subject_name_.Swap(&other->subject_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(image_, other->image_);
  swap(detect_options_, other->detect_options_);
  swap(frame_, other->frame_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DetectRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ExtractRequest::InitAsDefaultInstance() {
  ::_ExtractRequest_default_instance_._instance.get_mutable()->image_ = const_cast< ::Image*>(
      ::Image::internal_default_instance());
  ::_ExtractRequest_default_instance_._instance.get_mutable()->records_ = const_cast< ::FaceRecordList*>(
      ::FaceRecordList::internal_default_instance());
  ::_ExtractRequest_default_instance_._instance.get_mutable()->extract_options_ = const_cast< ::ExtractOptions*>(
      ::ExtractOptions::internal_default_instance());
}
class ExtractRequest::HasBitSetters {
 public:
  static const ::Image& image(const ExtractRequest* msg);
  static const ::FaceRecordList& records(const ExtractRequest* msg);
  static const ::ExtractOptions& extract_options(const ExtractRequest* msg);
};

const ::Image&
ExtractRequest::HasBitSetters::image(const ExtractRequest* msg) {
  return *msg->image_;
}
const ::FaceRecordList&
ExtractRequest::HasBitSetters::records(const ExtractRequest* msg) {
  return *msg->records_;
}
const ::ExtractOptions&
ExtractRequest::HasBitSetters::extract_options(const ExtractRequest* msg) {
  return *msg->extract_options_;
}
void ExtractRequest::clear_image() {
  if (GetArenaNoVirtual() == nullptr && image_ != nullptr) {
    delete image_;
  }
  image_ = nullptr;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ExtractRequest::kImageFieldNumber;
const int ExtractRequest::kRecordsFieldNumber;
const int ExtractRequest::kExtractOptionsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ExtractRequest::ExtractRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ExtractRequest)
}
ExtractRequest::ExtractRequest(const ExtractRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_image()) {
    image_ = new ::Image(*from.image_);
  } else {
    image_ = nullptr;
  }
  if (from.has_records()) {
    records_ = new ::FaceRecordList(*from.records_);
  } else {
    records_ = nullptr;
  }
  if (from.has_extract_options()) {
    extract_options_ = new ::ExtractOptions(*from.extract_options_);
  } else {
    extract_options_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:ExtractRequest)
}

void ExtractRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ExtractRequest_faro_2fproto_2fface_5fservice_2eproto.base);
  ::memset(&image_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&extract_options_) -
      reinterpret_cast<char*>(&image_)) + sizeof(extract_options_));
}

ExtractRequest::~ExtractRequest() {
  // @@protoc_insertion_point(destructor:ExtractRequest)
  SharedDtor();
}

void ExtractRequest::SharedDtor() {
  if (this != internal_default_instance()) delete image_;
  if (this != internal_default_instance()) delete records_;
  if (this != internal_default_instance()) delete extract_options_;
}

void ExtractRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ExtractRequest& ExtractRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ExtractRequest_faro_2fproto_2fface_5fservice_2eproto.base);
  return *internal_default_instance();
}


void ExtractRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:ExtractRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && image_ != nullptr) {
    delete image_;
  }
  image_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && records_ != nullptr) {
    delete records_;
  }
  records_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && extract_options_ != nullptr) {
    delete extract_options_;
  }
  extract_options_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ExtractRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .Image image = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_image(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .FaceRecordList records = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(mutable_records(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .ExtractOptions extract_options = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr = ctx->ParseMessage(mutable_extract_options(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ExtractRequest::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:ExtractRequest)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .Image image = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_image()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .FaceRecordList records = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (34 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_records()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .ExtractOptions extract_options = 9;
      case 9: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (74 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_extract_options()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ExtractRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ExtractRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ExtractRequest::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ExtractRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .Image image = 1;
  if (this->has_image()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::image(this), output);
  }

  // .FaceRecordList records = 4;
  if (this->has_records()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, HasBitSetters::records(this), output);
  }

  // .ExtractOptions extract_options = 9;
  if (this->has_extract_options()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, HasBitSetters::extract_options(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ExtractRequest)
}

::PROTOBUF_NAMESPACE_ID::uint8* ExtractRequest::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ExtractRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .Image image = 1;
  if (this->has_image()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::image(this), target);
  }

  // .FaceRecordList records = 4;
  if (this->has_records()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, HasBitSetters::records(this), target);
  }

  // .ExtractOptions extract_options = 9;
  if (this->has_extract_options()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        9, HasBitSetters::extract_options(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ExtractRequest)
  return target;
}

size_t ExtractRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ExtractRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .Image image = 1;
  if (this->has_image()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *image_);
  }

  // .FaceRecordList records = 4;
  if (this->has_records()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *records_);
  }

  // .ExtractOptions extract_options = 9;
  if (this->has_extract_options()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *extract_options_);
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ExtractRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ExtractRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const ExtractRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ExtractRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ExtractRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ExtractRequest)
    MergeFrom(*source);
  }
}

void ExtractRequest::MergeFrom(const ExtractRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ExtractRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_image()) {
    mutable_image()->::Image::MergeFrom(from.image());
  }
  if (from.has_records()) {
    mutable_records()->::FaceRecordList::MergeFrom(from.records());
  }
  if (from.has_extract_options()) {
    mutable_extract_options()->::ExtractOptions::MergeFrom(from.extract_options());
  }
}

void ExtractRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ExtractRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ExtractRequest::CopyFrom(const ExtractRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ExtractRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ExtractRequest::IsInitialized() const {
  return true;
}

void ExtractRequest::Swap(ExtractRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ExtractRequest::InternalSwap(ExtractRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(image_, other->image_);
  swap(records_, other->records_);
  swap(extract_options_, other->extract_options_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ExtractRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ScoreRequest::InitAsDefaultInstance() {
  ::_ScoreRequest_default_instance_._instance.get_mutable()->face_probes_ = const_cast< ::FaceRecordList*>(
      ::FaceRecordList::internal_default_instance());
  ::_ScoreRequest_default_instance_._instance.get_mutable()->face_gallery_ = const_cast< ::FaceRecordList*>(
      ::FaceRecordList::internal_default_instance());
  ::_ScoreRequest_default_instance_._instance.get_mutable()->template_probes_ = const_cast< ::TemplateList*>(
      ::TemplateList::internal_default_instance());
  ::_ScoreRequest_default_instance_._instance.get_mutable()->template_gallery_ = const_cast< ::TemplateList*>(
      ::TemplateList::internal_default_instance());
}
class ScoreRequest::HasBitSetters {
 public:
  static const ::FaceRecordList& face_probes(const ScoreRequest* msg);
  static const ::FaceRecordList& face_gallery(const ScoreRequest* msg);
  static const ::TemplateList& template_probes(const ScoreRequest* msg);
  static const ::TemplateList& template_gallery(const ScoreRequest* msg);
};

const ::FaceRecordList&
ScoreRequest::HasBitSetters::face_probes(const ScoreRequest* msg) {
  return *msg->face_probes_;
}
const ::FaceRecordList&
ScoreRequest::HasBitSetters::face_gallery(const ScoreRequest* msg) {
  return *msg->face_gallery_;
}
const ::TemplateList&
ScoreRequest::HasBitSetters::template_probes(const ScoreRequest* msg) {
  return *msg->template_probes_;
}
const ::TemplateList&
ScoreRequest::HasBitSetters::template_gallery(const ScoreRequest* msg) {
  return *msg->template_gallery_;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ScoreRequest::kFaceProbesFieldNumber;
const int ScoreRequest::kFaceGalleryFieldNumber;
const int ScoreRequest::kTemplateProbesFieldNumber;
const int ScoreRequest::kTemplateGalleryFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ScoreRequest::ScoreRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ScoreRequest)
}
ScoreRequest::ScoreRequest(const ScoreRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_face_probes()) {
    face_probes_ = new ::FaceRecordList(*from.face_probes_);
  } else {
    face_probes_ = nullptr;
  }
  if (from.has_face_gallery()) {
    face_gallery_ = new ::FaceRecordList(*from.face_gallery_);
  } else {
    face_gallery_ = nullptr;
  }
  if (from.has_template_probes()) {
    template_probes_ = new ::TemplateList(*from.template_probes_);
  } else {
    template_probes_ = nullptr;
  }
  if (from.has_template_gallery()) {
    template_gallery_ = new ::TemplateList(*from.template_gallery_);
  } else {
    template_gallery_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:ScoreRequest)
}

void ScoreRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ScoreRequest_faro_2fproto_2fface_5fservice_2eproto.base);
  ::memset(&face_probes_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&template_gallery_) -
      reinterpret_cast<char*>(&face_probes_)) + sizeof(template_gallery_));
}

ScoreRequest::~ScoreRequest() {
  // @@protoc_insertion_point(destructor:ScoreRequest)
  SharedDtor();
}

void ScoreRequest::SharedDtor() {
  if (this != internal_default_instance()) delete face_probes_;
  if (this != internal_default_instance()) delete face_gallery_;
  if (this != internal_default_instance()) delete template_probes_;
  if (this != internal_default_instance()) delete template_gallery_;
}

void ScoreRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ScoreRequest& ScoreRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ScoreRequest_faro_2fproto_2fface_5fservice_2eproto.base);
  return *internal_default_instance();
}


void ScoreRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:ScoreRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && face_probes_ != nullptr) {
    delete face_probes_;
  }
  face_probes_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && face_gallery_ != nullptr) {
    delete face_gallery_;
  }
  face_gallery_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && template_probes_ != nullptr) {
    delete template_probes_;
  }
  template_probes_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && template_gallery_ != nullptr) {
    delete template_gallery_;
  }
  template_gallery_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ScoreRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .FaceRecordList face_probes = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_face_probes(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .FaceRecordList face_gallery = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(mutable_face_gallery(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .TemplateList template_probes = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(mutable_template_probes(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .TemplateList template_gallery = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(mutable_template_gallery(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ScoreRequest::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:ScoreRequest)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .FaceRecordList face_probes = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_face_probes()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .FaceRecordList face_gallery = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_face_gallery()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .TemplateList template_probes = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_template_probes()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .TemplateList template_gallery = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (34 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_template_gallery()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ScoreRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ScoreRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ScoreRequest::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ScoreRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .FaceRecordList face_probes = 1;
  if (this->has_face_probes()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::face_probes(this), output);
  }

  // .FaceRecordList face_gallery = 2;
  if (this->has_face_gallery()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, HasBitSetters::face_gallery(this), output);
  }

  // .TemplateList template_probes = 3;
  if (this->has_template_probes()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, HasBitSetters::template_probes(this), output);
  }

  // .TemplateList template_gallery = 4;
  if (this->has_template_gallery()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, HasBitSetters::template_gallery(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ScoreRequest)
}

::PROTOBUF_NAMESPACE_ID::uint8* ScoreRequest::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ScoreRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .FaceRecordList face_probes = 1;
  if (this->has_face_probes()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::face_probes(this), target);
  }

  // .FaceRecordList face_gallery = 2;
  if (this->has_face_gallery()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, HasBitSetters::face_gallery(this), target);
  }

  // .TemplateList template_probes = 3;
  if (this->has_template_probes()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, HasBitSetters::template_probes(this), target);
  }

  // .TemplateList template_gallery = 4;
  if (this->has_template_gallery()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, HasBitSetters::template_gallery(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ScoreRequest)
  return target;
}

size_t ScoreRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ScoreRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .FaceRecordList face_probes = 1;
  if (this->has_face_probes()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *face_probes_);
  }

  // .FaceRecordList face_gallery = 2;
  if (this->has_face_gallery()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *face_gallery_);
  }

  // .TemplateList template_probes = 3;
  if (this->has_template_probes()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *template_probes_);
  }

  // .TemplateList template_gallery = 4;
  if (this->has_template_gallery()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *template_gallery_);
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ScoreRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ScoreRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const ScoreRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ScoreRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ScoreRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ScoreRequest)
    MergeFrom(*source);
  }
}

void ScoreRequest::MergeFrom(const ScoreRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ScoreRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_face_probes()) {
    mutable_face_probes()->::FaceRecordList::MergeFrom(from.face_probes());
  }
  if (from.has_face_gallery()) {
    mutable_face_gallery()->::FaceRecordList::MergeFrom(from.face_gallery());
  }
  if (from.has_template_probes()) {
    mutable_template_probes()->::TemplateList::MergeFrom(from.template_probes());
  }
  if (from.has_template_gallery()) {
    mutable_template_gallery()->::TemplateList::MergeFrom(from.template_gallery());
  }
}

void ScoreRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ScoreRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ScoreRequest::CopyFrom(const ScoreRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ScoreRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ScoreRequest::IsInitialized() const {
  return true;
}

void ScoreRequest::Swap(ScoreRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ScoreRequest::InternalSwap(ScoreRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(face_probes_, other->face_probes_);
  swap(face_gallery_, other->face_gallery_);
  swap(template_probes_, other->template_probes_);
  swap(template_gallery_, other->template_gallery_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ScoreRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void DetectExtractRequest::InitAsDefaultInstance() {
  ::_DetectExtractRequest_default_instance_._instance.get_mutable()->detect_request_ = const_cast< ::DetectRequest*>(
      ::DetectRequest::internal_default_instance());
  ::_DetectExtractRequest_default_instance_._instance.get_mutable()->extract_request_ = const_cast< ::ExtractRequest*>(
      ::ExtractRequest::internal_default_instance());
}
class DetectExtractRequest::HasBitSetters {
 public:
  static const ::DetectRequest& detect_request(const DetectExtractRequest* msg);
  static const ::ExtractRequest& extract_request(const DetectExtractRequest* msg);
};

const ::DetectRequest&
DetectExtractRequest::HasBitSetters::detect_request(const DetectExtractRequest* msg) {
  return *msg->detect_request_;
}
const ::ExtractRequest&
DetectExtractRequest::HasBitSetters::extract_request(const DetectExtractRequest* msg) {
  return *msg->extract_request_;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DetectExtractRequest::kDetectRequestFieldNumber;
const int DetectExtractRequest::kExtractRequestFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DetectExtractRequest::DetectExtractRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:DetectExtractRequest)
}
DetectExtractRequest::DetectExtractRequest(const DetectExtractRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_detect_request()) {
    detect_request_ = new ::DetectRequest(*from.detect_request_);
  } else {
    detect_request_ = nullptr;
  }
  if (from.has_extract_request()) {
    extract_request_ = new ::ExtractRequest(*from.extract_request_);
  } else {
    extract_request_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:DetectExtractRequest)
}

void DetectExtractRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_DetectExtractRequest_faro_2fproto_2fface_5fservice_2eproto.base);
  ::memset(&detect_request_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&extract_request_) -
      reinterpret_cast<char*>(&detect_request_)) + sizeof(extract_request_));
}

DetectExtractRequest::~DetectExtractRequest() {
  // @@protoc_insertion_point(destructor:DetectExtractRequest)
  SharedDtor();
}

void DetectExtractRequest::SharedDtor() {
  if (this != internal_default_instance()) delete detect_request_;
  if (this != internal_default_instance()) delete extract_request_;
}

void DetectExtractRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DetectExtractRequest& DetectExtractRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DetectExtractRequest_faro_2fproto_2fface_5fservice_2eproto.base);
  return *internal_default_instance();
}


void DetectExtractRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:DetectExtractRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && detect_request_ != nullptr) {
    delete detect_request_;
  }
  detect_request_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && extract_request_ != nullptr) {
    delete extract_request_;
  }
  extract_request_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* DetectExtractRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .DetectRequest detect_request = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_detect_request(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .ExtractRequest extract_request = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(mutable_extract_request(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool DetectExtractRequest::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:DetectExtractRequest)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .DetectRequest detect_request = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_detect_request()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .ExtractRequest extract_request = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_extract_request()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:DetectExtractRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:DetectExtractRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void DetectExtractRequest::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:DetectExtractRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .DetectRequest detect_request = 1;
  if (this->has_detect_request()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::detect_request(this), output);
  }

  // .ExtractRequest extract_request = 2;
  if (this->has_extract_request()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, HasBitSetters::extract_request(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:DetectExtractRequest)
}

::PROTOBUF_NAMESPACE_ID::uint8* DetectExtractRequest::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:DetectExtractRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .DetectRequest detect_request = 1;
  if (this->has_detect_request()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::detect_request(this), target);
  }

  // .ExtractRequest extract_request = 2;
  if (this->has_extract_request()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, HasBitSetters::extract_request(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DetectExtractRequest)
  return target;
}

size_t DetectExtractRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:DetectExtractRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .DetectRequest detect_request = 1;
  if (this->has_detect_request()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *detect_request_);
  }

  // .ExtractRequest extract_request = 2;
  if (this->has_extract_request()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *extract_request_);
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DetectExtractRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:DetectExtractRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const DetectExtractRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DetectExtractRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:DetectExtractRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:DetectExtractRequest)
    MergeFrom(*source);
  }
}

void DetectExtractRequest::MergeFrom(const DetectExtractRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:DetectExtractRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_detect_request()) {
    mutable_detect_request()->::DetectRequest::MergeFrom(from.detect_request());
  }
  if (from.has_extract_request()) {
    mutable_extract_request()->::ExtractRequest::MergeFrom(from.extract_request());
  }
}

void DetectExtractRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:DetectExtractRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DetectExtractRequest::CopyFrom(const DetectExtractRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:DetectExtractRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DetectExtractRequest::IsInitialized() const {
  return true;
}

void DetectExtractRequest::Swap(DetectExtractRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DetectExtractRequest::InternalSwap(DetectExtractRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(detect_request_, other->detect_request_);
  swap(extract_request_, other->extract_request_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DetectExtractRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void DetectExtractEnrollRequest::InitAsDefaultInstance() {
  ::_DetectExtractEnrollRequest_default_instance_._instance.get_mutable()->detect_request_ = const_cast< ::DetectRequest*>(
      ::DetectRequest::internal_default_instance());
  ::_DetectExtractEnrollRequest_default_instance_._instance.get_mutable()->extract_request_ = const_cast< ::ExtractRequest*>(
      ::ExtractRequest::internal_default_instance());
  ::_DetectExtractEnrollRequest_default_instance_._instance.get_mutable()->enroll_request_ = const_cast< ::EnrollRequest*>(
      ::EnrollRequest::internal_default_instance());
}
class DetectExtractEnrollRequest::HasBitSetters {
 public:
  static const ::DetectRequest& detect_request(const DetectExtractEnrollRequest* msg);
  static const ::ExtractRequest& extract_request(const DetectExtractEnrollRequest* msg);
  static const ::EnrollRequest& enroll_request(const DetectExtractEnrollRequest* msg);
};

const ::DetectRequest&
DetectExtractEnrollRequest::HasBitSetters::detect_request(const DetectExtractEnrollRequest* msg) {
  return *msg->detect_request_;
}
const ::ExtractRequest&
DetectExtractEnrollRequest::HasBitSetters::extract_request(const DetectExtractEnrollRequest* msg) {
  return *msg->extract_request_;
}
const ::EnrollRequest&
DetectExtractEnrollRequest::HasBitSetters::enroll_request(const DetectExtractEnrollRequest* msg) {
  return *msg->enroll_request_;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DetectExtractEnrollRequest::kDetectRequestFieldNumber;
const int DetectExtractEnrollRequest::kExtractRequestFieldNumber;
const int DetectExtractEnrollRequest::kEnrollRequestFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DetectExtractEnrollRequest::DetectExtractEnrollRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:DetectExtractEnrollRequest)
}
DetectExtractEnrollRequest::DetectExtractEnrollRequest(const DetectExtractEnrollRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_detect_request()) {
    detect_request_ = new ::DetectRequest(*from.detect_request_);
  } else {
    detect_request_ = nullptr;
  }
  if (from.has_extract_request()) {
    extract_request_ = new ::ExtractRequest(*from.extract_request_);
  } else {
    extract_request_ = nullptr;
  }
  if (from.has_enroll_request()) {
    enroll_request_ = new ::EnrollRequest(*from.enroll_request_);
  } else {
    enroll_request_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:DetectExtractEnrollRequest)
}

void DetectExtractEnrollRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_DetectExtractEnrollRequest_faro_2fproto_2fface_5fservice_2eproto.base);
  ::memset(&detect_request_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&enroll_request_) -
      reinterpret_cast<char*>(&detect_request_)) + sizeof(enroll_request_));
}

DetectExtractEnrollRequest::~DetectExtractEnrollRequest() {
  // @@protoc_insertion_point(destructor:DetectExtractEnrollRequest)
  SharedDtor();
}

void DetectExtractEnrollRequest::SharedDtor() {
  if (this != internal_default_instance()) delete detect_request_;
  if (this != internal_default_instance()) delete extract_request_;
  if (this != internal_default_instance()) delete enroll_request_;
}

void DetectExtractEnrollRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DetectExtractEnrollRequest& DetectExtractEnrollRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DetectExtractEnrollRequest_faro_2fproto_2fface_5fservice_2eproto.base);
  return *internal_default_instance();
}


void DetectExtractEnrollRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:DetectExtractEnrollRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && detect_request_ != nullptr) {
    delete detect_request_;
  }
  detect_request_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && extract_request_ != nullptr) {
    delete extract_request_;
  }
  extract_request_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && enroll_request_ != nullptr) {
    delete enroll_request_;
  }
  enroll_request_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* DetectExtractEnrollRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .DetectRequest detect_request = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_detect_request(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .ExtractRequest extract_request = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(mutable_extract_request(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .EnrollRequest enroll_request = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(mutable_enroll_request(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool DetectExtractEnrollRequest::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:DetectExtractEnrollRequest)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .DetectRequest detect_request = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_detect_request()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .ExtractRequest extract_request = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_extract_request()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .EnrollRequest enroll_request = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_enroll_request()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:DetectExtractEnrollRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:DetectExtractEnrollRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void DetectExtractEnrollRequest::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:DetectExtractEnrollRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .DetectRequest detect_request = 1;
  if (this->has_detect_request()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::detect_request(this), output);
  }

  // .ExtractRequest extract_request = 2;
  if (this->has_extract_request()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, HasBitSetters::extract_request(this), output);
  }

  // .EnrollRequest enroll_request = 3;
  if (this->has_enroll_request()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, HasBitSetters::enroll_request(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:DetectExtractEnrollRequest)
}

::PROTOBUF_NAMESPACE_ID::uint8* DetectExtractEnrollRequest::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:DetectExtractEnrollRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .DetectRequest detect_request = 1;
  if (this->has_detect_request()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::detect_request(this), target);
  }

  // .ExtractRequest extract_request = 2;
  if (this->has_extract_request()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, HasBitSetters::extract_request(this), target);
  }

  // .EnrollRequest enroll_request = 3;
  if (this->has_enroll_request()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, HasBitSetters::enroll_request(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DetectExtractEnrollRequest)
  return target;
}

size_t DetectExtractEnrollRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:DetectExtractEnrollRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .DetectRequest detect_request = 1;
  if (this->has_detect_request()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *detect_request_);
  }

  // .ExtractRequest extract_request = 2;
  if (this->has_extract_request()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *extract_request_);
  }

  // .EnrollRequest enroll_request = 3;
  if (this->has_enroll_request()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *enroll_request_);
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DetectExtractEnrollRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:DetectExtractEnrollRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const DetectExtractEnrollRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DetectExtractEnrollRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:DetectExtractEnrollRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:DetectExtractEnrollRequest)
    MergeFrom(*source);
  }
}

void DetectExtractEnrollRequest::MergeFrom(const DetectExtractEnrollRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:DetectExtractEnrollRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_detect_request()) {
    mutable_detect_request()->::DetectRequest::MergeFrom(from.detect_request());
  }
  if (from.has_extract_request()) {
    mutable_extract_request()->::ExtractRequest::MergeFrom(from.extract_request());
  }
  if (from.has_enroll_request()) {
    mutable_enroll_request()->::EnrollRequest::MergeFrom(from.enroll_request());
  }
}

void DetectExtractEnrollRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:DetectExtractEnrollRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DetectExtractEnrollRequest::CopyFrom(const DetectExtractEnrollRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:DetectExtractEnrollRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DetectExtractEnrollRequest::IsInitialized() const {
  return true;
}

void DetectExtractEnrollRequest::Swap(DetectExtractEnrollRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DetectExtractEnrollRequest::InternalSwap(DetectExtractEnrollRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(detect_request_, other->detect_request_);
  swap(extract_request_, other->extract_request_);
  swap(enroll_request_, other->enroll_request_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DetectExtractEnrollRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void DetectExtractSearchRequest::InitAsDefaultInstance() {
  ::_DetectExtractSearchRequest_default_instance_._instance.get_mutable()->detect_request_ = const_cast< ::DetectRequest*>(
      ::DetectRequest::internal_default_instance());
  ::_DetectExtractSearchRequest_default_instance_._instance.get_mutable()->extract_request_ = const_cast< ::ExtractRequest*>(
      ::ExtractRequest::internal_default_instance());
  ::_DetectExtractSearchRequest_default_instance_._instance.get_mutable()->search_request_ = const_cast< ::SearchRequest*>(
      ::SearchRequest::internal_default_instance());
}
class DetectExtractSearchRequest::HasBitSetters {
 public:
  static const ::DetectRequest& detect_request(const DetectExtractSearchRequest* msg);
  static const ::ExtractRequest& extract_request(const DetectExtractSearchRequest* msg);
  static const ::SearchRequest& search_request(const DetectExtractSearchRequest* msg);
};

const ::DetectRequest&
DetectExtractSearchRequest::HasBitSetters::detect_request(const DetectExtractSearchRequest* msg) {
  return *msg->detect_request_;
}
const ::ExtractRequest&
DetectExtractSearchRequest::HasBitSetters::extract_request(const DetectExtractSearchRequest* msg) {
  return *msg->extract_request_;
}
const ::SearchRequest&
DetectExtractSearchRequest::HasBitSetters::search_request(const DetectExtractSearchRequest* msg) {
  return *msg->search_request_;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DetectExtractSearchRequest::kDetectRequestFieldNumber;
const int DetectExtractSearchRequest::kExtractRequestFieldNumber;
const int DetectExtractSearchRequest::kSearchRequestFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DetectExtractSearchRequest::DetectExtractSearchRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:DetectExtractSearchRequest)
}
DetectExtractSearchRequest::DetectExtractSearchRequest(const DetectExtractSearchRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_detect_request()) {
    detect_request_ = new ::DetectRequest(*from.detect_request_);
  } else {
    detect_request_ = nullptr;
  }
  if (from.has_extract_request()) {
    extract_request_ = new ::ExtractRequest(*from.extract_request_);
  } else {
    extract_request_ = nullptr;
  }
  if (from.has_search_request()) {
    search_request_ = new ::SearchRequest(*from.search_request_);
  } else {
    search_request_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:DetectExtractSearchRequest)
}

void DetectExtractSearchRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_DetectExtractSearchRequest_faro_2fproto_2fface_5fservice_2eproto.base);
  ::memset(&detect_request_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&search_request_) -
      reinterpret_cast<char*>(&detect_request_)) + sizeof(search_request_));
}

DetectExtractSearchRequest::~DetectExtractSearchRequest() {
  // @@protoc_insertion_point(destructor:DetectExtractSearchRequest)
  SharedDtor();
}

void DetectExtractSearchRequest::SharedDtor() {
  if (this != internal_default_instance()) delete detect_request_;
  if (this != internal_default_instance()) delete extract_request_;
  if (this != internal_default_instance()) delete search_request_;
}

void DetectExtractSearchRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DetectExtractSearchRequest& DetectExtractSearchRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DetectExtractSearchRequest_faro_2fproto_2fface_5fservice_2eproto.base);
  return *internal_default_instance();
}


void DetectExtractSearchRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:DetectExtractSearchRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && detect_request_ != nullptr) {
    delete detect_request_;
  }
  detect_request_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && extract_request_ != nullptr) {
    delete extract_request_;
  }
  extract_request_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && search_request_ != nullptr) {
    delete search_request_;
  }
  search_request_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* DetectExtractSearchRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .DetectRequest detect_request = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_detect_request(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .ExtractRequest extract_request = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(mutable_extract_request(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .SearchRequest search_request = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(mutable_search_request(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool DetectExtractSearchRequest::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:DetectExtractSearchRequest)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .DetectRequest detect_request = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_detect_request()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .ExtractRequest extract_request = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_extract_request()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .SearchRequest search_request = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_search_request()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:DetectExtractSearchRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:DetectExtractSearchRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void DetectExtractSearchRequest::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:DetectExtractSearchRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .DetectRequest detect_request = 1;
  if (this->has_detect_request()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::detect_request(this), output);
  }

  // .ExtractRequest extract_request = 2;
  if (this->has_extract_request()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, HasBitSetters::extract_request(this), output);
  }

  // .SearchRequest search_request = 3;
  if (this->has_search_request()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, HasBitSetters::search_request(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:DetectExtractSearchRequest)
}

::PROTOBUF_NAMESPACE_ID::uint8* DetectExtractSearchRequest::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:DetectExtractSearchRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .DetectRequest detect_request = 1;
  if (this->has_detect_request()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::detect_request(this), target);
  }

  // .ExtractRequest extract_request = 2;
  if (this->has_extract_request()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, HasBitSetters::extract_request(this), target);
  }

  // .SearchRequest search_request = 3;
  if (this->has_search_request()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, HasBitSetters::search_request(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DetectExtractSearchRequest)
  return target;
}

size_t DetectExtractSearchRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:DetectExtractSearchRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .DetectRequest detect_request = 1;
  if (this->has_detect_request()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *detect_request_);
  }

  // .ExtractRequest extract_request = 2;
  if (this->has_extract_request()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *extract_request_);
  }

  // .SearchRequest search_request = 3;
  if (this->has_search_request()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *search_request_);
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DetectExtractSearchRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:DetectExtractSearchRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const DetectExtractSearchRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DetectExtractSearchRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:DetectExtractSearchRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:DetectExtractSearchRequest)
    MergeFrom(*source);
  }
}

void DetectExtractSearchRequest::MergeFrom(const DetectExtractSearchRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:DetectExtractSearchRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_detect_request()) {
    mutable_detect_request()->::DetectRequest::MergeFrom(from.detect_request());
  }
  if (from.has_extract_request()) {
    mutable_extract_request()->::ExtractRequest::MergeFrom(from.extract_request());
  }
  if (from.has_search_request()) {
    mutable_search_request()->::SearchRequest::MergeFrom(from.search_request());
  }
}

void DetectExtractSearchRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:DetectExtractSearchRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DetectExtractSearchRequest::CopyFrom(const DetectExtractSearchRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:DetectExtractSearchRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DetectExtractSearchRequest::IsInitialized() const {
  return true;
}

void DetectExtractSearchRequest::Swap(DetectExtractSearchRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DetectExtractSearchRequest::InternalSwap(DetectExtractSearchRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(detect_request_, other->detect_request_);
  swap(extract_request_, other->extract_request_);
  swap(search_request_, other->search_request_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DetectExtractSearchRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void FaceStatusRequest::InitAsDefaultInstance() {
}
class FaceStatusRequest::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

FaceStatusRequest::FaceStatusRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:FaceStatusRequest)
}
FaceStatusRequest::FaceStatusRequest(const FaceStatusRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:FaceStatusRequest)
}

void FaceStatusRequest::SharedCtor() {
}

FaceStatusRequest::~FaceStatusRequest() {
  // @@protoc_insertion_point(destructor:FaceStatusRequest)
  SharedDtor();
}

void FaceStatusRequest::SharedDtor() {
}

void FaceStatusRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const FaceStatusRequest& FaceStatusRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_FaceStatusRequest_faro_2fproto_2fface_5fservice_2eproto.base);
  return *internal_default_instance();
}


void FaceStatusRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:FaceStatusRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* FaceStatusRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      default: {
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool FaceStatusRequest::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:FaceStatusRequest)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:FaceStatusRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:FaceStatusRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void FaceStatusRequest::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:FaceStatusRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:FaceStatusRequest)
}

::PROTOBUF_NAMESPACE_ID::uint8* FaceStatusRequest::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:FaceStatusRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:FaceStatusRequest)
  return target;
}

size_t FaceStatusRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:FaceStatusRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FaceStatusRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:FaceStatusRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const FaceStatusRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<FaceStatusRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:FaceStatusRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:FaceStatusRequest)
    MergeFrom(*source);
  }
}

void FaceStatusRequest::MergeFrom(const FaceStatusRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:FaceStatusRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void FaceStatusRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:FaceStatusRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FaceStatusRequest::CopyFrom(const FaceStatusRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:FaceStatusRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FaceStatusRequest::IsInitialized() const {
  return true;
}

void FaceStatusRequest::Swap(FaceStatusRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void FaceStatusRequest::InternalSwap(FaceStatusRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata FaceStatusRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void FaceServiceInfo::InitAsDefaultInstance() {
}
class FaceServiceInfo::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int FaceServiceInfo::kStatusFieldNumber;
const int FaceServiceInfo::kWorkerCountFieldNumber;
const int FaceServiceInfo::kDetectionSupportFieldNumber;
const int FaceServiceInfo::kExtractSupportFieldNumber;
const int FaceServiceInfo::kScoreSupportFieldNumber;
const int FaceServiceInfo::kAttributeSupportFieldNumber;
const int FaceServiceInfo::kScoreTypeFieldNumber;
const int FaceServiceInfo::kDetectionThresholdFieldNumber;
const int FaceServiceInfo::kMatchThresholdFieldNumber;
const int FaceServiceInfo::kAlgorithmFieldNumber;
const int FaceServiceInfo::kNotesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

FaceServiceInfo::FaceServiceInfo()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:FaceServiceInfo)
}
FaceServiceInfo::FaceServiceInfo(const FaceServiceInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  algorithm_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.algorithm().size() > 0) {
    algorithm_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.algorithm_);
  }
  notes_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.notes().size() > 0) {
    notes_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.notes_);
  }
  ::memcpy(&status_, &from.status_,
    static_cast<size_t>(reinterpret_cast<char*>(&match_threshold_) -
    reinterpret_cast<char*>(&status_)) + sizeof(match_threshold_));
  // @@protoc_insertion_point(copy_constructor:FaceServiceInfo)
}

void FaceServiceInfo::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_FaceServiceInfo_faro_2fproto_2fface_5fservice_2eproto.base);
  algorithm_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  notes_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&status_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&match_threshold_) -
      reinterpret_cast<char*>(&status_)) + sizeof(match_threshold_));
}

FaceServiceInfo::~FaceServiceInfo() {
  // @@protoc_insertion_point(destructor:FaceServiceInfo)
  SharedDtor();
}

void FaceServiceInfo::SharedDtor() {
  algorithm_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  notes_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void FaceServiceInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const FaceServiceInfo& FaceServiceInfo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_FaceServiceInfo_faro_2fproto_2fface_5fservice_2eproto.base);
  return *internal_default_instance();
}


void FaceServiceInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:FaceServiceInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  algorithm_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  notes_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&status_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&match_threshold_) -
      reinterpret_cast<char*>(&status_)) + sizeof(match_threshold_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* FaceServiceInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .ServiceStatus status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          set_status(static_cast<::ServiceStatus>(val));
        } else goto handle_unusual;
        continue;
      // int32 worker_count = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          worker_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool detection_support = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          detection_support_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool extract_support = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          extract_support_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool score_support = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          score_support_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool attribute_support = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          attribute_support_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .ScoreType score_type = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          set_score_type(static_cast<::ScoreType>(val));
        } else goto handle_unusual;
        continue;
      // float detection_threshold = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 69)) {
          detection_threshold_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float match_threshold = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 77)) {
          match_threshold_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // string algorithm = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_algorithm(), ptr, ctx, "FaceServiceInfo.algorithm");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string notes = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_notes(), ptr, ctx, "FaceServiceInfo.notes");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool FaceServiceInfo::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:FaceServiceInfo)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .ServiceStatus status = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_status(static_cast< ::ServiceStatus >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 worker_count = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &worker_count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool detection_support = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &detection_support_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool extract_support = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (32 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &extract_support_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool score_support = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (40 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &score_support_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool attribute_support = 6;
      case 6: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (48 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &attribute_support_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .ScoreType score_type = 7;
      case 7: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (56 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_score_type(static_cast< ::ScoreType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float detection_threshold = 8;
      case 8: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (69 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &detection_threshold_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float match_threshold = 9;
      case 9: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (77 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &match_threshold_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string algorithm = 10;
      case 10: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (82 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_algorithm()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->algorithm().data(), static_cast<int>(this->algorithm().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "FaceServiceInfo.algorithm"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string notes = 11;
      case 11: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (90 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_notes()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->notes().data(), static_cast<int>(this->notes().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "FaceServiceInfo.notes"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:FaceServiceInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:FaceServiceInfo)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void FaceServiceInfo::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:FaceServiceInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .ServiceStatus status = 1;
  if (this->status() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      1, this->status(), output);
  }

  // int32 worker_count = 2;
  if (this->worker_count() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(2, this->worker_count(), output);
  }

  // bool detection_support = 3;
  if (this->detection_support() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(3, this->detection_support(), output);
  }

  // bool extract_support = 4;
  if (this->extract_support() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(4, this->extract_support(), output);
  }

  // bool score_support = 5;
  if (this->score_support() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(5, this->score_support(), output);
  }

  // bool attribute_support = 6;
  if (this->attribute_support() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(6, this->attribute_support(), output);
  }

  // .ScoreType score_type = 7;
  if (this->score_type() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      7, this->score_type(), output);
  }

  // float detection_threshold = 8;
  if (!(this->detection_threshold() <= 0 && this->detection_threshold() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(8, this->detection_threshold(), output);
  }

  // float match_threshold = 9;
  if (!(this->match_threshold() <= 0 && this->match_threshold() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(9, this->match_threshold(), output);
  }

  // string algorithm = 10;
  if (this->algorithm().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->algorithm().data(), static_cast<int>(this->algorithm().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "FaceServiceInfo.algorithm");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      10, this->algorithm(), output);
  }

  // string notes = 11;
  if (this->notes().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->notes().data(), static_cast<int>(this->notes().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "FaceServiceInfo.notes");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      11, this->notes(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:FaceServiceInfo)
}

::PROTOBUF_NAMESPACE_ID::uint8* FaceServiceInfo::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:FaceServiceInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .ServiceStatus status = 1;
  if (this->status() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->status(), target);
  }

  // int32 worker_count = 2;
  if (this->worker_count() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->worker_count(), target);
  }

  // bool detection_support = 3;
  if (this->detection_support() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->detection_support(), target);
  }

  // bool extract_support = 4;
  if (this->extract_support() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->extract_support(), target);
  }

  // bool score_support = 5;
  if (this->score_support() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(5, this->score_support(), target);
  }

  // bool attribute_support = 6;
  if (this->attribute_support() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(6, this->attribute_support(), target);
  }

  // .ScoreType score_type = 7;
  if (this->score_type() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      7, this->score_type(), target);
  }

  // float detection_threshold = 8;
  if (!(this->detection_threshold() <= 0 && this->detection_threshold() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(8, this->detection_threshold(), target);
  }

  // float match_threshold = 9;
  if (!(this->match_threshold() <= 0 && this->match_threshold() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(9, this->match_threshold(), target);
  }

  // string algorithm = 10;
  if (this->algorithm().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->algorithm().data(), static_cast<int>(this->algorithm().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "FaceServiceInfo.algorithm");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        10, this->algorithm(), target);
  }

  // string notes = 11;
  if (this->notes().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->notes().data(), static_cast<int>(this->notes().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "FaceServiceInfo.notes");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        11, this->notes(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:FaceServiceInfo)
  return target;
}

size_t FaceServiceInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:FaceServiceInfo)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string algorithm = 10;
  if (this->algorithm().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->algorithm());
  }

  // string notes = 11;
  if (this->notes().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->notes());
  }

  // .ServiceStatus status = 1;
  if (this->status() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->status());
  }

  // int32 worker_count = 2;
  if (this->worker_count() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->worker_count());
  }

  // bool detection_support = 3;
  if (this->detection_support() != 0) {
    total_size += 1 + 1;
  }

  // bool extract_support = 4;
  if (this->extract_support() != 0) {
    total_size += 1 + 1;
  }

  // bool score_support = 5;
  if (this->score_support() != 0) {
    total_size += 1 + 1;
  }

  // bool attribute_support = 6;
  if (this->attribute_support() != 0) {
    total_size += 1 + 1;
  }

  // .ScoreType score_type = 7;
  if (this->score_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->score_type());
  }

  // float detection_threshold = 8;
  if (!(this->detection_threshold() <= 0 && this->detection_threshold() >= 0)) {
    total_size += 1 + 4;
  }

  // float match_threshold = 9;
  if (!(this->match_threshold() <= 0 && this->match_threshold() >= 0)) {
    total_size += 1 + 4;
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FaceServiceInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:FaceServiceInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const FaceServiceInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<FaceServiceInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:FaceServiceInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:FaceServiceInfo)
    MergeFrom(*source);
  }
}

void FaceServiceInfo::MergeFrom(const FaceServiceInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:FaceServiceInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.algorithm().size() > 0) {

    algorithm_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.algorithm_);
  }
  if (from.notes().size() > 0) {

    notes_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.notes_);
  }
  if (from.status() != 0) {
    set_status(from.status());
  }
  if (from.worker_count() != 0) {
    set_worker_count(from.worker_count());
  }
  if (from.detection_support() != 0) {
    set_detection_support(from.detection_support());
  }
  if (from.extract_support() != 0) {
    set_extract_support(from.extract_support());
  }
  if (from.score_support() != 0) {
    set_score_support(from.score_support());
  }
  if (from.attribute_support() != 0) {
    set_attribute_support(from.attribute_support());
  }
  if (from.score_type() != 0) {
    set_score_type(from.score_type());
  }
  if (!(from.detection_threshold() <= 0 && from.detection_threshold() >= 0)) {
    set_detection_threshold(from.detection_threshold());
  }
  if (!(from.match_threshold() <= 0 && from.match_threshold() >= 0)) {
    set_match_threshold(from.match_threshold());
  }
}

void FaceServiceInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:FaceServiceInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FaceServiceInfo::CopyFrom(const FaceServiceInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:FaceServiceInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FaceServiceInfo::IsInitialized() const {
  return true;
}

void FaceServiceInfo::Swap(FaceServiceInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void FaceServiceInfo::InternalSwap(FaceServiceInfo* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  algorithm_.Swap(&other->algorithm_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  notes_.Swap(&other->notes_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(status_, other->status_);
  swap(worker_count_, other->worker_count_);
  swap(detection_support_, other->detection_support_);
  swap(extract_support_, other->extract_support_);
  swap(score_support_, other->score_support_);
  swap(attribute_support_, other->attribute_support_);
  swap(score_type_, other->score_type_);
  swap(detection_threshold_, other->detection_threshold_);
  swap(match_threshold_, other->match_threshold_);
}

::PROTOBUF_NAMESPACE_ID::Metadata FaceServiceInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GalleryListRequest::InitAsDefaultInstance() {
}
class GalleryListRequest::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GalleryListRequest::GalleryListRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GalleryListRequest)
}
GalleryListRequest::GalleryListRequest(const GalleryListRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:GalleryListRequest)
}

void GalleryListRequest::SharedCtor() {
}

GalleryListRequest::~GalleryListRequest() {
  // @@protoc_insertion_point(destructor:GalleryListRequest)
  SharedDtor();
}

void GalleryListRequest::SharedDtor() {
}

void GalleryListRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GalleryListRequest& GalleryListRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GalleryListRequest_faro_2fproto_2fface_5fservice_2eproto.base);
  return *internal_default_instance();
}


void GalleryListRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:GalleryListRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* GalleryListRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      default: {
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool GalleryListRequest::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:GalleryListRequest)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:GalleryListRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GalleryListRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void GalleryListRequest::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GalleryListRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GalleryListRequest)
}

::PROTOBUF_NAMESPACE_ID::uint8* GalleryListRequest::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:GalleryListRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GalleryListRequest)
  return target;
}

size_t GalleryListRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:GalleryListRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GalleryListRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:GalleryListRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const GalleryListRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GalleryListRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:GalleryListRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:GalleryListRequest)
    MergeFrom(*source);
  }
}

void GalleryListRequest::MergeFrom(const GalleryListRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:GalleryListRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void GalleryListRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:GalleryListRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GalleryListRequest::CopyFrom(const GalleryListRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:GalleryListRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GalleryListRequest::IsInitialized() const {
  return true;
}

void GalleryListRequest::Swap(GalleryListRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GalleryListRequest::InternalSwap(GalleryListRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GalleryListRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GalleryDeleteRequest::InitAsDefaultInstance() {
}
class GalleryDeleteRequest::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GalleryDeleteRequest::kGalleryNameFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GalleryDeleteRequest::GalleryDeleteRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GalleryDeleteRequest)
}
GalleryDeleteRequest::GalleryDeleteRequest(const GalleryDeleteRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  gallery_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.gallery_name().size() > 0) {
    gallery_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.gallery_name_);
  }
  // @@protoc_insertion_point(copy_constructor:GalleryDeleteRequest)
}

void GalleryDeleteRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GalleryDeleteRequest_faro_2fproto_2fface_5fservice_2eproto.base);
  gallery_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

GalleryDeleteRequest::~GalleryDeleteRequest() {
  // @@protoc_insertion_point(destructor:GalleryDeleteRequest)
  SharedDtor();
}

void GalleryDeleteRequest::SharedDtor() {
  gallery_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void GalleryDeleteRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GalleryDeleteRequest& GalleryDeleteRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GalleryDeleteRequest_faro_2fproto_2fface_5fservice_2eproto.base);
  return *internal_default_instance();
}


void GalleryDeleteRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:GalleryDeleteRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  gallery_name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* GalleryDeleteRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string gallery_name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_gallery_name(), ptr, ctx, "GalleryDeleteRequest.gallery_name");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool GalleryDeleteRequest::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:GalleryDeleteRequest)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string gallery_name = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_gallery_name()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->gallery_name().data(), static_cast<int>(this->gallery_name().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "GalleryDeleteRequest.gallery_name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GalleryDeleteRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GalleryDeleteRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void GalleryDeleteRequest::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GalleryDeleteRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string gallery_name = 1;
  if (this->gallery_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->gallery_name().data(), static_cast<int>(this->gallery_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "GalleryDeleteRequest.gallery_name");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->gallery_name(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GalleryDeleteRequest)
}

::PROTOBUF_NAMESPACE_ID::uint8* GalleryDeleteRequest::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:GalleryDeleteRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string gallery_name = 1;
  if (this->gallery_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->gallery_name().data(), static_cast<int>(this->gallery_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "GalleryDeleteRequest.gallery_name");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        1, this->gallery_name(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GalleryDeleteRequest)
  return target;
}

size_t GalleryDeleteRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:GalleryDeleteRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string gallery_name = 1;
  if (this->gallery_name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->gallery_name());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GalleryDeleteRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:GalleryDeleteRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const GalleryDeleteRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GalleryDeleteRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:GalleryDeleteRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:GalleryDeleteRequest)
    MergeFrom(*source);
  }
}

void GalleryDeleteRequest::MergeFrom(const GalleryDeleteRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:GalleryDeleteRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.gallery_name().size() > 0) {

    gallery_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.gallery_name_);
  }
}

void GalleryDeleteRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:GalleryDeleteRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GalleryDeleteRequest::CopyFrom(const GalleryDeleteRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:GalleryDeleteRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GalleryDeleteRequest::IsInitialized() const {
  return true;
}

void GalleryDeleteRequest::Swap(GalleryDeleteRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GalleryDeleteRequest::InternalSwap(GalleryDeleteRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  gallery_name_.Swap(&other->gallery_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata GalleryDeleteRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void EnrollmentListRequest::InitAsDefaultInstance() {
}
class EnrollmentListRequest::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int EnrollmentListRequest::kGalleryNameFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

EnrollmentListRequest::EnrollmentListRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:EnrollmentListRequest)
}
EnrollmentListRequest::EnrollmentListRequest(const EnrollmentListRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  gallery_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.gallery_name().size() > 0) {
    gallery_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.gallery_name_);
  }
  // @@protoc_insertion_point(copy_constructor:EnrollmentListRequest)
}

void EnrollmentListRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_EnrollmentListRequest_faro_2fproto_2fface_5fservice_2eproto.base);
  gallery_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

EnrollmentListRequest::~EnrollmentListRequest() {
  // @@protoc_insertion_point(destructor:EnrollmentListRequest)
  SharedDtor();
}

void EnrollmentListRequest::SharedDtor() {
  gallery_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void EnrollmentListRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const EnrollmentListRequest& EnrollmentListRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_EnrollmentListRequest_faro_2fproto_2fface_5fservice_2eproto.base);
  return *internal_default_instance();
}


void EnrollmentListRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:EnrollmentListRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  gallery_name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* EnrollmentListRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string gallery_name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_gallery_name(), ptr, ctx, "EnrollmentListRequest.gallery_name");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool EnrollmentListRequest::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:EnrollmentListRequest)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string gallery_name = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_gallery_name()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->gallery_name().data(), static_cast<int>(this->gallery_name().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "EnrollmentListRequest.gallery_name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:EnrollmentListRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:EnrollmentListRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void EnrollmentListRequest::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:EnrollmentListRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string gallery_name = 1;
  if (this->gallery_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->gallery_name().data(), static_cast<int>(this->gallery_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "EnrollmentListRequest.gallery_name");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->gallery_name(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:EnrollmentListRequest)
}

::PROTOBUF_NAMESPACE_ID::uint8* EnrollmentListRequest::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:EnrollmentListRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string gallery_name = 1;
  if (this->gallery_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->gallery_name().data(), static_cast<int>(this->gallery_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "EnrollmentListRequest.gallery_name");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        1, this->gallery_name(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:EnrollmentListRequest)
  return target;
}

size_t EnrollmentListRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:EnrollmentListRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string gallery_name = 1;
  if (this->gallery_name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->gallery_name());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void EnrollmentListRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:EnrollmentListRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const EnrollmentListRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<EnrollmentListRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:EnrollmentListRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:EnrollmentListRequest)
    MergeFrom(*source);
  }
}

void EnrollmentListRequest::MergeFrom(const EnrollmentListRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:EnrollmentListRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.gallery_name().size() > 0) {

    gallery_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.gallery_name_);
  }
}

void EnrollmentListRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:EnrollmentListRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EnrollmentListRequest::CopyFrom(const EnrollmentListRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:EnrollmentListRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EnrollmentListRequest::IsInitialized() const {
  return true;
}

void EnrollmentListRequest::Swap(EnrollmentListRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void EnrollmentListRequest::InternalSwap(EnrollmentListRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  gallery_name_.Swap(&other->gallery_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata EnrollmentListRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void EnrollmentInfo::InitAsDefaultInstance() {
}
class EnrollmentInfo::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int EnrollmentInfo::kSubjectIdFieldNumber;
const int EnrollmentInfo::kNameFieldNumber;
const int EnrollmentInfo::kFaceCountFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

EnrollmentInfo::EnrollmentInfo()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:EnrollmentInfo)
}
EnrollmentInfo::EnrollmentInfo(const EnrollmentInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  subject_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.subject_id().size() > 0) {
    subject_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.subject_id_);
  }
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.name().size() > 0) {
    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  face_count_ = from.face_count_;
  // @@protoc_insertion_point(copy_constructor:EnrollmentInfo)
}

void EnrollmentInfo::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_EnrollmentInfo_faro_2fproto_2fface_5fservice_2eproto.base);
  subject_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  face_count_ = 0;
}

EnrollmentInfo::~EnrollmentInfo() {
  // @@protoc_insertion_point(destructor:EnrollmentInfo)
  SharedDtor();
}

void EnrollmentInfo::SharedDtor() {
  subject_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void EnrollmentInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const EnrollmentInfo& EnrollmentInfo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_EnrollmentInfo_faro_2fproto_2fface_5fservice_2eproto.base);
  return *internal_default_instance();
}


void EnrollmentInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:EnrollmentInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  subject_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  face_count_ = 0;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* EnrollmentInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string subject_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_subject_id(), ptr, ctx, "EnrollmentInfo.subject_id");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_name(), ptr, ctx, "EnrollmentInfo.name");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 face_count = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          face_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool EnrollmentInfo::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:EnrollmentInfo)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string subject_id = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_subject_id()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->subject_id().data(), static_cast<int>(this->subject_id().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "EnrollmentInfo.subject_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string name = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), static_cast<int>(this->name().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "EnrollmentInfo.name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 face_count = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &face_count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:EnrollmentInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:EnrollmentInfo)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void EnrollmentInfo::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:EnrollmentInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string subject_id = 1;
  if (this->subject_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->subject_id().data(), static_cast<int>(this->subject_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "EnrollmentInfo.subject_id");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->subject_id(), output);
  }

  // string name = 2;
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "EnrollmentInfo.name");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->name(), output);
  }

  // int32 face_count = 3;
  if (this->face_count() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(3, this->face_count(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:EnrollmentInfo)
}

::PROTOBUF_NAMESPACE_ID::uint8* EnrollmentInfo::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:EnrollmentInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string subject_id = 1;
  if (this->subject_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->subject_id().data(), static_cast<int>(this->subject_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "EnrollmentInfo.subject_id");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        1, this->subject_id(), target);
  }

  // string name = 2;
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "EnrollmentInfo.name");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }

  // int32 face_count = 3;
  if (this->face_count() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->face_count(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:EnrollmentInfo)
  return target;
}

size_t EnrollmentInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:EnrollmentInfo)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string subject_id = 1;
  if (this->subject_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->subject_id());
  }

  // string name = 2;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->name());
  }

  // int32 face_count = 3;
  if (this->face_count() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->face_count());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void EnrollmentInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:EnrollmentInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const EnrollmentInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<EnrollmentInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:EnrollmentInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:EnrollmentInfo)
    MergeFrom(*source);
  }
}

void EnrollmentInfo::MergeFrom(const EnrollmentInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:EnrollmentInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.subject_id().size() > 0) {

    subject_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.subject_id_);
  }
  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.face_count() != 0) {
    set_face_count(from.face_count());
  }
}

void EnrollmentInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:EnrollmentInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EnrollmentInfo::CopyFrom(const EnrollmentInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:EnrollmentInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EnrollmentInfo::IsInitialized() const {
  return true;
}

void EnrollmentInfo::Swap(EnrollmentInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void EnrollmentInfo::InternalSwap(EnrollmentInfo* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  subject_id_.Swap(&other->subject_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(face_count_, other->face_count_);
}

::PROTOBUF_NAMESPACE_ID::Metadata EnrollmentInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void EnrollmentListResponse::InitAsDefaultInstance() {
}
class EnrollmentListResponse::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int EnrollmentListResponse::kGalleryNameFieldNumber;
const int EnrollmentListResponse::kEnrollmentsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

EnrollmentListResponse::EnrollmentListResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:EnrollmentListResponse)
}
EnrollmentListResponse::EnrollmentListResponse(const EnrollmentListResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      enrollments_(from.enrollments_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  gallery_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.gallery_name().size() > 0) {
    gallery_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.gallery_name_);
  }
  // @@protoc_insertion_point(copy_constructor:EnrollmentListResponse)
}

void EnrollmentListResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_EnrollmentListResponse_faro_2fproto_2fface_5fservice_2eproto.base);
  gallery_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

EnrollmentListResponse::~EnrollmentListResponse() {
  // @@protoc_insertion_point(destructor:EnrollmentListResponse)
  SharedDtor();
}

void EnrollmentListResponse::SharedDtor() {
  gallery_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void EnrollmentListResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const EnrollmentListResponse& EnrollmentListResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_EnrollmentListResponse_faro_2fproto_2fface_5fservice_2eproto.base);
  return *internal_default_instance();
}


void EnrollmentListResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:EnrollmentListResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  enrollments_.Clear();
  gallery_name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* EnrollmentListResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string gallery_name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_gallery_name(), ptr, ctx, "EnrollmentListResponse.gallery_name");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .EnrollmentInfo enrollments = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_enrollments(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 18);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool EnrollmentListResponse::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:EnrollmentListResponse)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string gallery_name = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_gallery_name()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->gallery_name().data(), static_cast<int>(this->gallery_name().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "EnrollmentListResponse.gallery_name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .EnrollmentInfo enrollments = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_enrollments()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:EnrollmentListResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:EnrollmentListResponse)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void EnrollmentListResponse::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:EnrollmentListResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string gallery_name = 1;
  if (this->gallery_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->gallery_name().data(), static_cast<int>(this->gallery_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "EnrollmentListResponse.gallery_name");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->gallery_name(), output);
  }

  // repeated .EnrollmentInfo enrollments = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->enrollments_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      2,
      this->enrollments(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:EnrollmentListResponse)
}

::PROTOBUF_NAMESPACE_ID::uint8* EnrollmentListResponse::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:EnrollmentListResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string gallery_name = 1;
  if (this->gallery_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->gallery_name().data(), static_cast<int>(this->gallery_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "EnrollmentListResponse.gallery_name");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        1, this->gallery_name(), target);
  }

  // repeated .EnrollmentInfo enrollments = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->enrollments_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->enrollments(static_cast<int>(i)), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:EnrollmentListResponse)
  return target;
}

size_t EnrollmentListResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:EnrollmentListResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .EnrollmentInfo enrollments = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->enrollments_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->enrollments(static_cast<int>(i)));
    }
  }

  // string gallery_name = 1;
  if (this->gallery_name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->gallery_name());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void EnrollmentListResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:EnrollmentListResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const EnrollmentListResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<EnrollmentListResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:EnrollmentListResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:EnrollmentListResponse)
    MergeFrom(*source);
  }
}

void EnrollmentListResponse::MergeFrom(const EnrollmentListResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:EnrollmentListResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  enrollments_.MergeFrom(from.enrollments_);
  if (from.gallery_name().size() > 0) {

    gallery_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.gallery_name_);
  }
}

void EnrollmentListResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:EnrollmentListResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EnrollmentListResponse::CopyFrom(const EnrollmentListResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:EnrollmentListResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EnrollmentListResponse::IsInitialized() const {
  return true;
}

void EnrollmentListResponse::Swap(EnrollmentListResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void EnrollmentListResponse::InternalSwap(EnrollmentListResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  CastToBase(&enrollments_)->InternalSwap(CastToBase(&other->enrollments_));
  gallery_name_.Swap(&other->gallery_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata EnrollmentListResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void EnrollmentDeleteRequest::InitAsDefaultInstance() {
}
class EnrollmentDeleteRequest::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int EnrollmentDeleteRequest::kGalleryNameFieldNumber;
const int EnrollmentDeleteRequest::kSubjectIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

EnrollmentDeleteRequest::EnrollmentDeleteRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:EnrollmentDeleteRequest)
}
EnrollmentDeleteRequest::EnrollmentDeleteRequest(const EnrollmentDeleteRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  gallery_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.gallery_name().size() > 0) {
    gallery_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.gallery_name_);
  }
  subject_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.subject_id().size() > 0) {
    subject_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.subject_id_);
  }
  // @@protoc_insertion_point(copy_constructor:EnrollmentDeleteRequest)
}

void EnrollmentDeleteRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_EnrollmentDeleteRequest_faro_2fproto_2fface_5fservice_2eproto.base);
  gallery_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  subject_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

EnrollmentDeleteRequest::~EnrollmentDeleteRequest() {
  // @@protoc_insertion_point(destructor:EnrollmentDeleteRequest)
  SharedDtor();
}

void EnrollmentDeleteRequest::SharedDtor() {
  gallery_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  subject_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void EnrollmentDeleteRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const EnrollmentDeleteRequest& EnrollmentDeleteRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_EnrollmentDeleteRequest_faro_2fproto_2fface_5fservice_2eproto.base);
  return *internal_default_instance();
}


void EnrollmentDeleteRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:EnrollmentDeleteRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  gallery_name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  subject_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* EnrollmentDeleteRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string gallery_name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_gallery_name(), ptr, ctx, "EnrollmentDeleteRequest.gallery_name");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string subject_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_subject_id(), ptr, ctx, "EnrollmentDeleteRequest.subject_id");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool EnrollmentDeleteRequest::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:EnrollmentDeleteRequest)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string gallery_name = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_gallery_name()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->gallery_name().data(), static_cast<int>(this->gallery_name().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "EnrollmentDeleteRequest.gallery_name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string subject_id = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_subject_id()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->subject_id().data(), static_cast<int>(this->subject_id().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "EnrollmentDeleteRequest.subject_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:EnrollmentDeleteRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:EnrollmentDeleteRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void EnrollmentDeleteRequest::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:EnrollmentDeleteRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string gallery_name = 1;
  if (this->gallery_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->gallery_name().data(), static_cast<int>(this->gallery_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "EnrollmentDeleteRequest.gallery_name");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->gallery_name(), output);
  }

  // string subject_id = 2;
  if (this->subject_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->subject_id().data(), static_cast<int>(this->subject_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "EnrollmentDeleteRequest.subject_id");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->subject_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:EnrollmentDeleteRequest)
}

::PROTOBUF_NAMESPACE_ID::uint8* EnrollmentDeleteRequest::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:EnrollmentDeleteRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string gallery_name = 1;
  if (this->gallery_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->gallery_name().data(), static_cast<int>(this->gallery_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "EnrollmentDeleteRequest.gallery_name");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        1, this->gallery_name(), target);
  }

  // string subject_id = 2;
  if (this->subject_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->subject_id().data(), static_cast<int>(this->subject_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "EnrollmentDeleteRequest.subject_id");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        2, this->subject_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:EnrollmentDeleteRequest)
  return target;
}

size_t EnrollmentDeleteRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:EnrollmentDeleteRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string gallery_name = 1;
  if (this->gallery_name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->gallery_name());
  }

  // string subject_id = 2;
  if (this->subject_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->subject_id());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void EnrollmentDeleteRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:EnrollmentDeleteRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const EnrollmentDeleteRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<EnrollmentDeleteRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:EnrollmentDeleteRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:EnrollmentDeleteRequest)
    MergeFrom(*source);
  }
}

void EnrollmentDeleteRequest::MergeFrom(const EnrollmentDeleteRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:EnrollmentDeleteRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.gallery_name().size() > 0) {

    gallery_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.gallery_name_);
  }
  if (from.subject_id().size() > 0) {

    subject_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.subject_id_);
  }
}

void EnrollmentDeleteRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:EnrollmentDeleteRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EnrollmentDeleteRequest::CopyFrom(const EnrollmentDeleteRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:EnrollmentDeleteRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EnrollmentDeleteRequest::IsInitialized() const {
  return true;
}

void EnrollmentDeleteRequest::Swap(EnrollmentDeleteRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void EnrollmentDeleteRequest::InternalSwap(EnrollmentDeleteRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  gallery_name_.Swap(&other->gallery_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  subject_id_.Swap(&other->subject_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata EnrollmentDeleteRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GalleryInfo::InitAsDefaultInstance() {
}
class GalleryInfo::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GalleryInfo::kGalleryNameFieldNumber;
const int GalleryInfo::kFaceCountFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GalleryInfo::GalleryInfo()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GalleryInfo)
}
GalleryInfo::GalleryInfo(const GalleryInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  gallery_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.gallery_name().size() > 0) {
    gallery_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.gallery_name_);
  }
  face_count_ = from.face_count_;
  // @@protoc_insertion_point(copy_constructor:GalleryInfo)
}

void GalleryInfo::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GalleryInfo_faro_2fproto_2fface_5fservice_2eproto.base);
  gallery_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  face_count_ = PROTOBUF_LONGLONG(0);
}

GalleryInfo::~GalleryInfo() {
  // @@protoc_insertion_point(destructor:GalleryInfo)
  SharedDtor();
}

void GalleryInfo::SharedDtor() {
  gallery_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void GalleryInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GalleryInfo& GalleryInfo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GalleryInfo_faro_2fproto_2fface_5fservice_2eproto.base);
  return *internal_default_instance();
}


void GalleryInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:GalleryInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  gallery_name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  face_count_ = PROTOBUF_LONGLONG(0);
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* GalleryInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string gallery_name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_gallery_name(), ptr, ctx, "GalleryInfo.gallery_name");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 face_count = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          face_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool GalleryInfo::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:GalleryInfo)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string gallery_name = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_gallery_name()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->gallery_name().data(), static_cast<int>(this->gallery_name().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "GalleryInfo.gallery_name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 face_count = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &face_count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GalleryInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GalleryInfo)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void GalleryInfo::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GalleryInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string gallery_name = 1;
  if (this->gallery_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->gallery_name().data(), static_cast<int>(this->gallery_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "GalleryInfo.gallery_name");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->gallery_name(), output);
  }

  // int64 face_count = 2;
  if (this->face_count() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(2, this->face_count(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GalleryInfo)
}

::PROTOBUF_NAMESPACE_ID::uint8* GalleryInfo::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:GalleryInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string gallery_name = 1;
  if (this->gallery_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->gallery_name().data(), static_cast<int>(this->gallery_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "GalleryInfo.gallery_name");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        1, this->gallery_name(), target);
  }

  // int64 face_count = 2;
  if (this->face_count() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->face_count(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GalleryInfo)
  return target;
}

size_t GalleryInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:GalleryInfo)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string gallery_name = 1;
  if (this->gallery_name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->gallery_name());
  }

  // int64 face_count = 2;
  if (this->face_count() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->face_count());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GalleryInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:GalleryInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const GalleryInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GalleryInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:GalleryInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:GalleryInfo)
    MergeFrom(*source);
  }
}

void GalleryInfo::MergeFrom(const GalleryInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:GalleryInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.gallery_name().size() > 0) {

    gallery_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.gallery_name_);
  }
  if (from.face_count() != 0) {
    set_face_count(from.face_count());
  }
}

void GalleryInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:GalleryInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GalleryInfo::CopyFrom(const GalleryInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:GalleryInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GalleryInfo::IsInitialized() const {
  return true;
}

void GalleryInfo::Swap(GalleryInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GalleryInfo::InternalSwap(GalleryInfo* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  gallery_name_.Swap(&other->gallery_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(face_count_, other->face_count_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GalleryInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GalleryList::InitAsDefaultInstance() {
}
class GalleryList::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GalleryList::kGalleriesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GalleryList::GalleryList()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GalleryList)
}
GalleryList::GalleryList(const GalleryList& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      galleries_(from.galleries_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:GalleryList)
}

void GalleryList::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GalleryList_faro_2fproto_2fface_5fservice_2eproto.base);
}

GalleryList::~GalleryList() {
  // @@protoc_insertion_point(destructor:GalleryList)
  SharedDtor();
}

void GalleryList::SharedDtor() {
}

void GalleryList::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GalleryList& GalleryList::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GalleryList_faro_2fproto_2fface_5fservice_2eproto.base);
  return *internal_default_instance();
}


void GalleryList::Clear() {
// @@protoc_insertion_point(message_clear_start:GalleryList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  galleries_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* GalleryList::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .GalleryInfo galleries = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_galleries(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 10);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool GalleryList::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:GalleryList)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .GalleryInfo galleries = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_galleries()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GalleryList)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GalleryList)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void GalleryList::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GalleryList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .GalleryInfo galleries = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->galleries_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->galleries(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GalleryList)
}

::PROTOBUF_NAMESPACE_ID::uint8* GalleryList::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:GalleryList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .GalleryInfo galleries = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->galleries_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->galleries(static_cast<int>(i)), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GalleryList)
  return target;
}

size_t GalleryList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:GalleryList)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .GalleryInfo galleries = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->galleries_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->galleries(static_cast<int>(i)));
    }
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GalleryList::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:GalleryList)
  GOOGLE_DCHECK_NE(&from, this);
  const GalleryList* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GalleryList>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:GalleryList)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:GalleryList)
    MergeFrom(*source);
  }
}

void GalleryList::MergeFrom(const GalleryList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:GalleryList)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  galleries_.MergeFrom(from.galleries_);
}

void GalleryList::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:GalleryList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GalleryList::CopyFrom(const GalleryList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:GalleryList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GalleryList::IsInitialized() const {
  return true;
}

void GalleryList::Swap(GalleryList* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GalleryList::InternalSwap(GalleryList* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  CastToBase(&galleries_)->InternalSwap(CastToBase(&other->galleries_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GalleryList::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Empty::InitAsDefaultInstance() {
}
class Empty::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Empty::Empty()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Empty)
}
Empty::Empty(const Empty& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:Empty)
}

void Empty::SharedCtor() {
}

Empty::~Empty() {
  // @@protoc_insertion_point(destructor:Empty)
  SharedDtor();
}

void Empty::SharedDtor() {
}

void Empty::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Empty& Empty::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Empty_faro_2fproto_2fface_5fservice_2eproto.base);
  return *internal_default_instance();
}


void Empty::Clear() {
// @@protoc_insertion_point(message_clear_start:Empty)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* Empty::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      default: {
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool Empty::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:Empty)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:Empty)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Empty)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void Empty::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Empty)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Empty)
}

::PROTOBUF_NAMESPACE_ID::uint8* Empty::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Empty)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Empty)
  return target;
}

size_t Empty::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Empty)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Empty::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Empty)
  GOOGLE_DCHECK_NE(&from, this);
  const Empty* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Empty>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Empty)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Empty)
    MergeFrom(*source);
  }
}

void Empty::MergeFrom(const Empty& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Empty)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void Empty::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Empty)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Empty::CopyFrom(const Empty& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Empty)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Empty::IsInitialized() const {
  return true;
}

void Empty::Swap(Empty* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Empty::InternalSwap(Empty* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Empty::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::Attribute* Arena::CreateMaybeMessage< ::Attribute >(Arena* arena) {
  return Arena::CreateInternal< ::Attribute >(arena);
}
template<> PROTOBUF_NOINLINE ::ErrorMessage* Arena::CreateMaybeMessage< ::ErrorMessage >(Arena* arena) {
  return Arena::CreateInternal< ::ErrorMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::Detection* Arena::CreateMaybeMessage< ::Detection >(Arena* arena) {
  return Arena::CreateInternal< ::Detection >(arena);
}
template<> PROTOBUF_NOINLINE ::Landmark* Arena::CreateMaybeMessage< ::Landmark >(Arena* arena) {
  return Arena::CreateInternal< ::Landmark >(arena);
}
template<> PROTOBUF_NOINLINE ::DetectionOptions* Arena::CreateMaybeMessage< ::DetectionOptions >(Arena* arena) {
  return Arena::CreateInternal< ::DetectionOptions >(arena);
}
template<> PROTOBUF_NOINLINE ::ExtractOptions* Arena::CreateMaybeMessage< ::ExtractOptions >(Arena* arena) {
  return Arena::CreateInternal< ::ExtractOptions >(arena);
}
template<> PROTOBUF_NOINLINE ::EnrollOptions* Arena::CreateMaybeMessage< ::EnrollOptions >(Arena* arena) {
  return Arena::CreateInternal< ::EnrollOptions >(arena);
}
template<> PROTOBUF_NOINLINE ::DetectionList* Arena::CreateMaybeMessage< ::DetectionList >(Arena* arena) {
  return Arena::CreateInternal< ::DetectionList >(arena);
}
template<> PROTOBUF_NOINLINE ::MatchList* Arena::CreateMaybeMessage< ::MatchList >(Arena* arena) {
  return Arena::CreateInternal< ::MatchList >(arena);
}
template<> PROTOBUF_NOINLINE ::MatchInfo* Arena::CreateMaybeMessage< ::MatchInfo >(Arena* arena) {
  return Arena::CreateInternal< ::MatchInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::TemplateInput* Arena::CreateMaybeMessage< ::TemplateInput >(Arena* arena) {
  return Arena::CreateInternal< ::TemplateInput >(arena);
}
template<> PROTOBUF_NOINLINE ::FaceTemplate* Arena::CreateMaybeMessage< ::FaceTemplate >(Arena* arena) {
  return Arena::CreateInternal< ::FaceTemplate >(arena);
}
template<> PROTOBUF_NOINLINE ::TemplateList* Arena::CreateMaybeMessage< ::TemplateList >(Arena* arena) {
  return Arena::CreateInternal< ::TemplateList >(arena);
}
template<> PROTOBUF_NOINLINE ::AccessRecord* Arena::CreateMaybeMessage< ::AccessRecord >(Arena* arena) {
  return Arena::CreateInternal< ::AccessRecord >(arena);
}
template<> PROTOBUF_NOINLINE ::FaceRecord* Arena::CreateMaybeMessage< ::FaceRecord >(Arena* arena) {
  return Arena::CreateInternal< ::FaceRecord >(arena);
}
template<> PROTOBUF_NOINLINE ::FaceRecordList* Arena::CreateMaybeMessage< ::FaceRecordList >(Arena* arena) {
  return Arena::CreateInternal< ::FaceRecordList >(arena);
}
template<> PROTOBUF_NOINLINE ::VerificationRequest* Arena::CreateMaybeMessage< ::VerificationRequest >(Arena* arena) {
  return Arena::CreateInternal< ::VerificationRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::VerificationResponse* Arena::CreateMaybeMessage< ::VerificationResponse >(Arena* arena) {
  return Arena::CreateInternal< ::VerificationResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::SearchRequest* Arena::CreateMaybeMessage< ::SearchRequest >(Arena* arena) {
  return Arena::CreateInternal< ::SearchRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::SearchResponse* Arena::CreateMaybeMessage< ::SearchResponse >(Arena* arena) {
  return Arena::CreateInternal< ::SearchResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::EnrollRequest* Arena::CreateMaybeMessage< ::EnrollRequest >(Arena* arena) {
  return Arena::CreateInternal< ::EnrollRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::DetectRequest* Arena::CreateMaybeMessage< ::DetectRequest >(Arena* arena) {
  return Arena::CreateInternal< ::DetectRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::ExtractRequest* Arena::CreateMaybeMessage< ::ExtractRequest >(Arena* arena) {
  return Arena::CreateInternal< ::ExtractRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::ScoreRequest* Arena::CreateMaybeMessage< ::ScoreRequest >(Arena* arena) {
  return Arena::CreateInternal< ::ScoreRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::DetectExtractRequest* Arena::CreateMaybeMessage< ::DetectExtractRequest >(Arena* arena) {
  return Arena::CreateInternal< ::DetectExtractRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::DetectExtractEnrollRequest* Arena::CreateMaybeMessage< ::DetectExtractEnrollRequest >(Arena* arena) {
  return Arena::CreateInternal< ::DetectExtractEnrollRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::DetectExtractSearchRequest* Arena::CreateMaybeMessage< ::DetectExtractSearchRequest >(Arena* arena) {
  return Arena::CreateInternal< ::DetectExtractSearchRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::FaceStatusRequest* Arena::CreateMaybeMessage< ::FaceStatusRequest >(Arena* arena) {
  return Arena::CreateInternal< ::FaceStatusRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::FaceServiceInfo* Arena::CreateMaybeMessage< ::FaceServiceInfo >(Arena* arena) {
  return Arena::CreateInternal< ::FaceServiceInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::GalleryListRequest* Arena::CreateMaybeMessage< ::GalleryListRequest >(Arena* arena) {
  return Arena::CreateInternal< ::GalleryListRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::GalleryDeleteRequest* Arena::CreateMaybeMessage< ::GalleryDeleteRequest >(Arena* arena) {
  return Arena::CreateInternal< ::GalleryDeleteRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::EnrollmentListRequest* Arena::CreateMaybeMessage< ::EnrollmentListRequest >(Arena* arena) {
  return Arena::CreateInternal< ::EnrollmentListRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::EnrollmentInfo* Arena::CreateMaybeMessage< ::EnrollmentInfo >(Arena* arena) {
  return Arena::CreateInternal< ::EnrollmentInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::EnrollmentListResponse* Arena::CreateMaybeMessage< ::EnrollmentListResponse >(Arena* arena) {
  return Arena::CreateInternal< ::EnrollmentListResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::EnrollmentDeleteRequest* Arena::CreateMaybeMessage< ::EnrollmentDeleteRequest >(Arena* arena) {
  return Arena::CreateInternal< ::EnrollmentDeleteRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::GalleryInfo* Arena::CreateMaybeMessage< ::GalleryInfo >(Arena* arena) {
  return Arena::CreateInternal< ::GalleryInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::GalleryList* Arena::CreateMaybeMessage< ::GalleryList >(Arena* arena) {
  return Arena::CreateInternal< ::GalleryList >(arena);
}
template<> PROTOBUF_NOINLINE ::Empty* Arena::CreateMaybeMessage< ::Empty >(Arena* arena) {
  return Arena::CreateInternal< ::Empty >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
