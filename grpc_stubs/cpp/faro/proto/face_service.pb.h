// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: faro/proto/face_service.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_faro_2fproto_2fface_5fservice_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_faro_2fproto_2fface_5fservice_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3008000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3008000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "faro/proto/image.pb.h"
#include "faro/proto/geometry.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_faro_2fproto_2fface_5fservice_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_faro_2fproto_2fface_5fservice_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[38]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_faro_2fproto_2fface_5fservice_2eproto;
class AccessRecord;
class AccessRecordDefaultTypeInternal;
extern AccessRecordDefaultTypeInternal _AccessRecord_default_instance_;
class Attribute;
class AttributeDefaultTypeInternal;
extern AttributeDefaultTypeInternal _Attribute_default_instance_;
class DetectExtractEnrollRequest;
class DetectExtractEnrollRequestDefaultTypeInternal;
extern DetectExtractEnrollRequestDefaultTypeInternal _DetectExtractEnrollRequest_default_instance_;
class DetectExtractRequest;
class DetectExtractRequestDefaultTypeInternal;
extern DetectExtractRequestDefaultTypeInternal _DetectExtractRequest_default_instance_;
class DetectExtractSearchRequest;
class DetectExtractSearchRequestDefaultTypeInternal;
extern DetectExtractSearchRequestDefaultTypeInternal _DetectExtractSearchRequest_default_instance_;
class DetectRequest;
class DetectRequestDefaultTypeInternal;
extern DetectRequestDefaultTypeInternal _DetectRequest_default_instance_;
class Detection;
class DetectionDefaultTypeInternal;
extern DetectionDefaultTypeInternal _Detection_default_instance_;
class DetectionList;
class DetectionListDefaultTypeInternal;
extern DetectionListDefaultTypeInternal _DetectionList_default_instance_;
class DetectionOptions;
class DetectionOptionsDefaultTypeInternal;
extern DetectionOptionsDefaultTypeInternal _DetectionOptions_default_instance_;
class Empty;
class EmptyDefaultTypeInternal;
extern EmptyDefaultTypeInternal _Empty_default_instance_;
class EnrollOptions;
class EnrollOptionsDefaultTypeInternal;
extern EnrollOptionsDefaultTypeInternal _EnrollOptions_default_instance_;
class EnrollRequest;
class EnrollRequestDefaultTypeInternal;
extern EnrollRequestDefaultTypeInternal _EnrollRequest_default_instance_;
class EnrollmentDeleteRequest;
class EnrollmentDeleteRequestDefaultTypeInternal;
extern EnrollmentDeleteRequestDefaultTypeInternal _EnrollmentDeleteRequest_default_instance_;
class EnrollmentInfo;
class EnrollmentInfoDefaultTypeInternal;
extern EnrollmentInfoDefaultTypeInternal _EnrollmentInfo_default_instance_;
class EnrollmentListRequest;
class EnrollmentListRequestDefaultTypeInternal;
extern EnrollmentListRequestDefaultTypeInternal _EnrollmentListRequest_default_instance_;
class EnrollmentListResponse;
class EnrollmentListResponseDefaultTypeInternal;
extern EnrollmentListResponseDefaultTypeInternal _EnrollmentListResponse_default_instance_;
class ErrorMessage;
class ErrorMessageDefaultTypeInternal;
extern ErrorMessageDefaultTypeInternal _ErrorMessage_default_instance_;
class ExtractOptions;
class ExtractOptionsDefaultTypeInternal;
extern ExtractOptionsDefaultTypeInternal _ExtractOptions_default_instance_;
class ExtractRequest;
class ExtractRequestDefaultTypeInternal;
extern ExtractRequestDefaultTypeInternal _ExtractRequest_default_instance_;
class FaceRecord;
class FaceRecordDefaultTypeInternal;
extern FaceRecordDefaultTypeInternal _FaceRecord_default_instance_;
class FaceRecordList;
class FaceRecordListDefaultTypeInternal;
extern FaceRecordListDefaultTypeInternal _FaceRecordList_default_instance_;
class FaceServiceInfo;
class FaceServiceInfoDefaultTypeInternal;
extern FaceServiceInfoDefaultTypeInternal _FaceServiceInfo_default_instance_;
class FaceStatusRequest;
class FaceStatusRequestDefaultTypeInternal;
extern FaceStatusRequestDefaultTypeInternal _FaceStatusRequest_default_instance_;
class FaceTemplate;
class FaceTemplateDefaultTypeInternal;
extern FaceTemplateDefaultTypeInternal _FaceTemplate_default_instance_;
class GalleryDeleteRequest;
class GalleryDeleteRequestDefaultTypeInternal;
extern GalleryDeleteRequestDefaultTypeInternal _GalleryDeleteRequest_default_instance_;
class GalleryInfo;
class GalleryInfoDefaultTypeInternal;
extern GalleryInfoDefaultTypeInternal _GalleryInfo_default_instance_;
class GalleryList;
class GalleryListDefaultTypeInternal;
extern GalleryListDefaultTypeInternal _GalleryList_default_instance_;
class GalleryListRequest;
class GalleryListRequestDefaultTypeInternal;
extern GalleryListRequestDefaultTypeInternal _GalleryListRequest_default_instance_;
class Landmark;
class LandmarkDefaultTypeInternal;
extern LandmarkDefaultTypeInternal _Landmark_default_instance_;
class MatchInfo;
class MatchInfoDefaultTypeInternal;
extern MatchInfoDefaultTypeInternal _MatchInfo_default_instance_;
class MatchList;
class MatchListDefaultTypeInternal;
extern MatchListDefaultTypeInternal _MatchList_default_instance_;
class ScoreRequest;
class ScoreRequestDefaultTypeInternal;
extern ScoreRequestDefaultTypeInternal _ScoreRequest_default_instance_;
class SearchRequest;
class SearchRequestDefaultTypeInternal;
extern SearchRequestDefaultTypeInternal _SearchRequest_default_instance_;
class SearchResponse;
class SearchResponseDefaultTypeInternal;
extern SearchResponseDefaultTypeInternal _SearchResponse_default_instance_;
class TemplateInput;
class TemplateInputDefaultTypeInternal;
extern TemplateInputDefaultTypeInternal _TemplateInput_default_instance_;
class TemplateList;
class TemplateListDefaultTypeInternal;
extern TemplateListDefaultTypeInternal _TemplateList_default_instance_;
class VerificationRequest;
class VerificationRequestDefaultTypeInternal;
extern VerificationRequestDefaultTypeInternal _VerificationRequest_default_instance_;
class VerificationResponse;
class VerificationResponseDefaultTypeInternal;
extern VerificationResponseDefaultTypeInternal _VerificationResponse_default_instance_;
PROTOBUF_NAMESPACE_OPEN
template<> ::AccessRecord* Arena::CreateMaybeMessage<::AccessRecord>(Arena*);
template<> ::Attribute* Arena::CreateMaybeMessage<::Attribute>(Arena*);
template<> ::DetectExtractEnrollRequest* Arena::CreateMaybeMessage<::DetectExtractEnrollRequest>(Arena*);
template<> ::DetectExtractRequest* Arena::CreateMaybeMessage<::DetectExtractRequest>(Arena*);
template<> ::DetectExtractSearchRequest* Arena::CreateMaybeMessage<::DetectExtractSearchRequest>(Arena*);
template<> ::DetectRequest* Arena::CreateMaybeMessage<::DetectRequest>(Arena*);
template<> ::Detection* Arena::CreateMaybeMessage<::Detection>(Arena*);
template<> ::DetectionList* Arena::CreateMaybeMessage<::DetectionList>(Arena*);
template<> ::DetectionOptions* Arena::CreateMaybeMessage<::DetectionOptions>(Arena*);
template<> ::Empty* Arena::CreateMaybeMessage<::Empty>(Arena*);
template<> ::EnrollOptions* Arena::CreateMaybeMessage<::EnrollOptions>(Arena*);
template<> ::EnrollRequest* Arena::CreateMaybeMessage<::EnrollRequest>(Arena*);
template<> ::EnrollmentDeleteRequest* Arena::CreateMaybeMessage<::EnrollmentDeleteRequest>(Arena*);
template<> ::EnrollmentInfo* Arena::CreateMaybeMessage<::EnrollmentInfo>(Arena*);
template<> ::EnrollmentListRequest* Arena::CreateMaybeMessage<::EnrollmentListRequest>(Arena*);
template<> ::EnrollmentListResponse* Arena::CreateMaybeMessage<::EnrollmentListResponse>(Arena*);
template<> ::ErrorMessage* Arena::CreateMaybeMessage<::ErrorMessage>(Arena*);
template<> ::ExtractOptions* Arena::CreateMaybeMessage<::ExtractOptions>(Arena*);
template<> ::ExtractRequest* Arena::CreateMaybeMessage<::ExtractRequest>(Arena*);
template<> ::FaceRecord* Arena::CreateMaybeMessage<::FaceRecord>(Arena*);
template<> ::FaceRecordList* Arena::CreateMaybeMessage<::FaceRecordList>(Arena*);
template<> ::FaceServiceInfo* Arena::CreateMaybeMessage<::FaceServiceInfo>(Arena*);
template<> ::FaceStatusRequest* Arena::CreateMaybeMessage<::FaceStatusRequest>(Arena*);
template<> ::FaceTemplate* Arena::CreateMaybeMessage<::FaceTemplate>(Arena*);
template<> ::GalleryDeleteRequest* Arena::CreateMaybeMessage<::GalleryDeleteRequest>(Arena*);
template<> ::GalleryInfo* Arena::CreateMaybeMessage<::GalleryInfo>(Arena*);
template<> ::GalleryList* Arena::CreateMaybeMessage<::GalleryList>(Arena*);
template<> ::GalleryListRequest* Arena::CreateMaybeMessage<::GalleryListRequest>(Arena*);
template<> ::Landmark* Arena::CreateMaybeMessage<::Landmark>(Arena*);
template<> ::MatchInfo* Arena::CreateMaybeMessage<::MatchInfo>(Arena*);
template<> ::MatchList* Arena::CreateMaybeMessage<::MatchList>(Arena*);
template<> ::ScoreRequest* Arena::CreateMaybeMessage<::ScoreRequest>(Arena*);
template<> ::SearchRequest* Arena::CreateMaybeMessage<::SearchRequest>(Arena*);
template<> ::SearchResponse* Arena::CreateMaybeMessage<::SearchResponse>(Arena*);
template<> ::TemplateInput* Arena::CreateMaybeMessage<::TemplateInput>(Arena*);
template<> ::TemplateList* Arena::CreateMaybeMessage<::TemplateList>(Arena*);
template<> ::VerificationRequest* Arena::CreateMaybeMessage<::VerificationRequest>(Arena*);
template<> ::VerificationResponse* Arena::CreateMaybeMessage<::VerificationResponse>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

enum ServiceStatus : int {
  UNKNOWN = 0,
  READY = 1,
  ERROR = 2,
  BUSY = 3,
  ServiceStatus_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  ServiceStatus_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool ServiceStatus_IsValid(int value);
constexpr ServiceStatus ServiceStatus_MIN = UNKNOWN;
constexpr ServiceStatus ServiceStatus_MAX = BUSY;
constexpr int ServiceStatus_ARRAYSIZE = ServiceStatus_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ServiceStatus_descriptor();
template<typename T>
inline const std::string& ServiceStatus_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ServiceStatus>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ServiceStatus_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    ServiceStatus_descriptor(), enum_t_value);
}
inline bool ServiceStatus_Parse(
    const std::string& name, ServiceStatus* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<ServiceStatus>(
    ServiceStatus_descriptor(), name, value);
}
enum DataType : int {
  EMPTY = 0,
  STRING = 1,
  INT = 2,
  FLOAT = 3,
  BYTES = 4,
  VECTOR = 5,
  PICKLE = 6,
  XML = 7,
  JSON = 8,
  DataType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  DataType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool DataType_IsValid(int value);
constexpr DataType DataType_MIN = EMPTY;
constexpr DataType DataType_MAX = JSON;
constexpr int DataType_ARRAYSIZE = DataType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* DataType_descriptor();
template<typename T>
inline const std::string& DataType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, DataType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function DataType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    DataType_descriptor(), enum_t_value);
}
inline bool DataType_Parse(
    const std::string& name, DataType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<DataType>(
    DataType_descriptor(), name, value);
}
enum ScoreType : int {
  SERVER = 0,
  L1 = 1,
  L2 = 2,
  NEG_DOT = 3,
  ScoreType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  ScoreType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool ScoreType_IsValid(int value);
constexpr ScoreType ScoreType_MIN = SERVER;
constexpr ScoreType ScoreType_MAX = NEG_DOT;
constexpr int ScoreType_ARRAYSIZE = ScoreType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ScoreType_descriptor();
template<typename T>
inline const std::string& ScoreType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ScoreType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ScoreType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    ScoreType_descriptor(), enum_t_value);
}
inline bool ScoreType_Parse(
    const std::string& name, ScoreType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<ScoreType>(
    ScoreType_descriptor(), name, value);
}
// ===================================================================

class Attribute :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Attribute) */ {
 public:
  Attribute();
  virtual ~Attribute();

  Attribute(const Attribute& from);
  Attribute(Attribute&& from) noexcept
    : Attribute() {
    *this = ::std::move(from);
  }

  inline Attribute& operator=(const Attribute& from) {
    CopyFrom(from);
    return *this;
  }
  inline Attribute& operator=(Attribute&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Attribute& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Attribute* internal_default_instance() {
    return reinterpret_cast<const Attribute*>(
               &_Attribute_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(Attribute* other);
  friend void swap(Attribute& a, Attribute& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Attribute* New() const final {
    return CreateMaybeMessage<Attribute>(nullptr);
  }

  Attribute* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Attribute>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Attribute& from);
  void MergeFrom(const Attribute& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Attribute* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Attribute";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_faro_2fproto_2fface_5fservice_2eproto);
    return ::descriptor_table_faro_2fproto_2fface_5fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string key = 1;
  void clear_key();
  static const int kKeyFieldNumber = 1;
  const std::string& key() const;
  void set_key(const std::string& value);
  void set_key(std::string&& value);
  void set_key(const char* value);
  void set_key(const char* value, size_t size);
  std::string* mutable_key();
  std::string* release_key();
  void set_allocated_key(std::string* key);

  // string description = 2;
  void clear_description();
  static const int kDescriptionFieldNumber = 2;
  const std::string& description() const;
  void set_description(const std::string& value);
  void set_description(std::string&& value);
  void set_description(const char* value);
  void set_description(const char* value, size_t size);
  std::string* mutable_description();
  std::string* release_description();
  void set_allocated_description(std::string* description);

  // bytes buffer = 3;
  void clear_buffer();
  static const int kBufferFieldNumber = 3;
  const std::string& buffer() const;
  void set_buffer(const std::string& value);
  void set_buffer(std::string&& value);
  void set_buffer(const char* value);
  void set_buffer(const void* value, size_t size);
  std::string* mutable_buffer();
  std::string* release_buffer();
  void set_allocated_buffer(std::string* buffer);

  // string text = 6;
  void clear_text();
  static const int kTextFieldNumber = 6;
  const std::string& text() const;
  void set_text(const std::string& value);
  void set_text(std::string&& value);
  void set_text(const char* value);
  void set_text(const char* value, size_t size);
  std::string* mutable_text();
  std::string* release_text();
  void set_allocated_text(std::string* text);

  // bytes pickle = 7;
  void clear_pickle();
  static const int kPickleFieldNumber = 7;
  const std::string& pickle() const;
  void set_pickle(const std::string& value);
  void set_pickle(std::string&& value);
  void set_pickle(const char* value);
  void set_pickle(const void* value, size_t size);
  std::string* mutable_pickle();
  std::string* release_pickle();
  void set_allocated_pickle(std::string* pickle);

  // bytes json = 8;
  void clear_json();
  static const int kJsonFieldNumber = 8;
  const std::string& json() const;
  void set_json(const std::string& value);
  void set_json(std::string&& value);
  void set_json(const char* value);
  void set_json(const void* value, size_t size);
  std::string* mutable_json();
  std::string* release_json();
  void set_allocated_json(std::string* json);

  // bytes xml = 14;
  void clear_xml();
  static const int kXmlFieldNumber = 14;
  const std::string& xml() const;
  void set_xml(const std::string& value);
  void set_xml(std::string&& value);
  void set_xml(const char* value);
  void set_xml(const void* value, size_t size);
  std::string* mutable_xml();
  std::string* release_xml();
  void set_allocated_xml(std::string* xml);

  // .Matrix matrix = 9;
  bool has_matrix() const;
  void clear_matrix();
  static const int kMatrixFieldNumber = 9;
  const ::Matrix& matrix() const;
  ::Matrix* release_matrix();
  ::Matrix* mutable_matrix();
  void set_allocated_matrix(::Matrix* matrix);

  // .Vector vector = 10;
  bool has_vector() const;
  void clear_vector();
  static const int kVectorFieldNumber = 10;
  const ::Vector& vector() const;
  ::Vector* release_vector();
  ::Vector* mutable_vector();
  void set_allocated_vector(::Vector* vector);

  // .Image image = 11;
  bool has_image() const;
  void clear_image();
  static const int kImageFieldNumber = 11;
  const ::Image& image() const;
  ::Image* release_image();
  ::Image* mutable_image();
  void set_allocated_image(::Image* image);

  // .Point2D point = 12;
  bool has_point() const;
  void clear_point();
  static const int kPointFieldNumber = 12;
  const ::Point2D& point() const;
  ::Point2D* release_point();
  ::Point2D* mutable_point();
  void set_allocated_point(::Point2D* point);

  // .Rect rect = 13;
  bool has_rect() const;
  void clear_rect();
  static const int kRectFieldNumber = 13;
  const ::Rect& rect() const;
  ::Rect* release_rect();
  ::Rect* mutable_rect();
  void set_allocated_rect(::Rect* rect);

  // float fvalue = 4;
  void clear_fvalue();
  static const int kFvalueFieldNumber = 4;
  float fvalue() const;
  void set_fvalue(float value);

  // int32 ivalue = 5;
  void clear_ivalue();
  static const int kIvalueFieldNumber = 5;
  ::PROTOBUF_NAMESPACE_ID::int32 ivalue() const;
  void set_ivalue(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:Attribute)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr key_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr description_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr buffer_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr text_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr pickle_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr json_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr xml_;
  ::Matrix* matrix_;
  ::Vector* vector_;
  ::Image* image_;
  ::Point2D* point_;
  ::Rect* rect_;
  float fvalue_;
  ::PROTOBUF_NAMESPACE_ID::int32 ivalue_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_faro_2fproto_2fface_5fservice_2eproto;
};
// -------------------------------------------------------------------

class ErrorMessage :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ErrorMessage) */ {
 public:
  ErrorMessage();
  virtual ~ErrorMessage();

  ErrorMessage(const ErrorMessage& from);
  ErrorMessage(ErrorMessage&& from) noexcept
    : ErrorMessage() {
    *this = ::std::move(from);
  }

  inline ErrorMessage& operator=(const ErrorMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline ErrorMessage& operator=(ErrorMessage&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ErrorMessage& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ErrorMessage* internal_default_instance() {
    return reinterpret_cast<const ErrorMessage*>(
               &_ErrorMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(ErrorMessage* other);
  friend void swap(ErrorMessage& a, ErrorMessage& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ErrorMessage* New() const final {
    return CreateMaybeMessage<ErrorMessage>(nullptr);
  }

  ErrorMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ErrorMessage>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ErrorMessage& from);
  void MergeFrom(const ErrorMessage& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ErrorMessage* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ErrorMessage";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_faro_2fproto_2fface_5fservice_2eproto);
    return ::descriptor_table_faro_2fproto_2fface_5fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string error_message = 4;
  void clear_error_message();
  static const int kErrorMessageFieldNumber = 4;
  const std::string& error_message() const;
  void set_error_message(const std::string& value);
  void set_error_message(std::string&& value);
  void set_error_message(const char* value);
  void set_error_message(const char* value, size_t size);
  std::string* mutable_error_message();
  std::string* release_error_message();
  void set_allocated_error_message(std::string* error_message);

  // int32 error_code = 3;
  void clear_error_code();
  static const int kErrorCodeFieldNumber = 3;
  ::PROTOBUF_NAMESPACE_ID::int32 error_code() const;
  void set_error_code(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:ErrorMessage)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr error_message_;
  ::PROTOBUF_NAMESPACE_ID::int32 error_code_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_faro_2fproto_2fface_5fservice_2eproto;
};
// -------------------------------------------------------------------

class Detection :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Detection) */ {
 public:
  Detection();
  virtual ~Detection();

  Detection(const Detection& from);
  Detection(Detection&& from) noexcept
    : Detection() {
    *this = ::std::move(from);
  }

  inline Detection& operator=(const Detection& from) {
    CopyFrom(from);
    return *this;
  }
  inline Detection& operator=(Detection&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Detection& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Detection* internal_default_instance() {
    return reinterpret_cast<const Detection*>(
               &_Detection_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(Detection* other);
  friend void swap(Detection& a, Detection& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Detection* New() const final {
    return CreateMaybeMessage<Detection>(nullptr);
  }

  Detection* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Detection>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Detection& from);
  void MergeFrom(const Detection& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Detection* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Detection";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_faro_2fproto_2fface_5fservice_2eproto);
    return ::descriptor_table_faro_2fproto_2fface_5fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .Attribute attributes = 5;
  int attributes_size() const;
  void clear_attributes();
  static const int kAttributesFieldNumber = 5;
  ::Attribute* mutable_attributes(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Attribute >*
      mutable_attributes();
  const ::Attribute& attributes(int index) const;
  ::Attribute* add_attributes();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Attribute >&
      attributes() const;

  // string detection_class = 4;
  void clear_detection_class();
  static const int kDetectionClassFieldNumber = 4;
  const std::string& detection_class() const;
  void set_detection_class(const std::string& value);
  void set_detection_class(std::string&& value);
  void set_detection_class(const char* value);
  void set_detection_class(const char* value, size_t size);
  std::string* mutable_detection_class();
  std::string* release_detection_class();
  void set_allocated_detection_class(std::string* detection_class);

  // .Rect location = 2;
  bool has_location() const;
  void clear_location();
  static const int kLocationFieldNumber = 2;
  const ::Rect& location() const;
  ::Rect* release_location();
  ::Rect* mutable_location();
  void set_allocated_location(::Rect* location);

  // float score = 1;
  void clear_score();
  static const int kScoreFieldNumber = 1;
  float score() const;
  void set_score(float value);

  // int32 detection_id = 3;
  void clear_detection_id();
  static const int kDetectionIdFieldNumber = 3;
  ::PROTOBUF_NAMESPACE_ID::int32 detection_id() const;
  void set_detection_id(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:Detection)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Attribute > attributes_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr detection_class_;
  ::Rect* location_;
  float score_;
  ::PROTOBUF_NAMESPACE_ID::int32 detection_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_faro_2fproto_2fface_5fservice_2eproto;
};
// -------------------------------------------------------------------

class Landmark :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Landmark) */ {
 public:
  Landmark();
  virtual ~Landmark();

  Landmark(const Landmark& from);
  Landmark(Landmark&& from) noexcept
    : Landmark() {
    *this = ::std::move(from);
  }

  inline Landmark& operator=(const Landmark& from) {
    CopyFrom(from);
    return *this;
  }
  inline Landmark& operator=(Landmark&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Landmark& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Landmark* internal_default_instance() {
    return reinterpret_cast<const Landmark*>(
               &_Landmark_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  void Swap(Landmark* other);
  friend void swap(Landmark& a, Landmark& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Landmark* New() const final {
    return CreateMaybeMessage<Landmark>(nullptr);
  }

  Landmark* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Landmark>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Landmark& from);
  void MergeFrom(const Landmark& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Landmark* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Landmark";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_faro_2fproto_2fface_5fservice_2eproto);
    return ::descriptor_table_faro_2fproto_2fface_5fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string landmark_id = 1;
  void clear_landmark_id();
  static const int kLandmarkIdFieldNumber = 1;
  const std::string& landmark_id() const;
  void set_landmark_id(const std::string& value);
  void set_landmark_id(std::string&& value);
  void set_landmark_id(const char* value);
  void set_landmark_id(const char* value, size_t size);
  std::string* mutable_landmark_id();
  std::string* release_landmark_id();
  void set_allocated_landmark_id(std::string* landmark_id);

  // .Point2D location = 2;
  bool has_location() const;
  void clear_location();
  static const int kLocationFieldNumber = 2;
  const ::Point2D& location() const;
  ::Point2D* release_location();
  ::Point2D* mutable_location();
  void set_allocated_location(::Point2D* location);

  // @@protoc_insertion_point(class_scope:Landmark)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr landmark_id_;
  ::Point2D* location_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_faro_2fproto_2fface_5fservice_2eproto;
};
// -------------------------------------------------------------------

class DetectionOptions :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:DetectionOptions) */ {
 public:
  DetectionOptions();
  virtual ~DetectionOptions();

  DetectionOptions(const DetectionOptions& from);
  DetectionOptions(DetectionOptions&& from) noexcept
    : DetectionOptions() {
    *this = ::std::move(from);
  }

  inline DetectionOptions& operator=(const DetectionOptions& from) {
    CopyFrom(from);
    return *this;
  }
  inline DetectionOptions& operator=(DetectionOptions&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DetectionOptions& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DetectionOptions* internal_default_instance() {
    return reinterpret_cast<const DetectionOptions*>(
               &_DetectionOptions_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  void Swap(DetectionOptions* other);
  friend void swap(DetectionOptions& a, DetectionOptions& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline DetectionOptions* New() const final {
    return CreateMaybeMessage<DetectionOptions>(nullptr);
  }

  DetectionOptions* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DetectionOptions>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DetectionOptions& from);
  void MergeFrom(const DetectionOptions& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DetectionOptions* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "DetectionOptions";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_faro_2fproto_2fface_5fservice_2eproto);
    return ::descriptor_table_faro_2fproto_2fface_5fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .Attribute attributes = 8;
  int attributes_size() const;
  void clear_attributes();
  static const int kAttributesFieldNumber = 8;
  ::Attribute* mutable_attributes(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Attribute >*
      mutable_attributes();
  const ::Attribute& attributes(int index) const;
  ::Attribute* add_attributes();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Attribute >&
      attributes() const;

  // string algorithm_id = 1;
  void clear_algorithm_id();
  static const int kAlgorithmIdFieldNumber = 1;
  const std::string& algorithm_id() const;
  void set_algorithm_id(const std::string& value);
  void set_algorithm_id(std::string&& value);
  void set_algorithm_id(const char* value);
  void set_algorithm_id(const char* value, size_t size);
  std::string* mutable_algorithm_id();
  std::string* release_algorithm_id();
  void set_allocated_algorithm_id(std::string* algorithm_id);

  // float threshold = 3;
  void clear_threshold();
  static const int kThresholdFieldNumber = 3;
  float threshold() const;
  void set_threshold(float value);

  // int32 scale_levels = 4;
  void clear_scale_levels();
  static const int kScaleLevelsFieldNumber = 4;
  ::PROTOBUF_NAMESPACE_ID::int32 scale_levels() const;
  void set_scale_levels(::PROTOBUF_NAMESPACE_ID::int32 value);

  // int32 scan_levels = 5;
  void clear_scan_levels();
  static const int kScanLevelsFieldNumber = 5;
  ::PROTOBUF_NAMESPACE_ID::int32 scan_levels() const;
  void set_scan_levels(::PROTOBUF_NAMESPACE_ID::int32 value);

  // float scan_overlap = 6;
  void clear_scan_overlap();
  static const int kScanOverlapFieldNumber = 6;
  float scan_overlap() const;
  void set_scan_overlap(float value);

  // int32 min_size = 7;
  void clear_min_size();
  static const int kMinSizeFieldNumber = 7;
  ::PROTOBUF_NAMESPACE_ID::int32 min_size() const;
  void set_min_size(::PROTOBUF_NAMESPACE_ID::int32 value);

  // bool best = 2;
  void clear_best();
  static const int kBestFieldNumber = 2;
  bool best() const;
  void set_best(bool value);

  // bool save_request = 9;
  void clear_save_request();
  static const int kSaveRequestFieldNumber = 9;
  bool save_request() const;
  void set_save_request(bool value);

  // bool debug = 10;
  void clear_debug();
  static const int kDebugFieldNumber = 10;
  bool debug() const;
  void set_debug(bool value);

  // @@protoc_insertion_point(class_scope:DetectionOptions)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Attribute > attributes_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr algorithm_id_;
  float threshold_;
  ::PROTOBUF_NAMESPACE_ID::int32 scale_levels_;
  ::PROTOBUF_NAMESPACE_ID::int32 scan_levels_;
  float scan_overlap_;
  ::PROTOBUF_NAMESPACE_ID::int32 min_size_;
  bool best_;
  bool save_request_;
  bool debug_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_faro_2fproto_2fface_5fservice_2eproto;
};
// -------------------------------------------------------------------

class ExtractOptions :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ExtractOptions) */ {
 public:
  ExtractOptions();
  virtual ~ExtractOptions();

  ExtractOptions(const ExtractOptions& from);
  ExtractOptions(ExtractOptions&& from) noexcept
    : ExtractOptions() {
    *this = ::std::move(from);
  }

  inline ExtractOptions& operator=(const ExtractOptions& from) {
    CopyFrom(from);
    return *this;
  }
  inline ExtractOptions& operator=(ExtractOptions&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ExtractOptions& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ExtractOptions* internal_default_instance() {
    return reinterpret_cast<const ExtractOptions*>(
               &_ExtractOptions_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  void Swap(ExtractOptions* other);
  friend void swap(ExtractOptions& a, ExtractOptions& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ExtractOptions* New() const final {
    return CreateMaybeMessage<ExtractOptions>(nullptr);
  }

  ExtractOptions* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ExtractOptions>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ExtractOptions& from);
  void MergeFrom(const ExtractOptions& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ExtractOptions* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ExtractOptions";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_faro_2fproto_2fface_5fservice_2eproto);
    return ::descriptor_table_faro_2fproto_2fface_5fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .Attribute attributes = 8;
  int attributes_size() const;
  void clear_attributes();
  static const int kAttributesFieldNumber = 8;
  ::Attribute* mutable_attributes(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Attribute >*
      mutable_attributes();
  const ::Attribute& attributes(int index) const;
  ::Attribute* add_attributes();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Attribute >&
      attributes() const;

  // string algorithm_id = 1;
  void clear_algorithm_id();
  static const int kAlgorithmIdFieldNumber = 1;
  const std::string& algorithm_id() const;
  void set_algorithm_id(const std::string& value);
  void set_algorithm_id(std::string&& value);
  void set_algorithm_id(const char* value);
  void set_algorithm_id(const char* value, size_t size);
  std::string* mutable_algorithm_id();
  std::string* release_algorithm_id();
  void set_allocated_algorithm_id(std::string* algorithm_id);

  // bool save_request = 2;
  void clear_save_request();
  static const int kSaveRequestFieldNumber = 2;
  bool save_request() const;
  void set_save_request(bool value);

  // bool debug = 3;
  void clear_debug();
  static const int kDebugFieldNumber = 3;
  bool debug() const;
  void set_debug(bool value);

  // @@protoc_insertion_point(class_scope:ExtractOptions)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Attribute > attributes_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr algorithm_id_;
  bool save_request_;
  bool debug_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_faro_2fproto_2fface_5fservice_2eproto;
};
// -------------------------------------------------------------------

class EnrollOptions :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:EnrollOptions) */ {
 public:
  EnrollOptions();
  virtual ~EnrollOptions();

  EnrollOptions(const EnrollOptions& from);
  EnrollOptions(EnrollOptions&& from) noexcept
    : EnrollOptions() {
    *this = ::std::move(from);
  }

  inline EnrollOptions& operator=(const EnrollOptions& from) {
    CopyFrom(from);
    return *this;
  }
  inline EnrollOptions& operator=(EnrollOptions&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const EnrollOptions& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const EnrollOptions* internal_default_instance() {
    return reinterpret_cast<const EnrollOptions*>(
               &_EnrollOptions_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  void Swap(EnrollOptions* other);
  friend void swap(EnrollOptions& a, EnrollOptions& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline EnrollOptions* New() const final {
    return CreateMaybeMessage<EnrollOptions>(nullptr);
  }

  EnrollOptions* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<EnrollOptions>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const EnrollOptions& from);
  void MergeFrom(const EnrollOptions& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(EnrollOptions* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "EnrollOptions";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_faro_2fproto_2fface_5fservice_2eproto);
    return ::descriptor_table_faro_2fproto_2fface_5fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .Attribute attributes = 8;
  int attributes_size() const;
  void clear_attributes();
  static const int kAttributesFieldNumber = 8;
  ::Attribute* mutable_attributes(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Attribute >*
      mutable_attributes();
  const ::Attribute& attributes(int index) const;
  ::Attribute* add_attributes();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Attribute >&
      attributes() const;

  // bool save_request = 2;
  void clear_save_request();
  static const int kSaveRequestFieldNumber = 2;
  bool save_request() const;
  void set_save_request(bool value);

  // bool debug = 3;
  void clear_debug();
  static const int kDebugFieldNumber = 3;
  bool debug() const;
  void set_debug(bool value);

  // @@protoc_insertion_point(class_scope:EnrollOptions)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Attribute > attributes_;
  bool save_request_;
  bool debug_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_faro_2fproto_2fface_5fservice_2eproto;
};
// -------------------------------------------------------------------

class DetectionList :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:DetectionList) */ {
 public:
  DetectionList();
  virtual ~DetectionList();

  DetectionList(const DetectionList& from);
  DetectionList(DetectionList&& from) noexcept
    : DetectionList() {
    *this = ::std::move(from);
  }

  inline DetectionList& operator=(const DetectionList& from) {
    CopyFrom(from);
    return *this;
  }
  inline DetectionList& operator=(DetectionList&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DetectionList& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DetectionList* internal_default_instance() {
    return reinterpret_cast<const DetectionList*>(
               &_DetectionList_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  void Swap(DetectionList* other);
  friend void swap(DetectionList& a, DetectionList& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline DetectionList* New() const final {
    return CreateMaybeMessage<DetectionList>(nullptr);
  }

  DetectionList* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DetectionList>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DetectionList& from);
  void MergeFrom(const DetectionList& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DetectionList* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "DetectionList";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_faro_2fproto_2fface_5fservice_2eproto);
    return ::descriptor_table_faro_2fproto_2fface_5fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .Detection detections = 1;
  int detections_size() const;
  void clear_detections();
  static const int kDetectionsFieldNumber = 1;
  ::Detection* mutable_detections(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Detection >*
      mutable_detections();
  const ::Detection& detections(int index) const;
  ::Detection* add_detections();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Detection >&
      detections() const;

  // .DetectionOptions options = 6;
  bool has_options() const;
  void clear_options();
  static const int kOptionsFieldNumber = 6;
  const ::DetectionOptions& options() const;
  ::DetectionOptions* release_options();
  ::DetectionOptions* mutable_options();
  void set_allocated_options(::DetectionOptions* options);

  // float detection_time = 2;
  void clear_detection_time();
  static const int kDetectionTimeFieldNumber = 2;
  float detection_time() const;
  void set_detection_time(float value);

  // int32 image_width = 3;
  void clear_image_width();
  static const int kImageWidthFieldNumber = 3;
  ::PROTOBUF_NAMESPACE_ID::int32 image_width() const;
  void set_image_width(::PROTOBUF_NAMESPACE_ID::int32 value);

  // int32 image_height = 4;
  void clear_image_height();
  static const int kImageHeightFieldNumber = 4;
  ::PROTOBUF_NAMESPACE_ID::int32 image_height() const;
  void set_image_height(::PROTOBUF_NAMESPACE_ID::int32 value);

  // int32 detection_count = 5;
  void clear_detection_count();
  static const int kDetectionCountFieldNumber = 5;
  ::PROTOBUF_NAMESPACE_ID::int32 detection_count() const;
  void set_detection_count(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:DetectionList)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Detection > detections_;
  ::DetectionOptions* options_;
  float detection_time_;
  ::PROTOBUF_NAMESPACE_ID::int32 image_width_;
  ::PROTOBUF_NAMESPACE_ID::int32 image_height_;
  ::PROTOBUF_NAMESPACE_ID::int32 detection_count_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_faro_2fproto_2fface_5fservice_2eproto;
};
// -------------------------------------------------------------------

class MatchList :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:MatchList) */ {
 public:
  MatchList();
  virtual ~MatchList();

  MatchList(const MatchList& from);
  MatchList(MatchList&& from) noexcept
    : MatchList() {
    *this = ::std::move(from);
  }

  inline MatchList& operator=(const MatchList& from) {
    CopyFrom(from);
    return *this;
  }
  inline MatchList& operator=(MatchList&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MatchList& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MatchList* internal_default_instance() {
    return reinterpret_cast<const MatchList*>(
               &_MatchList_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  void Swap(MatchList* other);
  friend void swap(MatchList& a, MatchList& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline MatchList* New() const final {
    return CreateMaybeMessage<MatchList>(nullptr);
  }

  MatchList* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MatchList>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MatchList& from);
  void MergeFrom(const MatchList& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MatchList* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "MatchList";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_faro_2fproto_2fface_5fservice_2eproto);
    return ::descriptor_table_faro_2fproto_2fface_5fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .MatchInfo match_list = 1;
  int match_list_size() const;
  void clear_match_list();
  static const int kMatchListFieldNumber = 1;
  ::MatchInfo* mutable_match_list(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::MatchInfo >*
      mutable_match_list();
  const ::MatchInfo& match_list(int index) const;
  ::MatchInfo* add_match_list();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::MatchInfo >&
      match_list() const;

  // @@protoc_insertion_point(class_scope:MatchList)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::MatchInfo > match_list_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_faro_2fproto_2fface_5fservice_2eproto;
};
// -------------------------------------------------------------------

class MatchInfo :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:MatchInfo) */ {
 public:
  MatchInfo();
  virtual ~MatchInfo();

  MatchInfo(const MatchInfo& from);
  MatchInfo(MatchInfo&& from) noexcept
    : MatchInfo() {
    *this = ::std::move(from);
  }

  inline MatchInfo& operator=(const MatchInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline MatchInfo& operator=(MatchInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MatchInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MatchInfo* internal_default_instance() {
    return reinterpret_cast<const MatchInfo*>(
               &_MatchInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  void Swap(MatchInfo* other);
  friend void swap(MatchInfo& a, MatchInfo& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline MatchInfo* New() const final {
    return CreateMaybeMessage<MatchInfo>(nullptr);
  }

  MatchInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MatchInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MatchInfo& from);
  void MergeFrom(const MatchInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MatchInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "MatchInfo";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_faro_2fproto_2fface_5fservice_2eproto);
    return ::descriptor_table_faro_2fproto_2fface_5fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string image_id = 2;
  void clear_image_id();
  static const int kImageIdFieldNumber = 2;
  const std::string& image_id() const;
  void set_image_id(const std::string& value);
  void set_image_id(std::string&& value);
  void set_image_id(const char* value);
  void set_image_id(const char* value, size_t size);
  std::string* mutable_image_id();
  std::string* release_image_id();
  void set_allocated_image_id(std::string* image_id);

  // string detection_id = 3;
  void clear_detection_id();
  static const int kDetectionIdFieldNumber = 3;
  const std::string& detection_id() const;
  void set_detection_id(const std::string& value);
  void set_detection_id(std::string&& value);
  void set_detection_id(const char* value);
  void set_detection_id(const char* value, size_t size);
  std::string* mutable_detection_id();
  std::string* release_detection_id();
  void set_allocated_detection_id(std::string* detection_id);

  // string subject_id = 4;
  void clear_subject_id();
  static const int kSubjectIdFieldNumber = 4;
  const std::string& subject_id() const;
  void set_subject_id(const std::string& value);
  void set_subject_id(std::string&& value);
  void set_subject_id(const char* value);
  void set_subject_id(const char* value, size_t size);
  std::string* mutable_subject_id();
  std::string* release_subject_id();
  void set_allocated_subject_id(std::string* subject_id);

  // string subject_name = 5;
  void clear_subject_name();
  static const int kSubjectNameFieldNumber = 5;
  const std::string& subject_name() const;
  void set_subject_name(const std::string& value);
  void set_subject_name(std::string&& value);
  void set_subject_name(const char* value);
  void set_subject_name(const char* value, size_t size);
  std::string* mutable_subject_name();
  std::string* release_subject_name();
  void set_allocated_subject_name(std::string* subject_name);

  // .Image face = 6;
  bool has_face() const;
  void clear_face();
  static const int kFaceFieldNumber = 6;
  const ::Image& face() const;
  ::Image* release_face();
  ::Image* mutable_face();
  void set_allocated_face(::Image* face);

  // float score = 1;
  void clear_score();
  static const int kScoreFieldNumber = 1;
  float score() const;
  void set_score(float value);

  // @@protoc_insertion_point(class_scope:MatchInfo)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr image_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr detection_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr subject_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr subject_name_;
  ::Image* face_;
  float score_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_faro_2fproto_2fface_5fservice_2eproto;
};
// -------------------------------------------------------------------

class TemplateInput :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TemplateInput) */ {
 public:
  TemplateInput();
  virtual ~TemplateInput();

  TemplateInput(const TemplateInput& from);
  TemplateInput(TemplateInput&& from) noexcept
    : TemplateInput() {
    *this = ::std::move(from);
  }

  inline TemplateInput& operator=(const TemplateInput& from) {
    CopyFrom(from);
    return *this;
  }
  inline TemplateInput& operator=(TemplateInput&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TemplateInput& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TemplateInput* internal_default_instance() {
    return reinterpret_cast<const TemplateInput*>(
               &_TemplateInput_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  void Swap(TemplateInput* other);
  friend void swap(TemplateInput& a, TemplateInput& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline TemplateInput* New() const final {
    return CreateMaybeMessage<TemplateInput>(nullptr);
  }

  TemplateInput* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TemplateInput>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TemplateInput& from);
  void MergeFrom(const TemplateInput& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TemplateInput* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TemplateInput";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_faro_2fproto_2fface_5fservice_2eproto);
    return ::descriptor_table_faro_2fproto_2fface_5fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .Rect detections = 2;
  int detections_size() const;
  void clear_detections();
  static const int kDetectionsFieldNumber = 2;
  ::Rect* mutable_detections(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Rect >*
      mutable_detections();
  const ::Rect& detections(int index) const;
  ::Rect* add_detections();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Rect >&
      detections() const;

  // .Image im = 1;
  bool has_im() const;
  void clear_im();
  static const int kImFieldNumber = 1;
  const ::Image& im() const;
  ::Image* release_im();
  ::Image* mutable_im();
  void set_allocated_im(::Image* im);

  // @@protoc_insertion_point(class_scope:TemplateInput)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Rect > detections_;
  ::Image* im_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_faro_2fproto_2fface_5fservice_2eproto;
};
// -------------------------------------------------------------------

class FaceTemplate :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:FaceTemplate) */ {
 public:
  FaceTemplate();
  virtual ~FaceTemplate();

  FaceTemplate(const FaceTemplate& from);
  FaceTemplate(FaceTemplate&& from) noexcept
    : FaceTemplate() {
    *this = ::std::move(from);
  }

  inline FaceTemplate& operator=(const FaceTemplate& from) {
    CopyFrom(from);
    return *this;
  }
  inline FaceTemplate& operator=(FaceTemplate&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const FaceTemplate& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const FaceTemplate* internal_default_instance() {
    return reinterpret_cast<const FaceTemplate*>(
               &_FaceTemplate_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  void Swap(FaceTemplate* other);
  friend void swap(FaceTemplate& a, FaceTemplate& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline FaceTemplate* New() const final {
    return CreateMaybeMessage<FaceTemplate>(nullptr);
  }

  FaceTemplate* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<FaceTemplate>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const FaceTemplate& from);
  void MergeFrom(const FaceTemplate& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FaceTemplate* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "FaceTemplate";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_faro_2fproto_2fface_5fservice_2eproto);
    return ::descriptor_table_faro_2fproto_2fface_5fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bytes buffer = 2;
  void clear_buffer();
  static const int kBufferFieldNumber = 2;
  const std::string& buffer() const;
  void set_buffer(const std::string& value);
  void set_buffer(std::string&& value);
  void set_buffer(const char* value);
  void set_buffer(const void* value, size_t size);
  std::string* mutable_buffer();
  std::string* release_buffer();
  void set_allocated_buffer(std::string* buffer);

  // .Vector data = 1;
  bool has_data() const;
  void clear_data();
  static const int kDataFieldNumber = 1;
  const ::Vector& data() const;
  ::Vector* release_data();
  ::Vector* mutable_data();
  void set_allocated_data(::Vector* data);

  // @@protoc_insertion_point(class_scope:FaceTemplate)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr buffer_;
  ::Vector* data_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_faro_2fproto_2fface_5fservice_2eproto;
};
// -------------------------------------------------------------------

class TemplateList :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TemplateList) */ {
 public:
  TemplateList();
  virtual ~TemplateList();

  TemplateList(const TemplateList& from);
  TemplateList(TemplateList&& from) noexcept
    : TemplateList() {
    *this = ::std::move(from);
  }

  inline TemplateList& operator=(const TemplateList& from) {
    CopyFrom(from);
    return *this;
  }
  inline TemplateList& operator=(TemplateList&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TemplateList& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TemplateList* internal_default_instance() {
    return reinterpret_cast<const TemplateList*>(
               &_TemplateList_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  void Swap(TemplateList* other);
  friend void swap(TemplateList& a, TemplateList& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline TemplateList* New() const final {
    return CreateMaybeMessage<TemplateList>(nullptr);
  }

  TemplateList* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TemplateList>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TemplateList& from);
  void MergeFrom(const TemplateList& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TemplateList* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TemplateList";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_faro_2fproto_2fface_5fservice_2eproto);
    return ::descriptor_table_faro_2fproto_2fface_5fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .FaceTemplate templates = 1;
  int templates_size() const;
  void clear_templates();
  static const int kTemplatesFieldNumber = 1;
  ::FaceTemplate* mutable_templates(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::FaceTemplate >*
      mutable_templates();
  const ::FaceTemplate& templates(int index) const;
  ::FaceTemplate* add_templates();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::FaceTemplate >&
      templates() const;

  // @@protoc_insertion_point(class_scope:TemplateList)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::FaceTemplate > templates_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_faro_2fproto_2fface_5fservice_2eproto;
};
// -------------------------------------------------------------------

class AccessRecord :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:AccessRecord) */ {
 public:
  AccessRecord();
  virtual ~AccessRecord();

  AccessRecord(const AccessRecord& from);
  AccessRecord(AccessRecord&& from) noexcept
    : AccessRecord() {
    *this = ::std::move(from);
  }

  inline AccessRecord& operator=(const AccessRecord& from) {
    CopyFrom(from);
    return *this;
  }
  inline AccessRecord& operator=(AccessRecord&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AccessRecord& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AccessRecord* internal_default_instance() {
    return reinterpret_cast<const AccessRecord*>(
               &_AccessRecord_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  void Swap(AccessRecord* other);
  friend void swap(AccessRecord& a, AccessRecord& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline AccessRecord* New() const final {
    return CreateMaybeMessage<AccessRecord>(nullptr);
  }

  AccessRecord* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AccessRecord>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AccessRecord& from);
  void MergeFrom(const AccessRecord& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AccessRecord* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "AccessRecord";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_faro_2fproto_2fface_5fservice_2eproto);
    return ::descriptor_table_faro_2fproto_2fface_5fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .Attribute metadata = 4;
  int metadata_size() const;
  void clear_metadata();
  static const int kMetadataFieldNumber = 4;
  ::Attribute* mutable_metadata(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Attribute >*
      mutable_metadata();
  const ::Attribute& metadata(int index) const;
  ::Attribute* add_metadata();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Attribute >&
      metadata() const;

  // string notes = 2;
  void clear_notes();
  static const int kNotesFieldNumber = 2;
  const std::string& notes() const;
  void set_notes(const std::string& value);
  void set_notes(std::string&& value);
  void set_notes(const char* value);
  void set_notes(const char* value, size_t size);
  std::string* mutable_notes();
  std::string* release_notes();
  void set_allocated_notes(std::string* notes);

  // string credential = 3;
  void clear_credential();
  static const int kCredentialFieldNumber = 3;
  const std::string& credential() const;
  void set_credential(const std::string& value);
  void set_credential(std::string&& value);
  void set_credential(const char* value);
  void set_credential(const char* value, size_t size);
  std::string* mutable_credential();
  std::string* release_credential();
  void set_allocated_credential(std::string* credential);

  // float datetime = 1;
  void clear_datetime();
  static const int kDatetimeFieldNumber = 1;
  float datetime() const;
  void set_datetime(float value);

  // @@protoc_insertion_point(class_scope:AccessRecord)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Attribute > metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr notes_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr credential_;
  float datetime_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_faro_2fproto_2fface_5fservice_2eproto;
};
// -------------------------------------------------------------------

class FaceRecord :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:FaceRecord) */ {
 public:
  FaceRecord();
  virtual ~FaceRecord();

  FaceRecord(const FaceRecord& from);
  FaceRecord(FaceRecord&& from) noexcept
    : FaceRecord() {
    *this = ::std::move(from);
  }

  inline FaceRecord& operator=(const FaceRecord& from) {
    CopyFrom(from);
    return *this;
  }
  inline FaceRecord& operator=(FaceRecord&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const FaceRecord& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const FaceRecord* internal_default_instance() {
    return reinterpret_cast<const FaceRecord*>(
               &_FaceRecord_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  void Swap(FaceRecord* other);
  friend void swap(FaceRecord& a, FaceRecord& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline FaceRecord* New() const final {
    return CreateMaybeMessage<FaceRecord>(nullptr);
  }

  FaceRecord* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<FaceRecord>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const FaceRecord& from);
  void MergeFrom(const FaceRecord& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FaceRecord* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "FaceRecord";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_faro_2fproto_2fface_5fservice_2eproto);
    return ::descriptor_table_faro_2fproto_2fface_5fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .Landmark landmarks = 8;
  int landmarks_size() const;
  void clear_landmarks();
  static const int kLandmarksFieldNumber = 8;
  ::Landmark* mutable_landmarks(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Landmark >*
      mutable_landmarks();
  const ::Landmark& landmarks(int index) const;
  ::Landmark* add_landmarks();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Landmark >&
      landmarks() const;

  // repeated .Attribute attributes = 10;
  int attributes_size() const;
  void clear_attributes();
  static const int kAttributesFieldNumber = 10;
  ::Attribute* mutable_attributes(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Attribute >*
      mutable_attributes();
  const ::Attribute& attributes(int index) const;
  ::Attribute* add_attributes();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Attribute >&
      attributes() const;

  // repeated .Attribute internal_data = 11;
  int internal_data_size() const;
  void clear_internal_data();
  static const int kInternalDataFieldNumber = 11;
  ::Attribute* mutable_internal_data(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Attribute >*
      mutable_internal_data();
  const ::Attribute& internal_data(int index) const;
  ::Attribute* add_internal_data();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Attribute >&
      internal_data() const;

  // repeated .Attribute metadata = 18;
  int metadata_size() const;
  void clear_metadata();
  static const int kMetadataFieldNumber = 18;
  ::Attribute* mutable_metadata(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Attribute >*
      mutable_metadata();
  const ::Attribute& metadata(int index) const;
  ::Attribute* add_metadata();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Attribute >&
      metadata() const;

  // repeated .AccessRecord access_records = 19;
  int access_records_size() const;
  void clear_access_records();
  static const int kAccessRecordsFieldNumber = 19;
  ::AccessRecord* mutable_access_records(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::AccessRecord >*
      mutable_access_records();
  const ::AccessRecord& access_records(int index) const;
  ::AccessRecord* add_access_records();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::AccessRecord >&
      access_records() const;

  // string subject_id = 1;
  void clear_subject_id();
  static const int kSubjectIdFieldNumber = 1;
  const std::string& subject_id() const;
  void set_subject_id(const std::string& value);
  void set_subject_id(std::string&& value);
  void set_subject_id(const char* value);
  void set_subject_id(const char* value, size_t size);
  std::string* mutable_subject_id();
  std::string* release_subject_id();
  void set_allocated_subject_id(std::string* subject_id);

  // string source = 4;
  void clear_source();
  static const int kSourceFieldNumber = 4;
  const std::string& source() const;
  void set_source(const std::string& value);
  void set_source(std::string&& value);
  void set_source(const char* value);
  void set_source(const char* value, size_t size);
  std::string* mutable_source();
  std::string* release_source();
  void set_allocated_source(std::string* source);

  // string name = 5;
  void clear_name();
  static const int kNameFieldNumber = 5;
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);

  // string notes = 6;
  void clear_notes();
  static const int kNotesFieldNumber = 6;
  const std::string& notes() const;
  void set_notes(const std::string& value);
  void set_notes(std::string&& value);
  void set_notes(const char* value);
  void set_notes(const char* value, size_t size);
  std::string* mutable_notes();
  std::string* release_notes();
  void set_allocated_notes(std::string* notes);

  // string gallery_key = 15;
  void clear_gallery_key();
  static const int kGalleryKeyFieldNumber = 15;
  const std::string& gallery_key() const;
  void set_gallery_key(const std::string& value);
  void set_gallery_key(std::string&& value);
  void set_gallery_key(const char* value);
  void set_gallery_key(const char* value, size_t size);
  std::string* mutable_gallery_key();
  std::string* release_gallery_key();
  void set_allocated_gallery_key(std::string* gallery_key);

  // .Detection detection = 2;
  bool has_detection() const;
  void clear_detection();
  static const int kDetectionFieldNumber = 2;
  const ::Detection& detection() const;
  ::Detection* release_detection();
  ::Detection* mutable_detection();
  void set_allocated_detection(::Detection* detection);

  // .FaceTemplate template = 3;
  bool has_template_() const;
  void clear_template_();
  static const int kTemplateFieldNumber = 3;
  const ::FaceTemplate& template_() const;
  ::FaceTemplate* release_template_();
  ::FaceTemplate* mutable_template_();
  void set_allocated_template_(::FaceTemplate* template_);

  // .Image view = 7;
  bool has_view() const;
  void clear_view();
  static const int kViewFieldNumber = 7;
  const ::Image& view() const;
  ::Image* release_view();
  ::Image* mutable_view();
  void set_allocated_view(::Image* view);

  // .Image aligned = 9;
  bool has_aligned() const;
  void clear_aligned();
  static const int kAlignedFieldNumber = 9;
  const ::Image& aligned() const;
  ::Image* release_aligned();
  ::Image* mutable_aligned();
  void set_allocated_aligned(::Image* aligned);

  // .FaceRecordList search_results = 13;
  bool has_search_results() const;
  void clear_search_results();
  static const int kSearchResultsFieldNumber = 13;
  const ::FaceRecordList& search_results() const;
  ::FaceRecordList* release_search_results();
  ::FaceRecordList* mutable_search_results();
  void set_allocated_search_results(::FaceRecordList* search_results);

  // int64 frame = 14;
  void clear_frame();
  static const int kFrameFieldNumber = 14;
  ::PROTOBUF_NAMESPACE_ID::int64 frame() const;
  void set_frame(::PROTOBUF_NAMESPACE_ID::int64 value);

  // float score = 12;
  void clear_score();
  static const int kScoreFieldNumber = 12;
  float score() const;
  void set_score(float value);

  // float collection_date = 16;
  void clear_collection_date();
  static const int kCollectionDateFieldNumber = 16;
  float collection_date() const;
  void set_collection_date(float value);

  // float enrollment_date = 17;
  void clear_enrollment_date();
  static const int kEnrollmentDateFieldNumber = 17;
  float enrollment_date() const;
  void set_enrollment_date(float value);

  // @@protoc_insertion_point(class_scope:FaceRecord)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Landmark > landmarks_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Attribute > attributes_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Attribute > internal_data_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Attribute > metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::AccessRecord > access_records_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr subject_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr source_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr notes_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr gallery_key_;
  ::Detection* detection_;
  ::FaceTemplate* template__;
  ::Image* view_;
  ::Image* aligned_;
  ::FaceRecordList* search_results_;
  ::PROTOBUF_NAMESPACE_ID::int64 frame_;
  float score_;
  float collection_date_;
  float enrollment_date_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_faro_2fproto_2fface_5fservice_2eproto;
};
// -------------------------------------------------------------------

class FaceRecordList :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:FaceRecordList) */ {
 public:
  FaceRecordList();
  virtual ~FaceRecordList();

  FaceRecordList(const FaceRecordList& from);
  FaceRecordList(FaceRecordList&& from) noexcept
    : FaceRecordList() {
    *this = ::std::move(from);
  }

  inline FaceRecordList& operator=(const FaceRecordList& from) {
    CopyFrom(from);
    return *this;
  }
  inline FaceRecordList& operator=(FaceRecordList&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const FaceRecordList& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const FaceRecordList* internal_default_instance() {
    return reinterpret_cast<const FaceRecordList*>(
               &_FaceRecordList_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  void Swap(FaceRecordList* other);
  friend void swap(FaceRecordList& a, FaceRecordList& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline FaceRecordList* New() const final {
    return CreateMaybeMessage<FaceRecordList>(nullptr);
  }

  FaceRecordList* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<FaceRecordList>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const FaceRecordList& from);
  void MergeFrom(const FaceRecordList& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FaceRecordList* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "FaceRecordList";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_faro_2fproto_2fface_5fservice_2eproto);
    return ::descriptor_table_faro_2fproto_2fface_5fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .FaceRecord face_records = 1;
  int face_records_size() const;
  void clear_face_records();
  static const int kFaceRecordsFieldNumber = 1;
  ::FaceRecord* mutable_face_records(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::FaceRecord >*
      mutable_face_records();
  const ::FaceRecord& face_records(int index) const;
  ::FaceRecord* add_face_records();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::FaceRecord >&
      face_records() const;

  // @@protoc_insertion_point(class_scope:FaceRecordList)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::FaceRecord > face_records_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_faro_2fproto_2fface_5fservice_2eproto;
};
// -------------------------------------------------------------------

class VerificationRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:VerificationRequest) */ {
 public:
  VerificationRequest();
  virtual ~VerificationRequest();

  VerificationRequest(const VerificationRequest& from);
  VerificationRequest(VerificationRequest&& from) noexcept
    : VerificationRequest() {
    *this = ::std::move(from);
  }

  inline VerificationRequest& operator=(const VerificationRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline VerificationRequest& operator=(VerificationRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const VerificationRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const VerificationRequest* internal_default_instance() {
    return reinterpret_cast<const VerificationRequest*>(
               &_VerificationRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    16;

  void Swap(VerificationRequest* other);
  friend void swap(VerificationRequest& a, VerificationRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline VerificationRequest* New() const final {
    return CreateMaybeMessage<VerificationRequest>(nullptr);
  }

  VerificationRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<VerificationRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const VerificationRequest& from);
  void MergeFrom(const VerificationRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(VerificationRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "VerificationRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_faro_2fproto_2fface_5fservice_2eproto);
    return ::descriptor_table_faro_2fproto_2fface_5fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .FaceRecord face_record = 3;
  int face_record_size() const;
  void clear_face_record();
  static const int kFaceRecordFieldNumber = 3;
  ::FaceRecord* mutable_face_record(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::FaceRecord >*
      mutable_face_record();
  const ::FaceRecord& face_record(int index) const;
  ::FaceRecord* add_face_record();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::FaceRecord >&
      face_record() const;

  // string gallery = 1;
  void clear_gallery();
  static const int kGalleryFieldNumber = 1;
  const std::string& gallery() const;
  void set_gallery(const std::string& value);
  void set_gallery(std::string&& value);
  void set_gallery(const char* value);
  void set_gallery(const char* value, size_t size);
  std::string* mutable_gallery();
  std::string* release_gallery();
  void set_allocated_gallery(std::string* gallery);

  // string subject_id = 2;
  void clear_subject_id();
  static const int kSubjectIdFieldNumber = 2;
  const std::string& subject_id() const;
  void set_subject_id(const std::string& value);
  void set_subject_id(std::string&& value);
  void set_subject_id(const char* value);
  void set_subject_id(const char* value, size_t size);
  std::string* mutable_subject_id();
  std::string* release_subject_id();
  void set_allocated_subject_id(std::string* subject_id);

  // @@protoc_insertion_point(class_scope:VerificationRequest)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::FaceRecord > face_record_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr gallery_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr subject_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_faro_2fproto_2fface_5fservice_2eproto;
};
// -------------------------------------------------------------------

class VerificationResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:VerificationResponse) */ {
 public:
  VerificationResponse();
  virtual ~VerificationResponse();

  VerificationResponse(const VerificationResponse& from);
  VerificationResponse(VerificationResponse&& from) noexcept
    : VerificationResponse() {
    *this = ::std::move(from);
  }

  inline VerificationResponse& operator=(const VerificationResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline VerificationResponse& operator=(VerificationResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const VerificationResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const VerificationResponse* internal_default_instance() {
    return reinterpret_cast<const VerificationResponse*>(
               &_VerificationResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    17;

  void Swap(VerificationResponse* other);
  friend void swap(VerificationResponse& a, VerificationResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline VerificationResponse* New() const final {
    return CreateMaybeMessage<VerificationResponse>(nullptr);
  }

  VerificationResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<VerificationResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const VerificationResponse& from);
  void MergeFrom(const VerificationResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(VerificationResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "VerificationResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_faro_2fproto_2fface_5fservice_2eproto);
    return ::descriptor_table_faro_2fproto_2fface_5fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .FaceRecord matches = 3;
  int matches_size() const;
  void clear_matches();
  static const int kMatchesFieldNumber = 3;
  ::FaceRecord* mutable_matches(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::FaceRecord >*
      mutable_matches();
  const ::FaceRecord& matches(int index) const;
  ::FaceRecord* add_matches();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::FaceRecord >&
      matches() const;

  // string error_message = 5;
  void clear_error_message();
  static const int kErrorMessageFieldNumber = 5;
  const std::string& error_message() const;
  void set_error_message(const std::string& value);
  void set_error_message(std::string&& value);
  void set_error_message(const char* value);
  void set_error_message(const char* value, size_t size);
  std::string* mutable_error_message();
  std::string* release_error_message();
  void set_allocated_error_message(std::string* error_message);

  // bool success = 1;
  void clear_success();
  static const int kSuccessFieldNumber = 1;
  bool success() const;
  void set_success(bool value);

  // float confidence = 2;
  void clear_confidence();
  static const int kConfidenceFieldNumber = 2;
  float confidence() const;
  void set_confidence(float value);

  // int32 error_code = 4;
  void clear_error_code();
  static const int kErrorCodeFieldNumber = 4;
  ::PROTOBUF_NAMESPACE_ID::int32 error_code() const;
  void set_error_code(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:VerificationResponse)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::FaceRecord > matches_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr error_message_;
  bool success_;
  float confidence_;
  ::PROTOBUF_NAMESPACE_ID::int32 error_code_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_faro_2fproto_2fface_5fservice_2eproto;
};
// -------------------------------------------------------------------

class SearchRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:SearchRequest) */ {
 public:
  SearchRequest();
  virtual ~SearchRequest();

  SearchRequest(const SearchRequest& from);
  SearchRequest(SearchRequest&& from) noexcept
    : SearchRequest() {
    *this = ::std::move(from);
  }

  inline SearchRequest& operator=(const SearchRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline SearchRequest& operator=(SearchRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SearchRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SearchRequest* internal_default_instance() {
    return reinterpret_cast<const SearchRequest*>(
               &_SearchRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    18;

  void Swap(SearchRequest* other);
  friend void swap(SearchRequest& a, SearchRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SearchRequest* New() const final {
    return CreateMaybeMessage<SearchRequest>(nullptr);
  }

  SearchRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SearchRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SearchRequest& from);
  void MergeFrom(const SearchRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SearchRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "SearchRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_faro_2fproto_2fface_5fservice_2eproto);
    return ::descriptor_table_faro_2fproto_2fface_5fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string search_gallery = 1;
  void clear_search_gallery();
  static const int kSearchGalleryFieldNumber = 1;
  const std::string& search_gallery() const;
  void set_search_gallery(const std::string& value);
  void set_search_gallery(std::string&& value);
  void set_search_gallery(const char* value);
  void set_search_gallery(const char* value, size_t size);
  std::string* mutable_search_gallery();
  std::string* release_search_gallery();
  void set_allocated_search_gallery(std::string* search_gallery);

  // .FaceRecordList probes = 3;
  bool has_probes() const;
  void clear_probes();
  static const int kProbesFieldNumber = 3;
  const ::FaceRecordList& probes() const;
  ::FaceRecordList* release_probes();
  ::FaceRecordList* mutable_probes();
  void set_allocated_probes(::FaceRecordList* probes);

  // int32 max_results = 4;
  void clear_max_results();
  static const int kMaxResultsFieldNumber = 4;
  ::PROTOBUF_NAMESPACE_ID::int32 max_results() const;
  void set_max_results(::PROTOBUF_NAMESPACE_ID::int32 value);

  // float threshold = 5;
  void clear_threshold();
  static const int kThresholdFieldNumber = 5;
  float threshold() const;
  void set_threshold(float value);

  // @@protoc_insertion_point(class_scope:SearchRequest)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr search_gallery_;
  ::FaceRecordList* probes_;
  ::PROTOBUF_NAMESPACE_ID::int32 max_results_;
  float threshold_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_faro_2fproto_2fface_5fservice_2eproto;
};
// -------------------------------------------------------------------

class SearchResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:SearchResponse) */ {
 public:
  SearchResponse();
  virtual ~SearchResponse();

  SearchResponse(const SearchResponse& from);
  SearchResponse(SearchResponse&& from) noexcept
    : SearchResponse() {
    *this = ::std::move(from);
  }

  inline SearchResponse& operator=(const SearchResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline SearchResponse& operator=(SearchResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SearchResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SearchResponse* internal_default_instance() {
    return reinterpret_cast<const SearchResponse*>(
               &_SearchResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    19;

  void Swap(SearchResponse* other);
  friend void swap(SearchResponse& a, SearchResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SearchResponse* New() const final {
    return CreateMaybeMessage<SearchResponse>(nullptr);
  }

  SearchResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SearchResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SearchResponse& from);
  void MergeFrom(const SearchResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SearchResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "SearchResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_faro_2fproto_2fface_5fservice_2eproto);
    return ::descriptor_table_faro_2fproto_2fface_5fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .ErrorMessage message = 1;
  bool has_message() const;
  void clear_message();
  static const int kMessageFieldNumber = 1;
  const ::ErrorMessage& message() const;
  ::ErrorMessage* release_message();
  ::ErrorMessage* mutable_message();
  void set_allocated_message(::ErrorMessage* message);

  // .FaceRecordList probes = 2;
  bool has_probes() const;
  void clear_probes();
  static const int kProbesFieldNumber = 2;
  const ::FaceRecordList& probes() const;
  ::FaceRecordList* release_probes();
  ::FaceRecordList* mutable_probes();
  void set_allocated_probes(::FaceRecordList* probes);

  // @@protoc_insertion_point(class_scope:SearchResponse)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::ErrorMessage* message_;
  ::FaceRecordList* probes_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_faro_2fproto_2fface_5fservice_2eproto;
};
// -------------------------------------------------------------------

class EnrollRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:EnrollRequest) */ {
 public:
  EnrollRequest();
  virtual ~EnrollRequest();

  EnrollRequest(const EnrollRequest& from);
  EnrollRequest(EnrollRequest&& from) noexcept
    : EnrollRequest() {
    *this = ::std::move(from);
  }

  inline EnrollRequest& operator=(const EnrollRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline EnrollRequest& operator=(EnrollRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const EnrollRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const EnrollRequest* internal_default_instance() {
    return reinterpret_cast<const EnrollRequest*>(
               &_EnrollRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    20;

  void Swap(EnrollRequest* other);
  friend void swap(EnrollRequest& a, EnrollRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline EnrollRequest* New() const final {
    return CreateMaybeMessage<EnrollRequest>(nullptr);
  }

  EnrollRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<EnrollRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const EnrollRequest& from);
  void MergeFrom(const EnrollRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(EnrollRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "EnrollRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_faro_2fproto_2fface_5fservice_2eproto);
    return ::descriptor_table_faro_2fproto_2fface_5fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string enroll_gallery = 1;
  void clear_enroll_gallery();
  static const int kEnrollGalleryFieldNumber = 1;
  const std::string& enroll_gallery() const;
  void set_enroll_gallery(const std::string& value);
  void set_enroll_gallery(std::string&& value);
  void set_enroll_gallery(const char* value);
  void set_enroll_gallery(const char* value, size_t size);
  std::string* mutable_enroll_gallery();
  std::string* release_enroll_gallery();
  void set_allocated_enroll_gallery(std::string* enroll_gallery);

  // .FaceRecordList records = 2;
  bool has_records() const;
  void clear_records();
  static const int kRecordsFieldNumber = 2;
  const ::FaceRecordList& records() const;
  ::FaceRecordList* release_records();
  ::FaceRecordList* mutable_records();
  void set_allocated_records(::FaceRecordList* records);

  // .EnrollOptions enroll_options = 10;
  bool has_enroll_options() const;
  void clear_enroll_options();
  static const int kEnrollOptionsFieldNumber = 10;
  const ::EnrollOptions& enroll_options() const;
  ::EnrollOptions* release_enroll_options();
  ::EnrollOptions* mutable_enroll_options();
  void set_allocated_enroll_options(::EnrollOptions* enroll_options);

  // @@protoc_insertion_point(class_scope:EnrollRequest)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr enroll_gallery_;
  ::FaceRecordList* records_;
  ::EnrollOptions* enroll_options_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_faro_2fproto_2fface_5fservice_2eproto;
};
// -------------------------------------------------------------------

class DetectRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:DetectRequest) */ {
 public:
  DetectRequest();
  virtual ~DetectRequest();

  DetectRequest(const DetectRequest& from);
  DetectRequest(DetectRequest&& from) noexcept
    : DetectRequest() {
    *this = ::std::move(from);
  }

  inline DetectRequest& operator=(const DetectRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline DetectRequest& operator=(DetectRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DetectRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DetectRequest* internal_default_instance() {
    return reinterpret_cast<const DetectRequest*>(
               &_DetectRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    21;

  void Swap(DetectRequest* other);
  friend void swap(DetectRequest& a, DetectRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline DetectRequest* New() const final {
    return CreateMaybeMessage<DetectRequest>(nullptr);
  }

  DetectRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DetectRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DetectRequest& from);
  void MergeFrom(const DetectRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DetectRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "DetectRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_faro_2fproto_2fface_5fservice_2eproto);
    return ::descriptor_table_faro_2fproto_2fface_5fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string source = 2;
  void clear_source();
  static const int kSourceFieldNumber = 2;
  const std::string& source() const;
  void set_source(const std::string& value);
  void set_source(std::string&& value);
  void set_source(const char* value);
  void set_source(const char* value, size_t size);
  std::string* mutable_source();
  std::string* release_source();
  void set_allocated_source(std::string* source);

  // string subject_id = 4;
  void clear_subject_id();
  static const int kSubjectIdFieldNumber = 4;
  const std::string& subject_id() const;
  void set_subject_id(const std::string& value);
  void set_subject_id(std::string&& value);
  void set_subject_id(const char* value);
  void set_subject_id(const char* value, size_t size);
  std::string* mutable_subject_id();
  std::string* release_subject_id();
  void set_allocated_subject_id(std::string* subject_id);

  // string subject_name = 5;
  void clear_subject_name();
  static const int kSubjectNameFieldNumber = 5;
  const std::string& subject_name() const;
  void set_subject_name(const std::string& value);
  void set_subject_name(std::string&& value);
  void set_subject_name(const char* value);
  void set_subject_name(const char* value, size_t size);
  std::string* mutable_subject_name();
  std::string* release_subject_name();
  void set_allocated_subject_name(std::string* subject_name);

  // .Image image = 1;
  bool has_image() const;
  void clear_image();
  static const int kImageFieldNumber = 1;
  const ::Image& image() const;
  ::Image* release_image();
  ::Image* mutable_image();
  void set_allocated_image(::Image* image);

  // .DetectionOptions detect_options = 8;
  bool has_detect_options() const;
  void clear_detect_options();
  static const int kDetectOptionsFieldNumber = 8;
  const ::DetectionOptions& detect_options() const;
  ::DetectionOptions* release_detect_options();
  ::DetectionOptions* mutable_detect_options();
  void set_allocated_detect_options(::DetectionOptions* detect_options);

  // int64 frame = 3;
  void clear_frame();
  static const int kFrameFieldNumber = 3;
  ::PROTOBUF_NAMESPACE_ID::int64 frame() const;
  void set_frame(::PROTOBUF_NAMESPACE_ID::int64 value);

  // @@protoc_insertion_point(class_scope:DetectRequest)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr source_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr subject_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr subject_name_;
  ::Image* image_;
  ::DetectionOptions* detect_options_;
  ::PROTOBUF_NAMESPACE_ID::int64 frame_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_faro_2fproto_2fface_5fservice_2eproto;
};
// -------------------------------------------------------------------

class ExtractRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ExtractRequest) */ {
 public:
  ExtractRequest();
  virtual ~ExtractRequest();

  ExtractRequest(const ExtractRequest& from);
  ExtractRequest(ExtractRequest&& from) noexcept
    : ExtractRequest() {
    *this = ::std::move(from);
  }

  inline ExtractRequest& operator=(const ExtractRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ExtractRequest& operator=(ExtractRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ExtractRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ExtractRequest* internal_default_instance() {
    return reinterpret_cast<const ExtractRequest*>(
               &_ExtractRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    22;

  void Swap(ExtractRequest* other);
  friend void swap(ExtractRequest& a, ExtractRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ExtractRequest* New() const final {
    return CreateMaybeMessage<ExtractRequest>(nullptr);
  }

  ExtractRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ExtractRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ExtractRequest& from);
  void MergeFrom(const ExtractRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ExtractRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ExtractRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_faro_2fproto_2fface_5fservice_2eproto);
    return ::descriptor_table_faro_2fproto_2fface_5fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .Image image = 1;
  bool has_image() const;
  void clear_image();
  static const int kImageFieldNumber = 1;
  const ::Image& image() const;
  ::Image* release_image();
  ::Image* mutable_image();
  void set_allocated_image(::Image* image);

  // .FaceRecordList records = 4;
  bool has_records() const;
  void clear_records();
  static const int kRecordsFieldNumber = 4;
  const ::FaceRecordList& records() const;
  ::FaceRecordList* release_records();
  ::FaceRecordList* mutable_records();
  void set_allocated_records(::FaceRecordList* records);

  // .ExtractOptions extract_options = 9;
  bool has_extract_options() const;
  void clear_extract_options();
  static const int kExtractOptionsFieldNumber = 9;
  const ::ExtractOptions& extract_options() const;
  ::ExtractOptions* release_extract_options();
  ::ExtractOptions* mutable_extract_options();
  void set_allocated_extract_options(::ExtractOptions* extract_options);

  // @@protoc_insertion_point(class_scope:ExtractRequest)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::Image* image_;
  ::FaceRecordList* records_;
  ::ExtractOptions* extract_options_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_faro_2fproto_2fface_5fservice_2eproto;
};
// -------------------------------------------------------------------

class ScoreRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ScoreRequest) */ {
 public:
  ScoreRequest();
  virtual ~ScoreRequest();

  ScoreRequest(const ScoreRequest& from);
  ScoreRequest(ScoreRequest&& from) noexcept
    : ScoreRequest() {
    *this = ::std::move(from);
  }

  inline ScoreRequest& operator=(const ScoreRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ScoreRequest& operator=(ScoreRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ScoreRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ScoreRequest* internal_default_instance() {
    return reinterpret_cast<const ScoreRequest*>(
               &_ScoreRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    23;

  void Swap(ScoreRequest* other);
  friend void swap(ScoreRequest& a, ScoreRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ScoreRequest* New() const final {
    return CreateMaybeMessage<ScoreRequest>(nullptr);
  }

  ScoreRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ScoreRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ScoreRequest& from);
  void MergeFrom(const ScoreRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ScoreRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ScoreRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_faro_2fproto_2fface_5fservice_2eproto);
    return ::descriptor_table_faro_2fproto_2fface_5fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .FaceRecordList face_probes = 1;
  bool has_face_probes() const;
  void clear_face_probes();
  static const int kFaceProbesFieldNumber = 1;
  const ::FaceRecordList& face_probes() const;
  ::FaceRecordList* release_face_probes();
  ::FaceRecordList* mutable_face_probes();
  void set_allocated_face_probes(::FaceRecordList* face_probes);

  // .FaceRecordList face_gallery = 2;
  bool has_face_gallery() const;
  void clear_face_gallery();
  static const int kFaceGalleryFieldNumber = 2;
  const ::FaceRecordList& face_gallery() const;
  ::FaceRecordList* release_face_gallery();
  ::FaceRecordList* mutable_face_gallery();
  void set_allocated_face_gallery(::FaceRecordList* face_gallery);

  // .TemplateList template_probes = 3;
  bool has_template_probes() const;
  void clear_template_probes();
  static const int kTemplateProbesFieldNumber = 3;
  const ::TemplateList& template_probes() const;
  ::TemplateList* release_template_probes();
  ::TemplateList* mutable_template_probes();
  void set_allocated_template_probes(::TemplateList* template_probes);

  // .TemplateList template_gallery = 4;
  bool has_template_gallery() const;
  void clear_template_gallery();
  static const int kTemplateGalleryFieldNumber = 4;
  const ::TemplateList& template_gallery() const;
  ::TemplateList* release_template_gallery();
  ::TemplateList* mutable_template_gallery();
  void set_allocated_template_gallery(::TemplateList* template_gallery);

  // @@protoc_insertion_point(class_scope:ScoreRequest)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::FaceRecordList* face_probes_;
  ::FaceRecordList* face_gallery_;
  ::TemplateList* template_probes_;
  ::TemplateList* template_gallery_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_faro_2fproto_2fface_5fservice_2eproto;
};
// -------------------------------------------------------------------

class DetectExtractRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:DetectExtractRequest) */ {
 public:
  DetectExtractRequest();
  virtual ~DetectExtractRequest();

  DetectExtractRequest(const DetectExtractRequest& from);
  DetectExtractRequest(DetectExtractRequest&& from) noexcept
    : DetectExtractRequest() {
    *this = ::std::move(from);
  }

  inline DetectExtractRequest& operator=(const DetectExtractRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline DetectExtractRequest& operator=(DetectExtractRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DetectExtractRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DetectExtractRequest* internal_default_instance() {
    return reinterpret_cast<const DetectExtractRequest*>(
               &_DetectExtractRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    24;

  void Swap(DetectExtractRequest* other);
  friend void swap(DetectExtractRequest& a, DetectExtractRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline DetectExtractRequest* New() const final {
    return CreateMaybeMessage<DetectExtractRequest>(nullptr);
  }

  DetectExtractRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DetectExtractRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DetectExtractRequest& from);
  void MergeFrom(const DetectExtractRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DetectExtractRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "DetectExtractRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_faro_2fproto_2fface_5fservice_2eproto);
    return ::descriptor_table_faro_2fproto_2fface_5fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .DetectRequest detect_request = 1;
  bool has_detect_request() const;
  void clear_detect_request();
  static const int kDetectRequestFieldNumber = 1;
  const ::DetectRequest& detect_request() const;
  ::DetectRequest* release_detect_request();
  ::DetectRequest* mutable_detect_request();
  void set_allocated_detect_request(::DetectRequest* detect_request);

  // .ExtractRequest extract_request = 2;
  bool has_extract_request() const;
  void clear_extract_request();
  static const int kExtractRequestFieldNumber = 2;
  const ::ExtractRequest& extract_request() const;
  ::ExtractRequest* release_extract_request();
  ::ExtractRequest* mutable_extract_request();
  void set_allocated_extract_request(::ExtractRequest* extract_request);

  // @@protoc_insertion_point(class_scope:DetectExtractRequest)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::DetectRequest* detect_request_;
  ::ExtractRequest* extract_request_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_faro_2fproto_2fface_5fservice_2eproto;
};
// -------------------------------------------------------------------

class DetectExtractEnrollRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:DetectExtractEnrollRequest) */ {
 public:
  DetectExtractEnrollRequest();
  virtual ~DetectExtractEnrollRequest();

  DetectExtractEnrollRequest(const DetectExtractEnrollRequest& from);
  DetectExtractEnrollRequest(DetectExtractEnrollRequest&& from) noexcept
    : DetectExtractEnrollRequest() {
    *this = ::std::move(from);
  }

  inline DetectExtractEnrollRequest& operator=(const DetectExtractEnrollRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline DetectExtractEnrollRequest& operator=(DetectExtractEnrollRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DetectExtractEnrollRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DetectExtractEnrollRequest* internal_default_instance() {
    return reinterpret_cast<const DetectExtractEnrollRequest*>(
               &_DetectExtractEnrollRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    25;

  void Swap(DetectExtractEnrollRequest* other);
  friend void swap(DetectExtractEnrollRequest& a, DetectExtractEnrollRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline DetectExtractEnrollRequest* New() const final {
    return CreateMaybeMessage<DetectExtractEnrollRequest>(nullptr);
  }

  DetectExtractEnrollRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DetectExtractEnrollRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DetectExtractEnrollRequest& from);
  void MergeFrom(const DetectExtractEnrollRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DetectExtractEnrollRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "DetectExtractEnrollRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_faro_2fproto_2fface_5fservice_2eproto);
    return ::descriptor_table_faro_2fproto_2fface_5fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .DetectRequest detect_request = 1;
  bool has_detect_request() const;
  void clear_detect_request();
  static const int kDetectRequestFieldNumber = 1;
  const ::DetectRequest& detect_request() const;
  ::DetectRequest* release_detect_request();
  ::DetectRequest* mutable_detect_request();
  void set_allocated_detect_request(::DetectRequest* detect_request);

  // .ExtractRequest extract_request = 2;
  bool has_extract_request() const;
  void clear_extract_request();
  static const int kExtractRequestFieldNumber = 2;
  const ::ExtractRequest& extract_request() const;
  ::ExtractRequest* release_extract_request();
  ::ExtractRequest* mutable_extract_request();
  void set_allocated_extract_request(::ExtractRequest* extract_request);

  // .EnrollRequest enroll_request = 3;
  bool has_enroll_request() const;
  void clear_enroll_request();
  static const int kEnrollRequestFieldNumber = 3;
  const ::EnrollRequest& enroll_request() const;
  ::EnrollRequest* release_enroll_request();
  ::EnrollRequest* mutable_enroll_request();
  void set_allocated_enroll_request(::EnrollRequest* enroll_request);

  // @@protoc_insertion_point(class_scope:DetectExtractEnrollRequest)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::DetectRequest* detect_request_;
  ::ExtractRequest* extract_request_;
  ::EnrollRequest* enroll_request_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_faro_2fproto_2fface_5fservice_2eproto;
};
// -------------------------------------------------------------------

class DetectExtractSearchRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:DetectExtractSearchRequest) */ {
 public:
  DetectExtractSearchRequest();
  virtual ~DetectExtractSearchRequest();

  DetectExtractSearchRequest(const DetectExtractSearchRequest& from);
  DetectExtractSearchRequest(DetectExtractSearchRequest&& from) noexcept
    : DetectExtractSearchRequest() {
    *this = ::std::move(from);
  }

  inline DetectExtractSearchRequest& operator=(const DetectExtractSearchRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline DetectExtractSearchRequest& operator=(DetectExtractSearchRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DetectExtractSearchRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DetectExtractSearchRequest* internal_default_instance() {
    return reinterpret_cast<const DetectExtractSearchRequest*>(
               &_DetectExtractSearchRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    26;

  void Swap(DetectExtractSearchRequest* other);
  friend void swap(DetectExtractSearchRequest& a, DetectExtractSearchRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline DetectExtractSearchRequest* New() const final {
    return CreateMaybeMessage<DetectExtractSearchRequest>(nullptr);
  }

  DetectExtractSearchRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DetectExtractSearchRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DetectExtractSearchRequest& from);
  void MergeFrom(const DetectExtractSearchRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DetectExtractSearchRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "DetectExtractSearchRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_faro_2fproto_2fface_5fservice_2eproto);
    return ::descriptor_table_faro_2fproto_2fface_5fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .DetectRequest detect_request = 1;
  bool has_detect_request() const;
  void clear_detect_request();
  static const int kDetectRequestFieldNumber = 1;
  const ::DetectRequest& detect_request() const;
  ::DetectRequest* release_detect_request();
  ::DetectRequest* mutable_detect_request();
  void set_allocated_detect_request(::DetectRequest* detect_request);

  // .ExtractRequest extract_request = 2;
  bool has_extract_request() const;
  void clear_extract_request();
  static const int kExtractRequestFieldNumber = 2;
  const ::ExtractRequest& extract_request() const;
  ::ExtractRequest* release_extract_request();
  ::ExtractRequest* mutable_extract_request();
  void set_allocated_extract_request(::ExtractRequest* extract_request);

  // .SearchRequest search_request = 3;
  bool has_search_request() const;
  void clear_search_request();
  static const int kSearchRequestFieldNumber = 3;
  const ::SearchRequest& search_request() const;
  ::SearchRequest* release_search_request();
  ::SearchRequest* mutable_search_request();
  void set_allocated_search_request(::SearchRequest* search_request);

  // @@protoc_insertion_point(class_scope:DetectExtractSearchRequest)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::DetectRequest* detect_request_;
  ::ExtractRequest* extract_request_;
  ::SearchRequest* search_request_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_faro_2fproto_2fface_5fservice_2eproto;
};
// -------------------------------------------------------------------

class FaceStatusRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:FaceStatusRequest) */ {
 public:
  FaceStatusRequest();
  virtual ~FaceStatusRequest();

  FaceStatusRequest(const FaceStatusRequest& from);
  FaceStatusRequest(FaceStatusRequest&& from) noexcept
    : FaceStatusRequest() {
    *this = ::std::move(from);
  }

  inline FaceStatusRequest& operator=(const FaceStatusRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline FaceStatusRequest& operator=(FaceStatusRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const FaceStatusRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const FaceStatusRequest* internal_default_instance() {
    return reinterpret_cast<const FaceStatusRequest*>(
               &_FaceStatusRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    27;

  void Swap(FaceStatusRequest* other);
  friend void swap(FaceStatusRequest& a, FaceStatusRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline FaceStatusRequest* New() const final {
    return CreateMaybeMessage<FaceStatusRequest>(nullptr);
  }

  FaceStatusRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<FaceStatusRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const FaceStatusRequest& from);
  void MergeFrom(const FaceStatusRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FaceStatusRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "FaceStatusRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_faro_2fproto_2fface_5fservice_2eproto);
    return ::descriptor_table_faro_2fproto_2fface_5fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:FaceStatusRequest)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_faro_2fproto_2fface_5fservice_2eproto;
};
// -------------------------------------------------------------------

class FaceServiceInfo :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:FaceServiceInfo) */ {
 public:
  FaceServiceInfo();
  virtual ~FaceServiceInfo();

  FaceServiceInfo(const FaceServiceInfo& from);
  FaceServiceInfo(FaceServiceInfo&& from) noexcept
    : FaceServiceInfo() {
    *this = ::std::move(from);
  }

  inline FaceServiceInfo& operator=(const FaceServiceInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline FaceServiceInfo& operator=(FaceServiceInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const FaceServiceInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const FaceServiceInfo* internal_default_instance() {
    return reinterpret_cast<const FaceServiceInfo*>(
               &_FaceServiceInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    28;

  void Swap(FaceServiceInfo* other);
  friend void swap(FaceServiceInfo& a, FaceServiceInfo& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline FaceServiceInfo* New() const final {
    return CreateMaybeMessage<FaceServiceInfo>(nullptr);
  }

  FaceServiceInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<FaceServiceInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const FaceServiceInfo& from);
  void MergeFrom(const FaceServiceInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FaceServiceInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "FaceServiceInfo";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_faro_2fproto_2fface_5fservice_2eproto);
    return ::descriptor_table_faro_2fproto_2fface_5fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string algorithm = 10;
  void clear_algorithm();
  static const int kAlgorithmFieldNumber = 10;
  const std::string& algorithm() const;
  void set_algorithm(const std::string& value);
  void set_algorithm(std::string&& value);
  void set_algorithm(const char* value);
  void set_algorithm(const char* value, size_t size);
  std::string* mutable_algorithm();
  std::string* release_algorithm();
  void set_allocated_algorithm(std::string* algorithm);

  // string notes = 11;
  void clear_notes();
  static const int kNotesFieldNumber = 11;
  const std::string& notes() const;
  void set_notes(const std::string& value);
  void set_notes(std::string&& value);
  void set_notes(const char* value);
  void set_notes(const char* value, size_t size);
  std::string* mutable_notes();
  std::string* release_notes();
  void set_allocated_notes(std::string* notes);

  // .ServiceStatus status = 1;
  void clear_status();
  static const int kStatusFieldNumber = 1;
  ::ServiceStatus status() const;
  void set_status(::ServiceStatus value);

  // int32 worker_count = 2;
  void clear_worker_count();
  static const int kWorkerCountFieldNumber = 2;
  ::PROTOBUF_NAMESPACE_ID::int32 worker_count() const;
  void set_worker_count(::PROTOBUF_NAMESPACE_ID::int32 value);

  // bool detection_support = 3;
  void clear_detection_support();
  static const int kDetectionSupportFieldNumber = 3;
  bool detection_support() const;
  void set_detection_support(bool value);

  // bool extract_support = 4;
  void clear_extract_support();
  static const int kExtractSupportFieldNumber = 4;
  bool extract_support() const;
  void set_extract_support(bool value);

  // bool score_support = 5;
  void clear_score_support();
  static const int kScoreSupportFieldNumber = 5;
  bool score_support() const;
  void set_score_support(bool value);

  // bool attribute_support = 6;
  void clear_attribute_support();
  static const int kAttributeSupportFieldNumber = 6;
  bool attribute_support() const;
  void set_attribute_support(bool value);

  // .ScoreType score_type = 7;
  void clear_score_type();
  static const int kScoreTypeFieldNumber = 7;
  ::ScoreType score_type() const;
  void set_score_type(::ScoreType value);

  // float detection_threshold = 8;
  void clear_detection_threshold();
  static const int kDetectionThresholdFieldNumber = 8;
  float detection_threshold() const;
  void set_detection_threshold(float value);

  // float match_threshold = 9;
  void clear_match_threshold();
  static const int kMatchThresholdFieldNumber = 9;
  float match_threshold() const;
  void set_match_threshold(float value);

  // @@protoc_insertion_point(class_scope:FaceServiceInfo)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr algorithm_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr notes_;
  int status_;
  ::PROTOBUF_NAMESPACE_ID::int32 worker_count_;
  bool detection_support_;
  bool extract_support_;
  bool score_support_;
  bool attribute_support_;
  int score_type_;
  float detection_threshold_;
  float match_threshold_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_faro_2fproto_2fface_5fservice_2eproto;
};
// -------------------------------------------------------------------

class GalleryListRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:GalleryListRequest) */ {
 public:
  GalleryListRequest();
  virtual ~GalleryListRequest();

  GalleryListRequest(const GalleryListRequest& from);
  GalleryListRequest(GalleryListRequest&& from) noexcept
    : GalleryListRequest() {
    *this = ::std::move(from);
  }

  inline GalleryListRequest& operator=(const GalleryListRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GalleryListRequest& operator=(GalleryListRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GalleryListRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GalleryListRequest* internal_default_instance() {
    return reinterpret_cast<const GalleryListRequest*>(
               &_GalleryListRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    29;

  void Swap(GalleryListRequest* other);
  friend void swap(GalleryListRequest& a, GalleryListRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GalleryListRequest* New() const final {
    return CreateMaybeMessage<GalleryListRequest>(nullptr);
  }

  GalleryListRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GalleryListRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GalleryListRequest& from);
  void MergeFrom(const GalleryListRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GalleryListRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "GalleryListRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_faro_2fproto_2fface_5fservice_2eproto);
    return ::descriptor_table_faro_2fproto_2fface_5fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:GalleryListRequest)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_faro_2fproto_2fface_5fservice_2eproto;
};
// -------------------------------------------------------------------

class GalleryDeleteRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:GalleryDeleteRequest) */ {
 public:
  GalleryDeleteRequest();
  virtual ~GalleryDeleteRequest();

  GalleryDeleteRequest(const GalleryDeleteRequest& from);
  GalleryDeleteRequest(GalleryDeleteRequest&& from) noexcept
    : GalleryDeleteRequest() {
    *this = ::std::move(from);
  }

  inline GalleryDeleteRequest& operator=(const GalleryDeleteRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GalleryDeleteRequest& operator=(GalleryDeleteRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GalleryDeleteRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GalleryDeleteRequest* internal_default_instance() {
    return reinterpret_cast<const GalleryDeleteRequest*>(
               &_GalleryDeleteRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    30;

  void Swap(GalleryDeleteRequest* other);
  friend void swap(GalleryDeleteRequest& a, GalleryDeleteRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GalleryDeleteRequest* New() const final {
    return CreateMaybeMessage<GalleryDeleteRequest>(nullptr);
  }

  GalleryDeleteRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GalleryDeleteRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GalleryDeleteRequest& from);
  void MergeFrom(const GalleryDeleteRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GalleryDeleteRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "GalleryDeleteRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_faro_2fproto_2fface_5fservice_2eproto);
    return ::descriptor_table_faro_2fproto_2fface_5fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string gallery_name = 1;
  void clear_gallery_name();
  static const int kGalleryNameFieldNumber = 1;
  const std::string& gallery_name() const;
  void set_gallery_name(const std::string& value);
  void set_gallery_name(std::string&& value);
  void set_gallery_name(const char* value);
  void set_gallery_name(const char* value, size_t size);
  std::string* mutable_gallery_name();
  std::string* release_gallery_name();
  void set_allocated_gallery_name(std::string* gallery_name);

  // @@protoc_insertion_point(class_scope:GalleryDeleteRequest)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr gallery_name_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_faro_2fproto_2fface_5fservice_2eproto;
};
// -------------------------------------------------------------------

class EnrollmentListRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:EnrollmentListRequest) */ {
 public:
  EnrollmentListRequest();
  virtual ~EnrollmentListRequest();

  EnrollmentListRequest(const EnrollmentListRequest& from);
  EnrollmentListRequest(EnrollmentListRequest&& from) noexcept
    : EnrollmentListRequest() {
    *this = ::std::move(from);
  }

  inline EnrollmentListRequest& operator=(const EnrollmentListRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline EnrollmentListRequest& operator=(EnrollmentListRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const EnrollmentListRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const EnrollmentListRequest* internal_default_instance() {
    return reinterpret_cast<const EnrollmentListRequest*>(
               &_EnrollmentListRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    31;

  void Swap(EnrollmentListRequest* other);
  friend void swap(EnrollmentListRequest& a, EnrollmentListRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline EnrollmentListRequest* New() const final {
    return CreateMaybeMessage<EnrollmentListRequest>(nullptr);
  }

  EnrollmentListRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<EnrollmentListRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const EnrollmentListRequest& from);
  void MergeFrom(const EnrollmentListRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(EnrollmentListRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "EnrollmentListRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_faro_2fproto_2fface_5fservice_2eproto);
    return ::descriptor_table_faro_2fproto_2fface_5fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string gallery_name = 1;
  void clear_gallery_name();
  static const int kGalleryNameFieldNumber = 1;
  const std::string& gallery_name() const;
  void set_gallery_name(const std::string& value);
  void set_gallery_name(std::string&& value);
  void set_gallery_name(const char* value);
  void set_gallery_name(const char* value, size_t size);
  std::string* mutable_gallery_name();
  std::string* release_gallery_name();
  void set_allocated_gallery_name(std::string* gallery_name);

  // @@protoc_insertion_point(class_scope:EnrollmentListRequest)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr gallery_name_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_faro_2fproto_2fface_5fservice_2eproto;
};
// -------------------------------------------------------------------

class EnrollmentInfo :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:EnrollmentInfo) */ {
 public:
  EnrollmentInfo();
  virtual ~EnrollmentInfo();

  EnrollmentInfo(const EnrollmentInfo& from);
  EnrollmentInfo(EnrollmentInfo&& from) noexcept
    : EnrollmentInfo() {
    *this = ::std::move(from);
  }

  inline EnrollmentInfo& operator=(const EnrollmentInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline EnrollmentInfo& operator=(EnrollmentInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const EnrollmentInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const EnrollmentInfo* internal_default_instance() {
    return reinterpret_cast<const EnrollmentInfo*>(
               &_EnrollmentInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    32;

  void Swap(EnrollmentInfo* other);
  friend void swap(EnrollmentInfo& a, EnrollmentInfo& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline EnrollmentInfo* New() const final {
    return CreateMaybeMessage<EnrollmentInfo>(nullptr);
  }

  EnrollmentInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<EnrollmentInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const EnrollmentInfo& from);
  void MergeFrom(const EnrollmentInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(EnrollmentInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "EnrollmentInfo";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_faro_2fproto_2fface_5fservice_2eproto);
    return ::descriptor_table_faro_2fproto_2fface_5fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string subject_id = 1;
  void clear_subject_id();
  static const int kSubjectIdFieldNumber = 1;
  const std::string& subject_id() const;
  void set_subject_id(const std::string& value);
  void set_subject_id(std::string&& value);
  void set_subject_id(const char* value);
  void set_subject_id(const char* value, size_t size);
  std::string* mutable_subject_id();
  std::string* release_subject_id();
  void set_allocated_subject_id(std::string* subject_id);

  // string name = 2;
  void clear_name();
  static const int kNameFieldNumber = 2;
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);

  // int32 face_count = 3;
  void clear_face_count();
  static const int kFaceCountFieldNumber = 3;
  ::PROTOBUF_NAMESPACE_ID::int32 face_count() const;
  void set_face_count(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:EnrollmentInfo)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr subject_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::int32 face_count_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_faro_2fproto_2fface_5fservice_2eproto;
};
// -------------------------------------------------------------------

class EnrollmentListResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:EnrollmentListResponse) */ {
 public:
  EnrollmentListResponse();
  virtual ~EnrollmentListResponse();

  EnrollmentListResponse(const EnrollmentListResponse& from);
  EnrollmentListResponse(EnrollmentListResponse&& from) noexcept
    : EnrollmentListResponse() {
    *this = ::std::move(from);
  }

  inline EnrollmentListResponse& operator=(const EnrollmentListResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline EnrollmentListResponse& operator=(EnrollmentListResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const EnrollmentListResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const EnrollmentListResponse* internal_default_instance() {
    return reinterpret_cast<const EnrollmentListResponse*>(
               &_EnrollmentListResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    33;

  void Swap(EnrollmentListResponse* other);
  friend void swap(EnrollmentListResponse& a, EnrollmentListResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline EnrollmentListResponse* New() const final {
    return CreateMaybeMessage<EnrollmentListResponse>(nullptr);
  }

  EnrollmentListResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<EnrollmentListResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const EnrollmentListResponse& from);
  void MergeFrom(const EnrollmentListResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(EnrollmentListResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "EnrollmentListResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_faro_2fproto_2fface_5fservice_2eproto);
    return ::descriptor_table_faro_2fproto_2fface_5fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .EnrollmentInfo enrollments = 2;
  int enrollments_size() const;
  void clear_enrollments();
  static const int kEnrollmentsFieldNumber = 2;
  ::EnrollmentInfo* mutable_enrollments(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::EnrollmentInfo >*
      mutable_enrollments();
  const ::EnrollmentInfo& enrollments(int index) const;
  ::EnrollmentInfo* add_enrollments();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::EnrollmentInfo >&
      enrollments() const;

  // string gallery_name = 1;
  void clear_gallery_name();
  static const int kGalleryNameFieldNumber = 1;
  const std::string& gallery_name() const;
  void set_gallery_name(const std::string& value);
  void set_gallery_name(std::string&& value);
  void set_gallery_name(const char* value);
  void set_gallery_name(const char* value, size_t size);
  std::string* mutable_gallery_name();
  std::string* release_gallery_name();
  void set_allocated_gallery_name(std::string* gallery_name);

  // @@protoc_insertion_point(class_scope:EnrollmentListResponse)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::EnrollmentInfo > enrollments_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr gallery_name_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_faro_2fproto_2fface_5fservice_2eproto;
};
// -------------------------------------------------------------------

class EnrollmentDeleteRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:EnrollmentDeleteRequest) */ {
 public:
  EnrollmentDeleteRequest();
  virtual ~EnrollmentDeleteRequest();

  EnrollmentDeleteRequest(const EnrollmentDeleteRequest& from);
  EnrollmentDeleteRequest(EnrollmentDeleteRequest&& from) noexcept
    : EnrollmentDeleteRequest() {
    *this = ::std::move(from);
  }

  inline EnrollmentDeleteRequest& operator=(const EnrollmentDeleteRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline EnrollmentDeleteRequest& operator=(EnrollmentDeleteRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const EnrollmentDeleteRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const EnrollmentDeleteRequest* internal_default_instance() {
    return reinterpret_cast<const EnrollmentDeleteRequest*>(
               &_EnrollmentDeleteRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    34;

  void Swap(EnrollmentDeleteRequest* other);
  friend void swap(EnrollmentDeleteRequest& a, EnrollmentDeleteRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline EnrollmentDeleteRequest* New() const final {
    return CreateMaybeMessage<EnrollmentDeleteRequest>(nullptr);
  }

  EnrollmentDeleteRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<EnrollmentDeleteRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const EnrollmentDeleteRequest& from);
  void MergeFrom(const EnrollmentDeleteRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(EnrollmentDeleteRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "EnrollmentDeleteRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_faro_2fproto_2fface_5fservice_2eproto);
    return ::descriptor_table_faro_2fproto_2fface_5fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string gallery_name = 1;
  void clear_gallery_name();
  static const int kGalleryNameFieldNumber = 1;
  const std::string& gallery_name() const;
  void set_gallery_name(const std::string& value);
  void set_gallery_name(std::string&& value);
  void set_gallery_name(const char* value);
  void set_gallery_name(const char* value, size_t size);
  std::string* mutable_gallery_name();
  std::string* release_gallery_name();
  void set_allocated_gallery_name(std::string* gallery_name);

  // string subject_id = 2;
  void clear_subject_id();
  static const int kSubjectIdFieldNumber = 2;
  const std::string& subject_id() const;
  void set_subject_id(const std::string& value);
  void set_subject_id(std::string&& value);
  void set_subject_id(const char* value);
  void set_subject_id(const char* value, size_t size);
  std::string* mutable_subject_id();
  std::string* release_subject_id();
  void set_allocated_subject_id(std::string* subject_id);

  // @@protoc_insertion_point(class_scope:EnrollmentDeleteRequest)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr gallery_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr subject_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_faro_2fproto_2fface_5fservice_2eproto;
};
// -------------------------------------------------------------------

class GalleryInfo :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:GalleryInfo) */ {
 public:
  GalleryInfo();
  virtual ~GalleryInfo();

  GalleryInfo(const GalleryInfo& from);
  GalleryInfo(GalleryInfo&& from) noexcept
    : GalleryInfo() {
    *this = ::std::move(from);
  }

  inline GalleryInfo& operator=(const GalleryInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline GalleryInfo& operator=(GalleryInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GalleryInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GalleryInfo* internal_default_instance() {
    return reinterpret_cast<const GalleryInfo*>(
               &_GalleryInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    35;

  void Swap(GalleryInfo* other);
  friend void swap(GalleryInfo& a, GalleryInfo& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GalleryInfo* New() const final {
    return CreateMaybeMessage<GalleryInfo>(nullptr);
  }

  GalleryInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GalleryInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GalleryInfo& from);
  void MergeFrom(const GalleryInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GalleryInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "GalleryInfo";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_faro_2fproto_2fface_5fservice_2eproto);
    return ::descriptor_table_faro_2fproto_2fface_5fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string gallery_name = 1;
  void clear_gallery_name();
  static const int kGalleryNameFieldNumber = 1;
  const std::string& gallery_name() const;
  void set_gallery_name(const std::string& value);
  void set_gallery_name(std::string&& value);
  void set_gallery_name(const char* value);
  void set_gallery_name(const char* value, size_t size);
  std::string* mutable_gallery_name();
  std::string* release_gallery_name();
  void set_allocated_gallery_name(std::string* gallery_name);

  // int64 face_count = 2;
  void clear_face_count();
  static const int kFaceCountFieldNumber = 2;
  ::PROTOBUF_NAMESPACE_ID::int64 face_count() const;
  void set_face_count(::PROTOBUF_NAMESPACE_ID::int64 value);

  // @@protoc_insertion_point(class_scope:GalleryInfo)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr gallery_name_;
  ::PROTOBUF_NAMESPACE_ID::int64 face_count_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_faro_2fproto_2fface_5fservice_2eproto;
};
// -------------------------------------------------------------------

class GalleryList :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:GalleryList) */ {
 public:
  GalleryList();
  virtual ~GalleryList();

  GalleryList(const GalleryList& from);
  GalleryList(GalleryList&& from) noexcept
    : GalleryList() {
    *this = ::std::move(from);
  }

  inline GalleryList& operator=(const GalleryList& from) {
    CopyFrom(from);
    return *this;
  }
  inline GalleryList& operator=(GalleryList&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GalleryList& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GalleryList* internal_default_instance() {
    return reinterpret_cast<const GalleryList*>(
               &_GalleryList_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    36;

  void Swap(GalleryList* other);
  friend void swap(GalleryList& a, GalleryList& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GalleryList* New() const final {
    return CreateMaybeMessage<GalleryList>(nullptr);
  }

  GalleryList* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GalleryList>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GalleryList& from);
  void MergeFrom(const GalleryList& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GalleryList* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "GalleryList";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_faro_2fproto_2fface_5fservice_2eproto);
    return ::descriptor_table_faro_2fproto_2fface_5fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .GalleryInfo galleries = 1;
  int galleries_size() const;
  void clear_galleries();
  static const int kGalleriesFieldNumber = 1;
  ::GalleryInfo* mutable_galleries(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::GalleryInfo >*
      mutable_galleries();
  const ::GalleryInfo& galleries(int index) const;
  ::GalleryInfo* add_galleries();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::GalleryInfo >&
      galleries() const;

  // @@protoc_insertion_point(class_scope:GalleryList)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::GalleryInfo > galleries_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_faro_2fproto_2fface_5fservice_2eproto;
};
// -------------------------------------------------------------------

class Empty :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Empty) */ {
 public:
  Empty();
  virtual ~Empty();

  Empty(const Empty& from);
  Empty(Empty&& from) noexcept
    : Empty() {
    *this = ::std::move(from);
  }

  inline Empty& operator=(const Empty& from) {
    CopyFrom(from);
    return *this;
  }
  inline Empty& operator=(Empty&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Empty& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Empty* internal_default_instance() {
    return reinterpret_cast<const Empty*>(
               &_Empty_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    37;

  void Swap(Empty* other);
  friend void swap(Empty& a, Empty& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Empty* New() const final {
    return CreateMaybeMessage<Empty>(nullptr);
  }

  Empty* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Empty>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Empty& from);
  void MergeFrom(const Empty& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Empty* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Empty";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_faro_2fproto_2fface_5fservice_2eproto);
    return ::descriptor_table_faro_2fproto_2fface_5fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:Empty)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_faro_2fproto_2fface_5fservice_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Attribute

// string key = 1;
inline void Attribute::clear_key() {
  key_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Attribute::key() const {
  // @@protoc_insertion_point(field_get:Attribute.key)
  return key_.GetNoArena();
}
inline void Attribute::set_key(const std::string& value) {
  
  key_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Attribute.key)
}
inline void Attribute::set_key(std::string&& value) {
  
  key_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Attribute.key)
}
inline void Attribute::set_key(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  key_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Attribute.key)
}
inline void Attribute::set_key(const char* value, size_t size) {
  
  key_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Attribute.key)
}
inline std::string* Attribute::mutable_key() {
  
  // @@protoc_insertion_point(field_mutable:Attribute.key)
  return key_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Attribute::release_key() {
  // @@protoc_insertion_point(field_release:Attribute.key)
  
  return key_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Attribute::set_allocated_key(std::string* key) {
  if (key != nullptr) {
    
  } else {
    
  }
  key_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), key);
  // @@protoc_insertion_point(field_set_allocated:Attribute.key)
}

// string description = 2;
inline void Attribute::clear_description() {
  description_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Attribute::description() const {
  // @@protoc_insertion_point(field_get:Attribute.description)
  return description_.GetNoArena();
}
inline void Attribute::set_description(const std::string& value) {
  
  description_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Attribute.description)
}
inline void Attribute::set_description(std::string&& value) {
  
  description_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Attribute.description)
}
inline void Attribute::set_description(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  description_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Attribute.description)
}
inline void Attribute::set_description(const char* value, size_t size) {
  
  description_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Attribute.description)
}
inline std::string* Attribute::mutable_description() {
  
  // @@protoc_insertion_point(field_mutable:Attribute.description)
  return description_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Attribute::release_description() {
  // @@protoc_insertion_point(field_release:Attribute.description)
  
  return description_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Attribute::set_allocated_description(std::string* description) {
  if (description != nullptr) {
    
  } else {
    
  }
  description_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), description);
  // @@protoc_insertion_point(field_set_allocated:Attribute.description)
}

// bytes buffer = 3;
inline void Attribute::clear_buffer() {
  buffer_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Attribute::buffer() const {
  // @@protoc_insertion_point(field_get:Attribute.buffer)
  return buffer_.GetNoArena();
}
inline void Attribute::set_buffer(const std::string& value) {
  
  buffer_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Attribute.buffer)
}
inline void Attribute::set_buffer(std::string&& value) {
  
  buffer_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Attribute.buffer)
}
inline void Attribute::set_buffer(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  buffer_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Attribute.buffer)
}
inline void Attribute::set_buffer(const void* value, size_t size) {
  
  buffer_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Attribute.buffer)
}
inline std::string* Attribute::mutable_buffer() {
  
  // @@protoc_insertion_point(field_mutable:Attribute.buffer)
  return buffer_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Attribute::release_buffer() {
  // @@protoc_insertion_point(field_release:Attribute.buffer)
  
  return buffer_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Attribute::set_allocated_buffer(std::string* buffer) {
  if (buffer != nullptr) {
    
  } else {
    
  }
  buffer_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), buffer);
  // @@protoc_insertion_point(field_set_allocated:Attribute.buffer)
}

// float fvalue = 4;
inline void Attribute::clear_fvalue() {
  fvalue_ = 0;
}
inline float Attribute::fvalue() const {
  // @@protoc_insertion_point(field_get:Attribute.fvalue)
  return fvalue_;
}
inline void Attribute::set_fvalue(float value) {
  
  fvalue_ = value;
  // @@protoc_insertion_point(field_set:Attribute.fvalue)
}

// int32 ivalue = 5;
inline void Attribute::clear_ivalue() {
  ivalue_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Attribute::ivalue() const {
  // @@protoc_insertion_point(field_get:Attribute.ivalue)
  return ivalue_;
}
inline void Attribute::set_ivalue(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  ivalue_ = value;
  // @@protoc_insertion_point(field_set:Attribute.ivalue)
}

// string text = 6;
inline void Attribute::clear_text() {
  text_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Attribute::text() const {
  // @@protoc_insertion_point(field_get:Attribute.text)
  return text_.GetNoArena();
}
inline void Attribute::set_text(const std::string& value) {
  
  text_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Attribute.text)
}
inline void Attribute::set_text(std::string&& value) {
  
  text_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Attribute.text)
}
inline void Attribute::set_text(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  text_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Attribute.text)
}
inline void Attribute::set_text(const char* value, size_t size) {
  
  text_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Attribute.text)
}
inline std::string* Attribute::mutable_text() {
  
  // @@protoc_insertion_point(field_mutable:Attribute.text)
  return text_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Attribute::release_text() {
  // @@protoc_insertion_point(field_release:Attribute.text)
  
  return text_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Attribute::set_allocated_text(std::string* text) {
  if (text != nullptr) {
    
  } else {
    
  }
  text_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), text);
  // @@protoc_insertion_point(field_set_allocated:Attribute.text)
}

// bytes pickle = 7;
inline void Attribute::clear_pickle() {
  pickle_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Attribute::pickle() const {
  // @@protoc_insertion_point(field_get:Attribute.pickle)
  return pickle_.GetNoArena();
}
inline void Attribute::set_pickle(const std::string& value) {
  
  pickle_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Attribute.pickle)
}
inline void Attribute::set_pickle(std::string&& value) {
  
  pickle_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Attribute.pickle)
}
inline void Attribute::set_pickle(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  pickle_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Attribute.pickle)
}
inline void Attribute::set_pickle(const void* value, size_t size) {
  
  pickle_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Attribute.pickle)
}
inline std::string* Attribute::mutable_pickle() {
  
  // @@protoc_insertion_point(field_mutable:Attribute.pickle)
  return pickle_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Attribute::release_pickle() {
  // @@protoc_insertion_point(field_release:Attribute.pickle)
  
  return pickle_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Attribute::set_allocated_pickle(std::string* pickle) {
  if (pickle != nullptr) {
    
  } else {
    
  }
  pickle_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), pickle);
  // @@protoc_insertion_point(field_set_allocated:Attribute.pickle)
}

// bytes json = 8;
inline void Attribute::clear_json() {
  json_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Attribute::json() const {
  // @@protoc_insertion_point(field_get:Attribute.json)
  return json_.GetNoArena();
}
inline void Attribute::set_json(const std::string& value) {
  
  json_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Attribute.json)
}
inline void Attribute::set_json(std::string&& value) {
  
  json_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Attribute.json)
}
inline void Attribute::set_json(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  json_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Attribute.json)
}
inline void Attribute::set_json(const void* value, size_t size) {
  
  json_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Attribute.json)
}
inline std::string* Attribute::mutable_json() {
  
  // @@protoc_insertion_point(field_mutable:Attribute.json)
  return json_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Attribute::release_json() {
  // @@protoc_insertion_point(field_release:Attribute.json)
  
  return json_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Attribute::set_allocated_json(std::string* json) {
  if (json != nullptr) {
    
  } else {
    
  }
  json_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), json);
  // @@protoc_insertion_point(field_set_allocated:Attribute.json)
}

// .Matrix matrix = 9;
inline bool Attribute::has_matrix() const {
  return this != internal_default_instance() && matrix_ != nullptr;
}
inline const ::Matrix& Attribute::matrix() const {
  const ::Matrix* p = matrix_;
  // @@protoc_insertion_point(field_get:Attribute.matrix)
  return p != nullptr ? *p : *reinterpret_cast<const ::Matrix*>(
      &::_Matrix_default_instance_);
}
inline ::Matrix* Attribute::release_matrix() {
  // @@protoc_insertion_point(field_release:Attribute.matrix)
  
  ::Matrix* temp = matrix_;
  matrix_ = nullptr;
  return temp;
}
inline ::Matrix* Attribute::mutable_matrix() {
  
  if (matrix_ == nullptr) {
    auto* p = CreateMaybeMessage<::Matrix>(GetArenaNoVirtual());
    matrix_ = p;
  }
  // @@protoc_insertion_point(field_mutable:Attribute.matrix)
  return matrix_;
}
inline void Attribute::set_allocated_matrix(::Matrix* matrix) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(matrix_);
  }
  if (matrix) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      matrix = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, matrix, submessage_arena);
    }
    
  } else {
    
  }
  matrix_ = matrix;
  // @@protoc_insertion_point(field_set_allocated:Attribute.matrix)
}

// .Vector vector = 10;
inline bool Attribute::has_vector() const {
  return this != internal_default_instance() && vector_ != nullptr;
}
inline const ::Vector& Attribute::vector() const {
  const ::Vector* p = vector_;
  // @@protoc_insertion_point(field_get:Attribute.vector)
  return p != nullptr ? *p : *reinterpret_cast<const ::Vector*>(
      &::_Vector_default_instance_);
}
inline ::Vector* Attribute::release_vector() {
  // @@protoc_insertion_point(field_release:Attribute.vector)
  
  ::Vector* temp = vector_;
  vector_ = nullptr;
  return temp;
}
inline ::Vector* Attribute::mutable_vector() {
  
  if (vector_ == nullptr) {
    auto* p = CreateMaybeMessage<::Vector>(GetArenaNoVirtual());
    vector_ = p;
  }
  // @@protoc_insertion_point(field_mutable:Attribute.vector)
  return vector_;
}
inline void Attribute::set_allocated_vector(::Vector* vector) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(vector_);
  }
  if (vector) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      vector = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, vector, submessage_arena);
    }
    
  } else {
    
  }
  vector_ = vector;
  // @@protoc_insertion_point(field_set_allocated:Attribute.vector)
}

// .Image image = 11;
inline bool Attribute::has_image() const {
  return this != internal_default_instance() && image_ != nullptr;
}
inline const ::Image& Attribute::image() const {
  const ::Image* p = image_;
  // @@protoc_insertion_point(field_get:Attribute.image)
  return p != nullptr ? *p : *reinterpret_cast<const ::Image*>(
      &::_Image_default_instance_);
}
inline ::Image* Attribute::release_image() {
  // @@protoc_insertion_point(field_release:Attribute.image)
  
  ::Image* temp = image_;
  image_ = nullptr;
  return temp;
}
inline ::Image* Attribute::mutable_image() {
  
  if (image_ == nullptr) {
    auto* p = CreateMaybeMessage<::Image>(GetArenaNoVirtual());
    image_ = p;
  }
  // @@protoc_insertion_point(field_mutable:Attribute.image)
  return image_;
}
inline void Attribute::set_allocated_image(::Image* image) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(image_);
  }
  if (image) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      image = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, image, submessage_arena);
    }
    
  } else {
    
  }
  image_ = image;
  // @@protoc_insertion_point(field_set_allocated:Attribute.image)
}

// .Point2D point = 12;
inline bool Attribute::has_point() const {
  return this != internal_default_instance() && point_ != nullptr;
}
inline const ::Point2D& Attribute::point() const {
  const ::Point2D* p = point_;
  // @@protoc_insertion_point(field_get:Attribute.point)
  return p != nullptr ? *p : *reinterpret_cast<const ::Point2D*>(
      &::_Point2D_default_instance_);
}
inline ::Point2D* Attribute::release_point() {
  // @@protoc_insertion_point(field_release:Attribute.point)
  
  ::Point2D* temp = point_;
  point_ = nullptr;
  return temp;
}
inline ::Point2D* Attribute::mutable_point() {
  
  if (point_ == nullptr) {
    auto* p = CreateMaybeMessage<::Point2D>(GetArenaNoVirtual());
    point_ = p;
  }
  // @@protoc_insertion_point(field_mutable:Attribute.point)
  return point_;
}
inline void Attribute::set_allocated_point(::Point2D* point) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(point_);
  }
  if (point) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      point = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, point, submessage_arena);
    }
    
  } else {
    
  }
  point_ = point;
  // @@protoc_insertion_point(field_set_allocated:Attribute.point)
}

// .Rect rect = 13;
inline bool Attribute::has_rect() const {
  return this != internal_default_instance() && rect_ != nullptr;
}
inline const ::Rect& Attribute::rect() const {
  const ::Rect* p = rect_;
  // @@protoc_insertion_point(field_get:Attribute.rect)
  return p != nullptr ? *p : *reinterpret_cast<const ::Rect*>(
      &::_Rect_default_instance_);
}
inline ::Rect* Attribute::release_rect() {
  // @@protoc_insertion_point(field_release:Attribute.rect)
  
  ::Rect* temp = rect_;
  rect_ = nullptr;
  return temp;
}
inline ::Rect* Attribute::mutable_rect() {
  
  if (rect_ == nullptr) {
    auto* p = CreateMaybeMessage<::Rect>(GetArenaNoVirtual());
    rect_ = p;
  }
  // @@protoc_insertion_point(field_mutable:Attribute.rect)
  return rect_;
}
inline void Attribute::set_allocated_rect(::Rect* rect) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(rect_);
  }
  if (rect) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      rect = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, rect, submessage_arena);
    }
    
  } else {
    
  }
  rect_ = rect;
  // @@protoc_insertion_point(field_set_allocated:Attribute.rect)
}

// bytes xml = 14;
inline void Attribute::clear_xml() {
  xml_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Attribute::xml() const {
  // @@protoc_insertion_point(field_get:Attribute.xml)
  return xml_.GetNoArena();
}
inline void Attribute::set_xml(const std::string& value) {
  
  xml_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Attribute.xml)
}
inline void Attribute::set_xml(std::string&& value) {
  
  xml_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Attribute.xml)
}
inline void Attribute::set_xml(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  xml_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Attribute.xml)
}
inline void Attribute::set_xml(const void* value, size_t size) {
  
  xml_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Attribute.xml)
}
inline std::string* Attribute::mutable_xml() {
  
  // @@protoc_insertion_point(field_mutable:Attribute.xml)
  return xml_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Attribute::release_xml() {
  // @@protoc_insertion_point(field_release:Attribute.xml)
  
  return xml_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Attribute::set_allocated_xml(std::string* xml) {
  if (xml != nullptr) {
    
  } else {
    
  }
  xml_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), xml);
  // @@protoc_insertion_point(field_set_allocated:Attribute.xml)
}

// -------------------------------------------------------------------

// ErrorMessage

// int32 error_code = 3;
inline void ErrorMessage::clear_error_code() {
  error_code_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ErrorMessage::error_code() const {
  // @@protoc_insertion_point(field_get:ErrorMessage.error_code)
  return error_code_;
}
inline void ErrorMessage::set_error_code(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  error_code_ = value;
  // @@protoc_insertion_point(field_set:ErrorMessage.error_code)
}

// string error_message = 4;
inline void ErrorMessage::clear_error_message() {
  error_message_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& ErrorMessage::error_message() const {
  // @@protoc_insertion_point(field_get:ErrorMessage.error_message)
  return error_message_.GetNoArena();
}
inline void ErrorMessage::set_error_message(const std::string& value) {
  
  error_message_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ErrorMessage.error_message)
}
inline void ErrorMessage::set_error_message(std::string&& value) {
  
  error_message_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ErrorMessage.error_message)
}
inline void ErrorMessage::set_error_message(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  error_message_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ErrorMessage.error_message)
}
inline void ErrorMessage::set_error_message(const char* value, size_t size) {
  
  error_message_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ErrorMessage.error_message)
}
inline std::string* ErrorMessage::mutable_error_message() {
  
  // @@protoc_insertion_point(field_mutable:ErrorMessage.error_message)
  return error_message_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ErrorMessage::release_error_message() {
  // @@protoc_insertion_point(field_release:ErrorMessage.error_message)
  
  return error_message_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ErrorMessage::set_allocated_error_message(std::string* error_message) {
  if (error_message != nullptr) {
    
  } else {
    
  }
  error_message_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), error_message);
  // @@protoc_insertion_point(field_set_allocated:ErrorMessage.error_message)
}

// -------------------------------------------------------------------

// Detection

// float score = 1;
inline void Detection::clear_score() {
  score_ = 0;
}
inline float Detection::score() const {
  // @@protoc_insertion_point(field_get:Detection.score)
  return score_;
}
inline void Detection::set_score(float value) {
  
  score_ = value;
  // @@protoc_insertion_point(field_set:Detection.score)
}

// .Rect location = 2;
inline bool Detection::has_location() const {
  return this != internal_default_instance() && location_ != nullptr;
}
inline const ::Rect& Detection::location() const {
  const ::Rect* p = location_;
  // @@protoc_insertion_point(field_get:Detection.location)
  return p != nullptr ? *p : *reinterpret_cast<const ::Rect*>(
      &::_Rect_default_instance_);
}
inline ::Rect* Detection::release_location() {
  // @@protoc_insertion_point(field_release:Detection.location)
  
  ::Rect* temp = location_;
  location_ = nullptr;
  return temp;
}
inline ::Rect* Detection::mutable_location() {
  
  if (location_ == nullptr) {
    auto* p = CreateMaybeMessage<::Rect>(GetArenaNoVirtual());
    location_ = p;
  }
  // @@protoc_insertion_point(field_mutable:Detection.location)
  return location_;
}
inline void Detection::set_allocated_location(::Rect* location) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(location_);
  }
  if (location) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      location = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, location, submessage_arena);
    }
    
  } else {
    
  }
  location_ = location;
  // @@protoc_insertion_point(field_set_allocated:Detection.location)
}

// int32 detection_id = 3;
inline void Detection::clear_detection_id() {
  detection_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Detection::detection_id() const {
  // @@protoc_insertion_point(field_get:Detection.detection_id)
  return detection_id_;
}
inline void Detection::set_detection_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  detection_id_ = value;
  // @@protoc_insertion_point(field_set:Detection.detection_id)
}

// string detection_class = 4;
inline void Detection::clear_detection_class() {
  detection_class_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Detection::detection_class() const {
  // @@protoc_insertion_point(field_get:Detection.detection_class)
  return detection_class_.GetNoArena();
}
inline void Detection::set_detection_class(const std::string& value) {
  
  detection_class_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Detection.detection_class)
}
inline void Detection::set_detection_class(std::string&& value) {
  
  detection_class_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Detection.detection_class)
}
inline void Detection::set_detection_class(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  detection_class_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Detection.detection_class)
}
inline void Detection::set_detection_class(const char* value, size_t size) {
  
  detection_class_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Detection.detection_class)
}
inline std::string* Detection::mutable_detection_class() {
  
  // @@protoc_insertion_point(field_mutable:Detection.detection_class)
  return detection_class_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Detection::release_detection_class() {
  // @@protoc_insertion_point(field_release:Detection.detection_class)
  
  return detection_class_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Detection::set_allocated_detection_class(std::string* detection_class) {
  if (detection_class != nullptr) {
    
  } else {
    
  }
  detection_class_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), detection_class);
  // @@protoc_insertion_point(field_set_allocated:Detection.detection_class)
}

// repeated .Attribute attributes = 5;
inline int Detection::attributes_size() const {
  return attributes_.size();
}
inline void Detection::clear_attributes() {
  attributes_.Clear();
}
inline ::Attribute* Detection::mutable_attributes(int index) {
  // @@protoc_insertion_point(field_mutable:Detection.attributes)
  return attributes_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Attribute >*
Detection::mutable_attributes() {
  // @@protoc_insertion_point(field_mutable_list:Detection.attributes)
  return &attributes_;
}
inline const ::Attribute& Detection::attributes(int index) const {
  // @@protoc_insertion_point(field_get:Detection.attributes)
  return attributes_.Get(index);
}
inline ::Attribute* Detection::add_attributes() {
  // @@protoc_insertion_point(field_add:Detection.attributes)
  return attributes_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Attribute >&
Detection::attributes() const {
  // @@protoc_insertion_point(field_list:Detection.attributes)
  return attributes_;
}

// -------------------------------------------------------------------

// Landmark

// string landmark_id = 1;
inline void Landmark::clear_landmark_id() {
  landmark_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Landmark::landmark_id() const {
  // @@protoc_insertion_point(field_get:Landmark.landmark_id)
  return landmark_id_.GetNoArena();
}
inline void Landmark::set_landmark_id(const std::string& value) {
  
  landmark_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Landmark.landmark_id)
}
inline void Landmark::set_landmark_id(std::string&& value) {
  
  landmark_id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Landmark.landmark_id)
}
inline void Landmark::set_landmark_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  landmark_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Landmark.landmark_id)
}
inline void Landmark::set_landmark_id(const char* value, size_t size) {
  
  landmark_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Landmark.landmark_id)
}
inline std::string* Landmark::mutable_landmark_id() {
  
  // @@protoc_insertion_point(field_mutable:Landmark.landmark_id)
  return landmark_id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Landmark::release_landmark_id() {
  // @@protoc_insertion_point(field_release:Landmark.landmark_id)
  
  return landmark_id_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Landmark::set_allocated_landmark_id(std::string* landmark_id) {
  if (landmark_id != nullptr) {
    
  } else {
    
  }
  landmark_id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), landmark_id);
  // @@protoc_insertion_point(field_set_allocated:Landmark.landmark_id)
}

// .Point2D location = 2;
inline bool Landmark::has_location() const {
  return this != internal_default_instance() && location_ != nullptr;
}
inline const ::Point2D& Landmark::location() const {
  const ::Point2D* p = location_;
  // @@protoc_insertion_point(field_get:Landmark.location)
  return p != nullptr ? *p : *reinterpret_cast<const ::Point2D*>(
      &::_Point2D_default_instance_);
}
inline ::Point2D* Landmark::release_location() {
  // @@protoc_insertion_point(field_release:Landmark.location)
  
  ::Point2D* temp = location_;
  location_ = nullptr;
  return temp;
}
inline ::Point2D* Landmark::mutable_location() {
  
  if (location_ == nullptr) {
    auto* p = CreateMaybeMessage<::Point2D>(GetArenaNoVirtual());
    location_ = p;
  }
  // @@protoc_insertion_point(field_mutable:Landmark.location)
  return location_;
}
inline void Landmark::set_allocated_location(::Point2D* location) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(location_);
  }
  if (location) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      location = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, location, submessage_arena);
    }
    
  } else {
    
  }
  location_ = location;
  // @@protoc_insertion_point(field_set_allocated:Landmark.location)
}

// -------------------------------------------------------------------

// DetectionOptions

// string algorithm_id = 1;
inline void DetectionOptions::clear_algorithm_id() {
  algorithm_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& DetectionOptions::algorithm_id() const {
  // @@protoc_insertion_point(field_get:DetectionOptions.algorithm_id)
  return algorithm_id_.GetNoArena();
}
inline void DetectionOptions::set_algorithm_id(const std::string& value) {
  
  algorithm_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:DetectionOptions.algorithm_id)
}
inline void DetectionOptions::set_algorithm_id(std::string&& value) {
  
  algorithm_id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:DetectionOptions.algorithm_id)
}
inline void DetectionOptions::set_algorithm_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  algorithm_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:DetectionOptions.algorithm_id)
}
inline void DetectionOptions::set_algorithm_id(const char* value, size_t size) {
  
  algorithm_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:DetectionOptions.algorithm_id)
}
inline std::string* DetectionOptions::mutable_algorithm_id() {
  
  // @@protoc_insertion_point(field_mutable:DetectionOptions.algorithm_id)
  return algorithm_id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* DetectionOptions::release_algorithm_id() {
  // @@protoc_insertion_point(field_release:DetectionOptions.algorithm_id)
  
  return algorithm_id_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void DetectionOptions::set_allocated_algorithm_id(std::string* algorithm_id) {
  if (algorithm_id != nullptr) {
    
  } else {
    
  }
  algorithm_id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), algorithm_id);
  // @@protoc_insertion_point(field_set_allocated:DetectionOptions.algorithm_id)
}

// bool best = 2;
inline void DetectionOptions::clear_best() {
  best_ = false;
}
inline bool DetectionOptions::best() const {
  // @@protoc_insertion_point(field_get:DetectionOptions.best)
  return best_;
}
inline void DetectionOptions::set_best(bool value) {
  
  best_ = value;
  // @@protoc_insertion_point(field_set:DetectionOptions.best)
}

// float threshold = 3;
inline void DetectionOptions::clear_threshold() {
  threshold_ = 0;
}
inline float DetectionOptions::threshold() const {
  // @@protoc_insertion_point(field_get:DetectionOptions.threshold)
  return threshold_;
}
inline void DetectionOptions::set_threshold(float value) {
  
  threshold_ = value;
  // @@protoc_insertion_point(field_set:DetectionOptions.threshold)
}

// int32 scale_levels = 4;
inline void DetectionOptions::clear_scale_levels() {
  scale_levels_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 DetectionOptions::scale_levels() const {
  // @@protoc_insertion_point(field_get:DetectionOptions.scale_levels)
  return scale_levels_;
}
inline void DetectionOptions::set_scale_levels(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  scale_levels_ = value;
  // @@protoc_insertion_point(field_set:DetectionOptions.scale_levels)
}

// int32 scan_levels = 5;
inline void DetectionOptions::clear_scan_levels() {
  scan_levels_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 DetectionOptions::scan_levels() const {
  // @@protoc_insertion_point(field_get:DetectionOptions.scan_levels)
  return scan_levels_;
}
inline void DetectionOptions::set_scan_levels(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  scan_levels_ = value;
  // @@protoc_insertion_point(field_set:DetectionOptions.scan_levels)
}

// float scan_overlap = 6;
inline void DetectionOptions::clear_scan_overlap() {
  scan_overlap_ = 0;
}
inline float DetectionOptions::scan_overlap() const {
  // @@protoc_insertion_point(field_get:DetectionOptions.scan_overlap)
  return scan_overlap_;
}
inline void DetectionOptions::set_scan_overlap(float value) {
  
  scan_overlap_ = value;
  // @@protoc_insertion_point(field_set:DetectionOptions.scan_overlap)
}

// int32 min_size = 7;
inline void DetectionOptions::clear_min_size() {
  min_size_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 DetectionOptions::min_size() const {
  // @@protoc_insertion_point(field_get:DetectionOptions.min_size)
  return min_size_;
}
inline void DetectionOptions::set_min_size(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  min_size_ = value;
  // @@protoc_insertion_point(field_set:DetectionOptions.min_size)
}

// bool save_request = 9;
inline void DetectionOptions::clear_save_request() {
  save_request_ = false;
}
inline bool DetectionOptions::save_request() const {
  // @@protoc_insertion_point(field_get:DetectionOptions.save_request)
  return save_request_;
}
inline void DetectionOptions::set_save_request(bool value) {
  
  save_request_ = value;
  // @@protoc_insertion_point(field_set:DetectionOptions.save_request)
}

// bool debug = 10;
inline void DetectionOptions::clear_debug() {
  debug_ = false;
}
inline bool DetectionOptions::debug() const {
  // @@protoc_insertion_point(field_get:DetectionOptions.debug)
  return debug_;
}
inline void DetectionOptions::set_debug(bool value) {
  
  debug_ = value;
  // @@protoc_insertion_point(field_set:DetectionOptions.debug)
}

// repeated .Attribute attributes = 8;
inline int DetectionOptions::attributes_size() const {
  return attributes_.size();
}
inline void DetectionOptions::clear_attributes() {
  attributes_.Clear();
}
inline ::Attribute* DetectionOptions::mutable_attributes(int index) {
  // @@protoc_insertion_point(field_mutable:DetectionOptions.attributes)
  return attributes_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Attribute >*
DetectionOptions::mutable_attributes() {
  // @@protoc_insertion_point(field_mutable_list:DetectionOptions.attributes)
  return &attributes_;
}
inline const ::Attribute& DetectionOptions::attributes(int index) const {
  // @@protoc_insertion_point(field_get:DetectionOptions.attributes)
  return attributes_.Get(index);
}
inline ::Attribute* DetectionOptions::add_attributes() {
  // @@protoc_insertion_point(field_add:DetectionOptions.attributes)
  return attributes_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Attribute >&
DetectionOptions::attributes() const {
  // @@protoc_insertion_point(field_list:DetectionOptions.attributes)
  return attributes_;
}

// -------------------------------------------------------------------

// ExtractOptions

// string algorithm_id = 1;
inline void ExtractOptions::clear_algorithm_id() {
  algorithm_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& ExtractOptions::algorithm_id() const {
  // @@protoc_insertion_point(field_get:ExtractOptions.algorithm_id)
  return algorithm_id_.GetNoArena();
}
inline void ExtractOptions::set_algorithm_id(const std::string& value) {
  
  algorithm_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ExtractOptions.algorithm_id)
}
inline void ExtractOptions::set_algorithm_id(std::string&& value) {
  
  algorithm_id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ExtractOptions.algorithm_id)
}
inline void ExtractOptions::set_algorithm_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  algorithm_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ExtractOptions.algorithm_id)
}
inline void ExtractOptions::set_algorithm_id(const char* value, size_t size) {
  
  algorithm_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ExtractOptions.algorithm_id)
}
inline std::string* ExtractOptions::mutable_algorithm_id() {
  
  // @@protoc_insertion_point(field_mutable:ExtractOptions.algorithm_id)
  return algorithm_id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ExtractOptions::release_algorithm_id() {
  // @@protoc_insertion_point(field_release:ExtractOptions.algorithm_id)
  
  return algorithm_id_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ExtractOptions::set_allocated_algorithm_id(std::string* algorithm_id) {
  if (algorithm_id != nullptr) {
    
  } else {
    
  }
  algorithm_id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), algorithm_id);
  // @@protoc_insertion_point(field_set_allocated:ExtractOptions.algorithm_id)
}

// bool save_request = 2;
inline void ExtractOptions::clear_save_request() {
  save_request_ = false;
}
inline bool ExtractOptions::save_request() const {
  // @@protoc_insertion_point(field_get:ExtractOptions.save_request)
  return save_request_;
}
inline void ExtractOptions::set_save_request(bool value) {
  
  save_request_ = value;
  // @@protoc_insertion_point(field_set:ExtractOptions.save_request)
}

// bool debug = 3;
inline void ExtractOptions::clear_debug() {
  debug_ = false;
}
inline bool ExtractOptions::debug() const {
  // @@protoc_insertion_point(field_get:ExtractOptions.debug)
  return debug_;
}
inline void ExtractOptions::set_debug(bool value) {
  
  debug_ = value;
  // @@protoc_insertion_point(field_set:ExtractOptions.debug)
}

// repeated .Attribute attributes = 8;
inline int ExtractOptions::attributes_size() const {
  return attributes_.size();
}
inline void ExtractOptions::clear_attributes() {
  attributes_.Clear();
}
inline ::Attribute* ExtractOptions::mutable_attributes(int index) {
  // @@protoc_insertion_point(field_mutable:ExtractOptions.attributes)
  return attributes_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Attribute >*
ExtractOptions::mutable_attributes() {
  // @@protoc_insertion_point(field_mutable_list:ExtractOptions.attributes)
  return &attributes_;
}
inline const ::Attribute& ExtractOptions::attributes(int index) const {
  // @@protoc_insertion_point(field_get:ExtractOptions.attributes)
  return attributes_.Get(index);
}
inline ::Attribute* ExtractOptions::add_attributes() {
  // @@protoc_insertion_point(field_add:ExtractOptions.attributes)
  return attributes_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Attribute >&
ExtractOptions::attributes() const {
  // @@protoc_insertion_point(field_list:ExtractOptions.attributes)
  return attributes_;
}

// -------------------------------------------------------------------

// EnrollOptions

// bool save_request = 2;
inline void EnrollOptions::clear_save_request() {
  save_request_ = false;
}
inline bool EnrollOptions::save_request() const {
  // @@protoc_insertion_point(field_get:EnrollOptions.save_request)
  return save_request_;
}
inline void EnrollOptions::set_save_request(bool value) {
  
  save_request_ = value;
  // @@protoc_insertion_point(field_set:EnrollOptions.save_request)
}

// bool debug = 3;
inline void EnrollOptions::clear_debug() {
  debug_ = false;
}
inline bool EnrollOptions::debug() const {
  // @@protoc_insertion_point(field_get:EnrollOptions.debug)
  return debug_;
}
inline void EnrollOptions::set_debug(bool value) {
  
  debug_ = value;
  // @@protoc_insertion_point(field_set:EnrollOptions.debug)
}

// repeated .Attribute attributes = 8;
inline int EnrollOptions::attributes_size() const {
  return attributes_.size();
}
inline void EnrollOptions::clear_attributes() {
  attributes_.Clear();
}
inline ::Attribute* EnrollOptions::mutable_attributes(int index) {
  // @@protoc_insertion_point(field_mutable:EnrollOptions.attributes)
  return attributes_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Attribute >*
EnrollOptions::mutable_attributes() {
  // @@protoc_insertion_point(field_mutable_list:EnrollOptions.attributes)
  return &attributes_;
}
inline const ::Attribute& EnrollOptions::attributes(int index) const {
  // @@protoc_insertion_point(field_get:EnrollOptions.attributes)
  return attributes_.Get(index);
}
inline ::Attribute* EnrollOptions::add_attributes() {
  // @@protoc_insertion_point(field_add:EnrollOptions.attributes)
  return attributes_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Attribute >&
EnrollOptions::attributes() const {
  // @@protoc_insertion_point(field_list:EnrollOptions.attributes)
  return attributes_;
}

// -------------------------------------------------------------------

// DetectionList

// repeated .Detection detections = 1;
inline int DetectionList::detections_size() const {
  return detections_.size();
}
inline void DetectionList::clear_detections() {
  detections_.Clear();
}
inline ::Detection* DetectionList::mutable_detections(int index) {
  // @@protoc_insertion_point(field_mutable:DetectionList.detections)
  return detections_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Detection >*
DetectionList::mutable_detections() {
  // @@protoc_insertion_point(field_mutable_list:DetectionList.detections)
  return &detections_;
}
inline const ::Detection& DetectionList::detections(int index) const {
  // @@protoc_insertion_point(field_get:DetectionList.detections)
  return detections_.Get(index);
}
inline ::Detection* DetectionList::add_detections() {
  // @@protoc_insertion_point(field_add:DetectionList.detections)
  return detections_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Detection >&
DetectionList::detections() const {
  // @@protoc_insertion_point(field_list:DetectionList.detections)
  return detections_;
}

// float detection_time = 2;
inline void DetectionList::clear_detection_time() {
  detection_time_ = 0;
}
inline float DetectionList::detection_time() const {
  // @@protoc_insertion_point(field_get:DetectionList.detection_time)
  return detection_time_;
}
inline void DetectionList::set_detection_time(float value) {
  
  detection_time_ = value;
  // @@protoc_insertion_point(field_set:DetectionList.detection_time)
}

// int32 image_width = 3;
inline void DetectionList::clear_image_width() {
  image_width_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 DetectionList::image_width() const {
  // @@protoc_insertion_point(field_get:DetectionList.image_width)
  return image_width_;
}
inline void DetectionList::set_image_width(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  image_width_ = value;
  // @@protoc_insertion_point(field_set:DetectionList.image_width)
}

// int32 image_height = 4;
inline void DetectionList::clear_image_height() {
  image_height_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 DetectionList::image_height() const {
  // @@protoc_insertion_point(field_get:DetectionList.image_height)
  return image_height_;
}
inline void DetectionList::set_image_height(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  image_height_ = value;
  // @@protoc_insertion_point(field_set:DetectionList.image_height)
}

// int32 detection_count = 5;
inline void DetectionList::clear_detection_count() {
  detection_count_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 DetectionList::detection_count() const {
  // @@protoc_insertion_point(field_get:DetectionList.detection_count)
  return detection_count_;
}
inline void DetectionList::set_detection_count(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  detection_count_ = value;
  // @@protoc_insertion_point(field_set:DetectionList.detection_count)
}

// .DetectionOptions options = 6;
inline bool DetectionList::has_options() const {
  return this != internal_default_instance() && options_ != nullptr;
}
inline void DetectionList::clear_options() {
  if (GetArenaNoVirtual() == nullptr && options_ != nullptr) {
    delete options_;
  }
  options_ = nullptr;
}
inline const ::DetectionOptions& DetectionList::options() const {
  const ::DetectionOptions* p = options_;
  // @@protoc_insertion_point(field_get:DetectionList.options)
  return p != nullptr ? *p : *reinterpret_cast<const ::DetectionOptions*>(
      &::_DetectionOptions_default_instance_);
}
inline ::DetectionOptions* DetectionList::release_options() {
  // @@protoc_insertion_point(field_release:DetectionList.options)
  
  ::DetectionOptions* temp = options_;
  options_ = nullptr;
  return temp;
}
inline ::DetectionOptions* DetectionList::mutable_options() {
  
  if (options_ == nullptr) {
    auto* p = CreateMaybeMessage<::DetectionOptions>(GetArenaNoVirtual());
    options_ = p;
  }
  // @@protoc_insertion_point(field_mutable:DetectionList.options)
  return options_;
}
inline void DetectionList::set_allocated_options(::DetectionOptions* options) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete options_;
  }
  if (options) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      options = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, options, submessage_arena);
    }
    
  } else {
    
  }
  options_ = options;
  // @@protoc_insertion_point(field_set_allocated:DetectionList.options)
}

// -------------------------------------------------------------------

// MatchList

// repeated .MatchInfo match_list = 1;
inline int MatchList::match_list_size() const {
  return match_list_.size();
}
inline void MatchList::clear_match_list() {
  match_list_.Clear();
}
inline ::MatchInfo* MatchList::mutable_match_list(int index) {
  // @@protoc_insertion_point(field_mutable:MatchList.match_list)
  return match_list_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::MatchInfo >*
MatchList::mutable_match_list() {
  // @@protoc_insertion_point(field_mutable_list:MatchList.match_list)
  return &match_list_;
}
inline const ::MatchInfo& MatchList::match_list(int index) const {
  // @@protoc_insertion_point(field_get:MatchList.match_list)
  return match_list_.Get(index);
}
inline ::MatchInfo* MatchList::add_match_list() {
  // @@protoc_insertion_point(field_add:MatchList.match_list)
  return match_list_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::MatchInfo >&
MatchList::match_list() const {
  // @@protoc_insertion_point(field_list:MatchList.match_list)
  return match_list_;
}

// -------------------------------------------------------------------

// MatchInfo

// float score = 1;
inline void MatchInfo::clear_score() {
  score_ = 0;
}
inline float MatchInfo::score() const {
  // @@protoc_insertion_point(field_get:MatchInfo.score)
  return score_;
}
inline void MatchInfo::set_score(float value) {
  
  score_ = value;
  // @@protoc_insertion_point(field_set:MatchInfo.score)
}

// string image_id = 2;
inline void MatchInfo::clear_image_id() {
  image_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& MatchInfo::image_id() const {
  // @@protoc_insertion_point(field_get:MatchInfo.image_id)
  return image_id_.GetNoArena();
}
inline void MatchInfo::set_image_id(const std::string& value) {
  
  image_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:MatchInfo.image_id)
}
inline void MatchInfo::set_image_id(std::string&& value) {
  
  image_id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:MatchInfo.image_id)
}
inline void MatchInfo::set_image_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  image_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:MatchInfo.image_id)
}
inline void MatchInfo::set_image_id(const char* value, size_t size) {
  
  image_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:MatchInfo.image_id)
}
inline std::string* MatchInfo::mutable_image_id() {
  
  // @@protoc_insertion_point(field_mutable:MatchInfo.image_id)
  return image_id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* MatchInfo::release_image_id() {
  // @@protoc_insertion_point(field_release:MatchInfo.image_id)
  
  return image_id_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void MatchInfo::set_allocated_image_id(std::string* image_id) {
  if (image_id != nullptr) {
    
  } else {
    
  }
  image_id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), image_id);
  // @@protoc_insertion_point(field_set_allocated:MatchInfo.image_id)
}

// string detection_id = 3;
inline void MatchInfo::clear_detection_id() {
  detection_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& MatchInfo::detection_id() const {
  // @@protoc_insertion_point(field_get:MatchInfo.detection_id)
  return detection_id_.GetNoArena();
}
inline void MatchInfo::set_detection_id(const std::string& value) {
  
  detection_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:MatchInfo.detection_id)
}
inline void MatchInfo::set_detection_id(std::string&& value) {
  
  detection_id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:MatchInfo.detection_id)
}
inline void MatchInfo::set_detection_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  detection_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:MatchInfo.detection_id)
}
inline void MatchInfo::set_detection_id(const char* value, size_t size) {
  
  detection_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:MatchInfo.detection_id)
}
inline std::string* MatchInfo::mutable_detection_id() {
  
  // @@protoc_insertion_point(field_mutable:MatchInfo.detection_id)
  return detection_id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* MatchInfo::release_detection_id() {
  // @@protoc_insertion_point(field_release:MatchInfo.detection_id)
  
  return detection_id_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void MatchInfo::set_allocated_detection_id(std::string* detection_id) {
  if (detection_id != nullptr) {
    
  } else {
    
  }
  detection_id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), detection_id);
  // @@protoc_insertion_point(field_set_allocated:MatchInfo.detection_id)
}

// string subject_id = 4;
inline void MatchInfo::clear_subject_id() {
  subject_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& MatchInfo::subject_id() const {
  // @@protoc_insertion_point(field_get:MatchInfo.subject_id)
  return subject_id_.GetNoArena();
}
inline void MatchInfo::set_subject_id(const std::string& value) {
  
  subject_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:MatchInfo.subject_id)
}
inline void MatchInfo::set_subject_id(std::string&& value) {
  
  subject_id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:MatchInfo.subject_id)
}
inline void MatchInfo::set_subject_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  subject_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:MatchInfo.subject_id)
}
inline void MatchInfo::set_subject_id(const char* value, size_t size) {
  
  subject_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:MatchInfo.subject_id)
}
inline std::string* MatchInfo::mutable_subject_id() {
  
  // @@protoc_insertion_point(field_mutable:MatchInfo.subject_id)
  return subject_id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* MatchInfo::release_subject_id() {
  // @@protoc_insertion_point(field_release:MatchInfo.subject_id)
  
  return subject_id_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void MatchInfo::set_allocated_subject_id(std::string* subject_id) {
  if (subject_id != nullptr) {
    
  } else {
    
  }
  subject_id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), subject_id);
  // @@protoc_insertion_point(field_set_allocated:MatchInfo.subject_id)
}

// string subject_name = 5;
inline void MatchInfo::clear_subject_name() {
  subject_name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& MatchInfo::subject_name() const {
  // @@protoc_insertion_point(field_get:MatchInfo.subject_name)
  return subject_name_.GetNoArena();
}
inline void MatchInfo::set_subject_name(const std::string& value) {
  
  subject_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:MatchInfo.subject_name)
}
inline void MatchInfo::set_subject_name(std::string&& value) {
  
  subject_name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:MatchInfo.subject_name)
}
inline void MatchInfo::set_subject_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  subject_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:MatchInfo.subject_name)
}
inline void MatchInfo::set_subject_name(const char* value, size_t size) {
  
  subject_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:MatchInfo.subject_name)
}
inline std::string* MatchInfo::mutable_subject_name() {
  
  // @@protoc_insertion_point(field_mutable:MatchInfo.subject_name)
  return subject_name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* MatchInfo::release_subject_name() {
  // @@protoc_insertion_point(field_release:MatchInfo.subject_name)
  
  return subject_name_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void MatchInfo::set_allocated_subject_name(std::string* subject_name) {
  if (subject_name != nullptr) {
    
  } else {
    
  }
  subject_name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), subject_name);
  // @@protoc_insertion_point(field_set_allocated:MatchInfo.subject_name)
}

// .Image face = 6;
inline bool MatchInfo::has_face() const {
  return this != internal_default_instance() && face_ != nullptr;
}
inline const ::Image& MatchInfo::face() const {
  const ::Image* p = face_;
  // @@protoc_insertion_point(field_get:MatchInfo.face)
  return p != nullptr ? *p : *reinterpret_cast<const ::Image*>(
      &::_Image_default_instance_);
}
inline ::Image* MatchInfo::release_face() {
  // @@protoc_insertion_point(field_release:MatchInfo.face)
  
  ::Image* temp = face_;
  face_ = nullptr;
  return temp;
}
inline ::Image* MatchInfo::mutable_face() {
  
  if (face_ == nullptr) {
    auto* p = CreateMaybeMessage<::Image>(GetArenaNoVirtual());
    face_ = p;
  }
  // @@protoc_insertion_point(field_mutable:MatchInfo.face)
  return face_;
}
inline void MatchInfo::set_allocated_face(::Image* face) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(face_);
  }
  if (face) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      face = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, face, submessage_arena);
    }
    
  } else {
    
  }
  face_ = face;
  // @@protoc_insertion_point(field_set_allocated:MatchInfo.face)
}

// -------------------------------------------------------------------

// TemplateInput

// .Image im = 1;
inline bool TemplateInput::has_im() const {
  return this != internal_default_instance() && im_ != nullptr;
}
inline const ::Image& TemplateInput::im() const {
  const ::Image* p = im_;
  // @@protoc_insertion_point(field_get:TemplateInput.im)
  return p != nullptr ? *p : *reinterpret_cast<const ::Image*>(
      &::_Image_default_instance_);
}
inline ::Image* TemplateInput::release_im() {
  // @@protoc_insertion_point(field_release:TemplateInput.im)
  
  ::Image* temp = im_;
  im_ = nullptr;
  return temp;
}
inline ::Image* TemplateInput::mutable_im() {
  
  if (im_ == nullptr) {
    auto* p = CreateMaybeMessage<::Image>(GetArenaNoVirtual());
    im_ = p;
  }
  // @@protoc_insertion_point(field_mutable:TemplateInput.im)
  return im_;
}
inline void TemplateInput::set_allocated_im(::Image* im) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(im_);
  }
  if (im) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      im = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, im, submessage_arena);
    }
    
  } else {
    
  }
  im_ = im;
  // @@protoc_insertion_point(field_set_allocated:TemplateInput.im)
}

// repeated .Rect detections = 2;
inline int TemplateInput::detections_size() const {
  return detections_.size();
}
inline ::Rect* TemplateInput::mutable_detections(int index) {
  // @@protoc_insertion_point(field_mutable:TemplateInput.detections)
  return detections_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Rect >*
TemplateInput::mutable_detections() {
  // @@protoc_insertion_point(field_mutable_list:TemplateInput.detections)
  return &detections_;
}
inline const ::Rect& TemplateInput::detections(int index) const {
  // @@protoc_insertion_point(field_get:TemplateInput.detections)
  return detections_.Get(index);
}
inline ::Rect* TemplateInput::add_detections() {
  // @@protoc_insertion_point(field_add:TemplateInput.detections)
  return detections_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Rect >&
TemplateInput::detections() const {
  // @@protoc_insertion_point(field_list:TemplateInput.detections)
  return detections_;
}

// -------------------------------------------------------------------

// FaceTemplate

// .Vector data = 1;
inline bool FaceTemplate::has_data() const {
  return this != internal_default_instance() && data_ != nullptr;
}
inline const ::Vector& FaceTemplate::data() const {
  const ::Vector* p = data_;
  // @@protoc_insertion_point(field_get:FaceTemplate.data)
  return p != nullptr ? *p : *reinterpret_cast<const ::Vector*>(
      &::_Vector_default_instance_);
}
inline ::Vector* FaceTemplate::release_data() {
  // @@protoc_insertion_point(field_release:FaceTemplate.data)
  
  ::Vector* temp = data_;
  data_ = nullptr;
  return temp;
}
inline ::Vector* FaceTemplate::mutable_data() {
  
  if (data_ == nullptr) {
    auto* p = CreateMaybeMessage<::Vector>(GetArenaNoVirtual());
    data_ = p;
  }
  // @@protoc_insertion_point(field_mutable:FaceTemplate.data)
  return data_;
}
inline void FaceTemplate::set_allocated_data(::Vector* data) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(data_);
  }
  if (data) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      data = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, data, submessage_arena);
    }
    
  } else {
    
  }
  data_ = data;
  // @@protoc_insertion_point(field_set_allocated:FaceTemplate.data)
}

// bytes buffer = 2;
inline void FaceTemplate::clear_buffer() {
  buffer_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& FaceTemplate::buffer() const {
  // @@protoc_insertion_point(field_get:FaceTemplate.buffer)
  return buffer_.GetNoArena();
}
inline void FaceTemplate::set_buffer(const std::string& value) {
  
  buffer_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:FaceTemplate.buffer)
}
inline void FaceTemplate::set_buffer(std::string&& value) {
  
  buffer_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:FaceTemplate.buffer)
}
inline void FaceTemplate::set_buffer(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  buffer_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:FaceTemplate.buffer)
}
inline void FaceTemplate::set_buffer(const void* value, size_t size) {
  
  buffer_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:FaceTemplate.buffer)
}
inline std::string* FaceTemplate::mutable_buffer() {
  
  // @@protoc_insertion_point(field_mutable:FaceTemplate.buffer)
  return buffer_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* FaceTemplate::release_buffer() {
  // @@protoc_insertion_point(field_release:FaceTemplate.buffer)
  
  return buffer_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void FaceTemplate::set_allocated_buffer(std::string* buffer) {
  if (buffer != nullptr) {
    
  } else {
    
  }
  buffer_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), buffer);
  // @@protoc_insertion_point(field_set_allocated:FaceTemplate.buffer)
}

// -------------------------------------------------------------------

// TemplateList

// repeated .FaceTemplate templates = 1;
inline int TemplateList::templates_size() const {
  return templates_.size();
}
inline void TemplateList::clear_templates() {
  templates_.Clear();
}
inline ::FaceTemplate* TemplateList::mutable_templates(int index) {
  // @@protoc_insertion_point(field_mutable:TemplateList.templates)
  return templates_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::FaceTemplate >*
TemplateList::mutable_templates() {
  // @@protoc_insertion_point(field_mutable_list:TemplateList.templates)
  return &templates_;
}
inline const ::FaceTemplate& TemplateList::templates(int index) const {
  // @@protoc_insertion_point(field_get:TemplateList.templates)
  return templates_.Get(index);
}
inline ::FaceTemplate* TemplateList::add_templates() {
  // @@protoc_insertion_point(field_add:TemplateList.templates)
  return templates_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::FaceTemplate >&
TemplateList::templates() const {
  // @@protoc_insertion_point(field_list:TemplateList.templates)
  return templates_;
}

// -------------------------------------------------------------------

// AccessRecord

// float datetime = 1;
inline void AccessRecord::clear_datetime() {
  datetime_ = 0;
}
inline float AccessRecord::datetime() const {
  // @@protoc_insertion_point(field_get:AccessRecord.datetime)
  return datetime_;
}
inline void AccessRecord::set_datetime(float value) {
  
  datetime_ = value;
  // @@protoc_insertion_point(field_set:AccessRecord.datetime)
}

// string notes = 2;
inline void AccessRecord::clear_notes() {
  notes_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& AccessRecord::notes() const {
  // @@protoc_insertion_point(field_get:AccessRecord.notes)
  return notes_.GetNoArena();
}
inline void AccessRecord::set_notes(const std::string& value) {
  
  notes_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:AccessRecord.notes)
}
inline void AccessRecord::set_notes(std::string&& value) {
  
  notes_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:AccessRecord.notes)
}
inline void AccessRecord::set_notes(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  notes_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:AccessRecord.notes)
}
inline void AccessRecord::set_notes(const char* value, size_t size) {
  
  notes_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:AccessRecord.notes)
}
inline std::string* AccessRecord::mutable_notes() {
  
  // @@protoc_insertion_point(field_mutable:AccessRecord.notes)
  return notes_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* AccessRecord::release_notes() {
  // @@protoc_insertion_point(field_release:AccessRecord.notes)
  
  return notes_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void AccessRecord::set_allocated_notes(std::string* notes) {
  if (notes != nullptr) {
    
  } else {
    
  }
  notes_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), notes);
  // @@protoc_insertion_point(field_set_allocated:AccessRecord.notes)
}

// string credential = 3;
inline void AccessRecord::clear_credential() {
  credential_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& AccessRecord::credential() const {
  // @@protoc_insertion_point(field_get:AccessRecord.credential)
  return credential_.GetNoArena();
}
inline void AccessRecord::set_credential(const std::string& value) {
  
  credential_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:AccessRecord.credential)
}
inline void AccessRecord::set_credential(std::string&& value) {
  
  credential_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:AccessRecord.credential)
}
inline void AccessRecord::set_credential(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  credential_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:AccessRecord.credential)
}
inline void AccessRecord::set_credential(const char* value, size_t size) {
  
  credential_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:AccessRecord.credential)
}
inline std::string* AccessRecord::mutable_credential() {
  
  // @@protoc_insertion_point(field_mutable:AccessRecord.credential)
  return credential_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* AccessRecord::release_credential() {
  // @@protoc_insertion_point(field_release:AccessRecord.credential)
  
  return credential_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void AccessRecord::set_allocated_credential(std::string* credential) {
  if (credential != nullptr) {
    
  } else {
    
  }
  credential_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), credential);
  // @@protoc_insertion_point(field_set_allocated:AccessRecord.credential)
}

// repeated .Attribute metadata = 4;
inline int AccessRecord::metadata_size() const {
  return metadata_.size();
}
inline void AccessRecord::clear_metadata() {
  metadata_.Clear();
}
inline ::Attribute* AccessRecord::mutable_metadata(int index) {
  // @@protoc_insertion_point(field_mutable:AccessRecord.metadata)
  return metadata_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Attribute >*
AccessRecord::mutable_metadata() {
  // @@protoc_insertion_point(field_mutable_list:AccessRecord.metadata)
  return &metadata_;
}
inline const ::Attribute& AccessRecord::metadata(int index) const {
  // @@protoc_insertion_point(field_get:AccessRecord.metadata)
  return metadata_.Get(index);
}
inline ::Attribute* AccessRecord::add_metadata() {
  // @@protoc_insertion_point(field_add:AccessRecord.metadata)
  return metadata_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Attribute >&
AccessRecord::metadata() const {
  // @@protoc_insertion_point(field_list:AccessRecord.metadata)
  return metadata_;
}

// -------------------------------------------------------------------

// FaceRecord

// string subject_id = 1;
inline void FaceRecord::clear_subject_id() {
  subject_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& FaceRecord::subject_id() const {
  // @@protoc_insertion_point(field_get:FaceRecord.subject_id)
  return subject_id_.GetNoArena();
}
inline void FaceRecord::set_subject_id(const std::string& value) {
  
  subject_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:FaceRecord.subject_id)
}
inline void FaceRecord::set_subject_id(std::string&& value) {
  
  subject_id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:FaceRecord.subject_id)
}
inline void FaceRecord::set_subject_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  subject_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:FaceRecord.subject_id)
}
inline void FaceRecord::set_subject_id(const char* value, size_t size) {
  
  subject_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:FaceRecord.subject_id)
}
inline std::string* FaceRecord::mutable_subject_id() {
  
  // @@protoc_insertion_point(field_mutable:FaceRecord.subject_id)
  return subject_id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* FaceRecord::release_subject_id() {
  // @@protoc_insertion_point(field_release:FaceRecord.subject_id)
  
  return subject_id_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void FaceRecord::set_allocated_subject_id(std::string* subject_id) {
  if (subject_id != nullptr) {
    
  } else {
    
  }
  subject_id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), subject_id);
  // @@protoc_insertion_point(field_set_allocated:FaceRecord.subject_id)
}

// string name = 5;
inline void FaceRecord::clear_name() {
  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& FaceRecord::name() const {
  // @@protoc_insertion_point(field_get:FaceRecord.name)
  return name_.GetNoArena();
}
inline void FaceRecord::set_name(const std::string& value) {
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:FaceRecord.name)
}
inline void FaceRecord::set_name(std::string&& value) {
  
  name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:FaceRecord.name)
}
inline void FaceRecord::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:FaceRecord.name)
}
inline void FaceRecord::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:FaceRecord.name)
}
inline std::string* FaceRecord::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:FaceRecord.name)
  return name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* FaceRecord::release_name() {
  // @@protoc_insertion_point(field_release:FaceRecord.name)
  
  return name_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void FaceRecord::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:FaceRecord.name)
}

// string source = 4;
inline void FaceRecord::clear_source() {
  source_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& FaceRecord::source() const {
  // @@protoc_insertion_point(field_get:FaceRecord.source)
  return source_.GetNoArena();
}
inline void FaceRecord::set_source(const std::string& value) {
  
  source_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:FaceRecord.source)
}
inline void FaceRecord::set_source(std::string&& value) {
  
  source_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:FaceRecord.source)
}
inline void FaceRecord::set_source(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  source_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:FaceRecord.source)
}
inline void FaceRecord::set_source(const char* value, size_t size) {
  
  source_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:FaceRecord.source)
}
inline std::string* FaceRecord::mutable_source() {
  
  // @@protoc_insertion_point(field_mutable:FaceRecord.source)
  return source_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* FaceRecord::release_source() {
  // @@protoc_insertion_point(field_release:FaceRecord.source)
  
  return source_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void FaceRecord::set_allocated_source(std::string* source) {
  if (source != nullptr) {
    
  } else {
    
  }
  source_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), source);
  // @@protoc_insertion_point(field_set_allocated:FaceRecord.source)
}

// int64 frame = 14;
inline void FaceRecord::clear_frame() {
  frame_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 FaceRecord::frame() const {
  // @@protoc_insertion_point(field_get:FaceRecord.frame)
  return frame_;
}
inline void FaceRecord::set_frame(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  frame_ = value;
  // @@protoc_insertion_point(field_set:FaceRecord.frame)
}

// string notes = 6;
inline void FaceRecord::clear_notes() {
  notes_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& FaceRecord::notes() const {
  // @@protoc_insertion_point(field_get:FaceRecord.notes)
  return notes_.GetNoArena();
}
inline void FaceRecord::set_notes(const std::string& value) {
  
  notes_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:FaceRecord.notes)
}
inline void FaceRecord::set_notes(std::string&& value) {
  
  notes_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:FaceRecord.notes)
}
inline void FaceRecord::set_notes(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  notes_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:FaceRecord.notes)
}
inline void FaceRecord::set_notes(const char* value, size_t size) {
  
  notes_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:FaceRecord.notes)
}
inline std::string* FaceRecord::mutable_notes() {
  
  // @@protoc_insertion_point(field_mutable:FaceRecord.notes)
  return notes_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* FaceRecord::release_notes() {
  // @@protoc_insertion_point(field_release:FaceRecord.notes)
  
  return notes_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void FaceRecord::set_allocated_notes(std::string* notes) {
  if (notes != nullptr) {
    
  } else {
    
  }
  notes_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), notes);
  // @@protoc_insertion_point(field_set_allocated:FaceRecord.notes)
}

// string gallery_key = 15;
inline void FaceRecord::clear_gallery_key() {
  gallery_key_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& FaceRecord::gallery_key() const {
  // @@protoc_insertion_point(field_get:FaceRecord.gallery_key)
  return gallery_key_.GetNoArena();
}
inline void FaceRecord::set_gallery_key(const std::string& value) {
  
  gallery_key_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:FaceRecord.gallery_key)
}
inline void FaceRecord::set_gallery_key(std::string&& value) {
  
  gallery_key_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:FaceRecord.gallery_key)
}
inline void FaceRecord::set_gallery_key(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  gallery_key_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:FaceRecord.gallery_key)
}
inline void FaceRecord::set_gallery_key(const char* value, size_t size) {
  
  gallery_key_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:FaceRecord.gallery_key)
}
inline std::string* FaceRecord::mutable_gallery_key() {
  
  // @@protoc_insertion_point(field_mutable:FaceRecord.gallery_key)
  return gallery_key_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* FaceRecord::release_gallery_key() {
  // @@protoc_insertion_point(field_release:FaceRecord.gallery_key)
  
  return gallery_key_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void FaceRecord::set_allocated_gallery_key(std::string* gallery_key) {
  if (gallery_key != nullptr) {
    
  } else {
    
  }
  gallery_key_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), gallery_key);
  // @@protoc_insertion_point(field_set_allocated:FaceRecord.gallery_key)
}

// float collection_date = 16;
inline void FaceRecord::clear_collection_date() {
  collection_date_ = 0;
}
inline float FaceRecord::collection_date() const {
  // @@protoc_insertion_point(field_get:FaceRecord.collection_date)
  return collection_date_;
}
inline void FaceRecord::set_collection_date(float value) {
  
  collection_date_ = value;
  // @@protoc_insertion_point(field_set:FaceRecord.collection_date)
}

// float enrollment_date = 17;
inline void FaceRecord::clear_enrollment_date() {
  enrollment_date_ = 0;
}
inline float FaceRecord::enrollment_date() const {
  // @@protoc_insertion_point(field_get:FaceRecord.enrollment_date)
  return enrollment_date_;
}
inline void FaceRecord::set_enrollment_date(float value) {
  
  enrollment_date_ = value;
  // @@protoc_insertion_point(field_set:FaceRecord.enrollment_date)
}

// repeated .Attribute metadata = 18;
inline int FaceRecord::metadata_size() const {
  return metadata_.size();
}
inline void FaceRecord::clear_metadata() {
  metadata_.Clear();
}
inline ::Attribute* FaceRecord::mutable_metadata(int index) {
  // @@protoc_insertion_point(field_mutable:FaceRecord.metadata)
  return metadata_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Attribute >*
FaceRecord::mutable_metadata() {
  // @@protoc_insertion_point(field_mutable_list:FaceRecord.metadata)
  return &metadata_;
}
inline const ::Attribute& FaceRecord::metadata(int index) const {
  // @@protoc_insertion_point(field_get:FaceRecord.metadata)
  return metadata_.Get(index);
}
inline ::Attribute* FaceRecord::add_metadata() {
  // @@protoc_insertion_point(field_add:FaceRecord.metadata)
  return metadata_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Attribute >&
FaceRecord::metadata() const {
  // @@protoc_insertion_point(field_list:FaceRecord.metadata)
  return metadata_;
}

// repeated .AccessRecord access_records = 19;
inline int FaceRecord::access_records_size() const {
  return access_records_.size();
}
inline void FaceRecord::clear_access_records() {
  access_records_.Clear();
}
inline ::AccessRecord* FaceRecord::mutable_access_records(int index) {
  // @@protoc_insertion_point(field_mutable:FaceRecord.access_records)
  return access_records_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::AccessRecord >*
FaceRecord::mutable_access_records() {
  // @@protoc_insertion_point(field_mutable_list:FaceRecord.access_records)
  return &access_records_;
}
inline const ::AccessRecord& FaceRecord::access_records(int index) const {
  // @@protoc_insertion_point(field_get:FaceRecord.access_records)
  return access_records_.Get(index);
}
inline ::AccessRecord* FaceRecord::add_access_records() {
  // @@protoc_insertion_point(field_add:FaceRecord.access_records)
  return access_records_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::AccessRecord >&
FaceRecord::access_records() const {
  // @@protoc_insertion_point(field_list:FaceRecord.access_records)
  return access_records_;
}

// .Image view = 7;
inline bool FaceRecord::has_view() const {
  return this != internal_default_instance() && view_ != nullptr;
}
inline const ::Image& FaceRecord::view() const {
  const ::Image* p = view_;
  // @@protoc_insertion_point(field_get:FaceRecord.view)
  return p != nullptr ? *p : *reinterpret_cast<const ::Image*>(
      &::_Image_default_instance_);
}
inline ::Image* FaceRecord::release_view() {
  // @@protoc_insertion_point(field_release:FaceRecord.view)
  
  ::Image* temp = view_;
  view_ = nullptr;
  return temp;
}
inline ::Image* FaceRecord::mutable_view() {
  
  if (view_ == nullptr) {
    auto* p = CreateMaybeMessage<::Image>(GetArenaNoVirtual());
    view_ = p;
  }
  // @@protoc_insertion_point(field_mutable:FaceRecord.view)
  return view_;
}
inline void FaceRecord::set_allocated_view(::Image* view) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(view_);
  }
  if (view) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      view = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, view, submessage_arena);
    }
    
  } else {
    
  }
  view_ = view;
  // @@protoc_insertion_point(field_set_allocated:FaceRecord.view)
}

// .Image aligned = 9;
inline bool FaceRecord::has_aligned() const {
  return this != internal_default_instance() && aligned_ != nullptr;
}
inline const ::Image& FaceRecord::aligned() const {
  const ::Image* p = aligned_;
  // @@protoc_insertion_point(field_get:FaceRecord.aligned)
  return p != nullptr ? *p : *reinterpret_cast<const ::Image*>(
      &::_Image_default_instance_);
}
inline ::Image* FaceRecord::release_aligned() {
  // @@protoc_insertion_point(field_release:FaceRecord.aligned)
  
  ::Image* temp = aligned_;
  aligned_ = nullptr;
  return temp;
}
inline ::Image* FaceRecord::mutable_aligned() {
  
  if (aligned_ == nullptr) {
    auto* p = CreateMaybeMessage<::Image>(GetArenaNoVirtual());
    aligned_ = p;
  }
  // @@protoc_insertion_point(field_mutable:FaceRecord.aligned)
  return aligned_;
}
inline void FaceRecord::set_allocated_aligned(::Image* aligned) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(aligned_);
  }
  if (aligned) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      aligned = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, aligned, submessage_arena);
    }
    
  } else {
    
  }
  aligned_ = aligned;
  // @@protoc_insertion_point(field_set_allocated:FaceRecord.aligned)
}

// .Detection detection = 2;
inline bool FaceRecord::has_detection() const {
  return this != internal_default_instance() && detection_ != nullptr;
}
inline void FaceRecord::clear_detection() {
  if (GetArenaNoVirtual() == nullptr && detection_ != nullptr) {
    delete detection_;
  }
  detection_ = nullptr;
}
inline const ::Detection& FaceRecord::detection() const {
  const ::Detection* p = detection_;
  // @@protoc_insertion_point(field_get:FaceRecord.detection)
  return p != nullptr ? *p : *reinterpret_cast<const ::Detection*>(
      &::_Detection_default_instance_);
}
inline ::Detection* FaceRecord::release_detection() {
  // @@protoc_insertion_point(field_release:FaceRecord.detection)
  
  ::Detection* temp = detection_;
  detection_ = nullptr;
  return temp;
}
inline ::Detection* FaceRecord::mutable_detection() {
  
  if (detection_ == nullptr) {
    auto* p = CreateMaybeMessage<::Detection>(GetArenaNoVirtual());
    detection_ = p;
  }
  // @@protoc_insertion_point(field_mutable:FaceRecord.detection)
  return detection_;
}
inline void FaceRecord::set_allocated_detection(::Detection* detection) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete detection_;
  }
  if (detection) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      detection = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, detection, submessage_arena);
    }
    
  } else {
    
  }
  detection_ = detection;
  // @@protoc_insertion_point(field_set_allocated:FaceRecord.detection)
}

// repeated .Landmark landmarks = 8;
inline int FaceRecord::landmarks_size() const {
  return landmarks_.size();
}
inline void FaceRecord::clear_landmarks() {
  landmarks_.Clear();
}
inline ::Landmark* FaceRecord::mutable_landmarks(int index) {
  // @@protoc_insertion_point(field_mutable:FaceRecord.landmarks)
  return landmarks_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Landmark >*
FaceRecord::mutable_landmarks() {
  // @@protoc_insertion_point(field_mutable_list:FaceRecord.landmarks)
  return &landmarks_;
}
inline const ::Landmark& FaceRecord::landmarks(int index) const {
  // @@protoc_insertion_point(field_get:FaceRecord.landmarks)
  return landmarks_.Get(index);
}
inline ::Landmark* FaceRecord::add_landmarks() {
  // @@protoc_insertion_point(field_add:FaceRecord.landmarks)
  return landmarks_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Landmark >&
FaceRecord::landmarks() const {
  // @@protoc_insertion_point(field_list:FaceRecord.landmarks)
  return landmarks_;
}

// repeated .Attribute attributes = 10;
inline int FaceRecord::attributes_size() const {
  return attributes_.size();
}
inline void FaceRecord::clear_attributes() {
  attributes_.Clear();
}
inline ::Attribute* FaceRecord::mutable_attributes(int index) {
  // @@protoc_insertion_point(field_mutable:FaceRecord.attributes)
  return attributes_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Attribute >*
FaceRecord::mutable_attributes() {
  // @@protoc_insertion_point(field_mutable_list:FaceRecord.attributes)
  return &attributes_;
}
inline const ::Attribute& FaceRecord::attributes(int index) const {
  // @@protoc_insertion_point(field_get:FaceRecord.attributes)
  return attributes_.Get(index);
}
inline ::Attribute* FaceRecord::add_attributes() {
  // @@protoc_insertion_point(field_add:FaceRecord.attributes)
  return attributes_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Attribute >&
FaceRecord::attributes() const {
  // @@protoc_insertion_point(field_list:FaceRecord.attributes)
  return attributes_;
}

// repeated .Attribute internal_data = 11;
inline int FaceRecord::internal_data_size() const {
  return internal_data_.size();
}
inline void FaceRecord::clear_internal_data() {
  internal_data_.Clear();
}
inline ::Attribute* FaceRecord::mutable_internal_data(int index) {
  // @@protoc_insertion_point(field_mutable:FaceRecord.internal_data)
  return internal_data_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Attribute >*
FaceRecord::mutable_internal_data() {
  // @@protoc_insertion_point(field_mutable_list:FaceRecord.internal_data)
  return &internal_data_;
}
inline const ::Attribute& FaceRecord::internal_data(int index) const {
  // @@protoc_insertion_point(field_get:FaceRecord.internal_data)
  return internal_data_.Get(index);
}
inline ::Attribute* FaceRecord::add_internal_data() {
  // @@protoc_insertion_point(field_add:FaceRecord.internal_data)
  return internal_data_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Attribute >&
FaceRecord::internal_data() const {
  // @@protoc_insertion_point(field_list:FaceRecord.internal_data)
  return internal_data_;
}

// .FaceTemplate template = 3;
inline bool FaceRecord::has_template_() const {
  return this != internal_default_instance() && template__ != nullptr;
}
inline void FaceRecord::clear_template_() {
  if (GetArenaNoVirtual() == nullptr && template__ != nullptr) {
    delete template__;
  }
  template__ = nullptr;
}
inline const ::FaceTemplate& FaceRecord::template_() const {
  const ::FaceTemplate* p = template__;
  // @@protoc_insertion_point(field_get:FaceRecord.template)
  return p != nullptr ? *p : *reinterpret_cast<const ::FaceTemplate*>(
      &::_FaceTemplate_default_instance_);
}
inline ::FaceTemplate* FaceRecord::release_template_() {
  // @@protoc_insertion_point(field_release:FaceRecord.template)
  
  ::FaceTemplate* temp = template__;
  template__ = nullptr;
  return temp;
}
inline ::FaceTemplate* FaceRecord::mutable_template_() {
  
  if (template__ == nullptr) {
    auto* p = CreateMaybeMessage<::FaceTemplate>(GetArenaNoVirtual());
    template__ = p;
  }
  // @@protoc_insertion_point(field_mutable:FaceRecord.template)
  return template__;
}
inline void FaceRecord::set_allocated_template_(::FaceTemplate* template_) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete template__;
  }
  if (template_) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      template_ = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, template_, submessage_arena);
    }
    
  } else {
    
  }
  template__ = template_;
  // @@protoc_insertion_point(field_set_allocated:FaceRecord.template)
}

// float score = 12;
inline void FaceRecord::clear_score() {
  score_ = 0;
}
inline float FaceRecord::score() const {
  // @@protoc_insertion_point(field_get:FaceRecord.score)
  return score_;
}
inline void FaceRecord::set_score(float value) {
  
  score_ = value;
  // @@protoc_insertion_point(field_set:FaceRecord.score)
}

// .FaceRecordList search_results = 13;
inline bool FaceRecord::has_search_results() const {
  return this != internal_default_instance() && search_results_ != nullptr;
}
inline void FaceRecord::clear_search_results() {
  if (GetArenaNoVirtual() == nullptr && search_results_ != nullptr) {
    delete search_results_;
  }
  search_results_ = nullptr;
}
inline const ::FaceRecordList& FaceRecord::search_results() const {
  const ::FaceRecordList* p = search_results_;
  // @@protoc_insertion_point(field_get:FaceRecord.search_results)
  return p != nullptr ? *p : *reinterpret_cast<const ::FaceRecordList*>(
      &::_FaceRecordList_default_instance_);
}
inline ::FaceRecordList* FaceRecord::release_search_results() {
  // @@protoc_insertion_point(field_release:FaceRecord.search_results)
  
  ::FaceRecordList* temp = search_results_;
  search_results_ = nullptr;
  return temp;
}
inline ::FaceRecordList* FaceRecord::mutable_search_results() {
  
  if (search_results_ == nullptr) {
    auto* p = CreateMaybeMessage<::FaceRecordList>(GetArenaNoVirtual());
    search_results_ = p;
  }
  // @@protoc_insertion_point(field_mutable:FaceRecord.search_results)
  return search_results_;
}
inline void FaceRecord::set_allocated_search_results(::FaceRecordList* search_results) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete search_results_;
  }
  if (search_results) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      search_results = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, search_results, submessage_arena);
    }
    
  } else {
    
  }
  search_results_ = search_results;
  // @@protoc_insertion_point(field_set_allocated:FaceRecord.search_results)
}

// -------------------------------------------------------------------

// FaceRecordList

// repeated .FaceRecord face_records = 1;
inline int FaceRecordList::face_records_size() const {
  return face_records_.size();
}
inline void FaceRecordList::clear_face_records() {
  face_records_.Clear();
}
inline ::FaceRecord* FaceRecordList::mutable_face_records(int index) {
  // @@protoc_insertion_point(field_mutable:FaceRecordList.face_records)
  return face_records_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::FaceRecord >*
FaceRecordList::mutable_face_records() {
  // @@protoc_insertion_point(field_mutable_list:FaceRecordList.face_records)
  return &face_records_;
}
inline const ::FaceRecord& FaceRecordList::face_records(int index) const {
  // @@protoc_insertion_point(field_get:FaceRecordList.face_records)
  return face_records_.Get(index);
}
inline ::FaceRecord* FaceRecordList::add_face_records() {
  // @@protoc_insertion_point(field_add:FaceRecordList.face_records)
  return face_records_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::FaceRecord >&
FaceRecordList::face_records() const {
  // @@protoc_insertion_point(field_list:FaceRecordList.face_records)
  return face_records_;
}

// -------------------------------------------------------------------

// VerificationRequest

// string gallery = 1;
inline void VerificationRequest::clear_gallery() {
  gallery_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& VerificationRequest::gallery() const {
  // @@protoc_insertion_point(field_get:VerificationRequest.gallery)
  return gallery_.GetNoArena();
}
inline void VerificationRequest::set_gallery(const std::string& value) {
  
  gallery_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:VerificationRequest.gallery)
}
inline void VerificationRequest::set_gallery(std::string&& value) {
  
  gallery_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:VerificationRequest.gallery)
}
inline void VerificationRequest::set_gallery(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  gallery_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:VerificationRequest.gallery)
}
inline void VerificationRequest::set_gallery(const char* value, size_t size) {
  
  gallery_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:VerificationRequest.gallery)
}
inline std::string* VerificationRequest::mutable_gallery() {
  
  // @@protoc_insertion_point(field_mutable:VerificationRequest.gallery)
  return gallery_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* VerificationRequest::release_gallery() {
  // @@protoc_insertion_point(field_release:VerificationRequest.gallery)
  
  return gallery_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void VerificationRequest::set_allocated_gallery(std::string* gallery) {
  if (gallery != nullptr) {
    
  } else {
    
  }
  gallery_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), gallery);
  // @@protoc_insertion_point(field_set_allocated:VerificationRequest.gallery)
}

// string subject_id = 2;
inline void VerificationRequest::clear_subject_id() {
  subject_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& VerificationRequest::subject_id() const {
  // @@protoc_insertion_point(field_get:VerificationRequest.subject_id)
  return subject_id_.GetNoArena();
}
inline void VerificationRequest::set_subject_id(const std::string& value) {
  
  subject_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:VerificationRequest.subject_id)
}
inline void VerificationRequest::set_subject_id(std::string&& value) {
  
  subject_id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:VerificationRequest.subject_id)
}
inline void VerificationRequest::set_subject_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  subject_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:VerificationRequest.subject_id)
}
inline void VerificationRequest::set_subject_id(const char* value, size_t size) {
  
  subject_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:VerificationRequest.subject_id)
}
inline std::string* VerificationRequest::mutable_subject_id() {
  
  // @@protoc_insertion_point(field_mutable:VerificationRequest.subject_id)
  return subject_id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* VerificationRequest::release_subject_id() {
  // @@protoc_insertion_point(field_release:VerificationRequest.subject_id)
  
  return subject_id_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void VerificationRequest::set_allocated_subject_id(std::string* subject_id) {
  if (subject_id != nullptr) {
    
  } else {
    
  }
  subject_id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), subject_id);
  // @@protoc_insertion_point(field_set_allocated:VerificationRequest.subject_id)
}

// repeated .FaceRecord face_record = 3;
inline int VerificationRequest::face_record_size() const {
  return face_record_.size();
}
inline void VerificationRequest::clear_face_record() {
  face_record_.Clear();
}
inline ::FaceRecord* VerificationRequest::mutable_face_record(int index) {
  // @@protoc_insertion_point(field_mutable:VerificationRequest.face_record)
  return face_record_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::FaceRecord >*
VerificationRequest::mutable_face_record() {
  // @@protoc_insertion_point(field_mutable_list:VerificationRequest.face_record)
  return &face_record_;
}
inline const ::FaceRecord& VerificationRequest::face_record(int index) const {
  // @@protoc_insertion_point(field_get:VerificationRequest.face_record)
  return face_record_.Get(index);
}
inline ::FaceRecord* VerificationRequest::add_face_record() {
  // @@protoc_insertion_point(field_add:VerificationRequest.face_record)
  return face_record_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::FaceRecord >&
VerificationRequest::face_record() const {
  // @@protoc_insertion_point(field_list:VerificationRequest.face_record)
  return face_record_;
}

// -------------------------------------------------------------------

// VerificationResponse

// int32 error_code = 4;
inline void VerificationResponse::clear_error_code() {
  error_code_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 VerificationResponse::error_code() const {
  // @@protoc_insertion_point(field_get:VerificationResponse.error_code)
  return error_code_;
}
inline void VerificationResponse::set_error_code(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  error_code_ = value;
  // @@protoc_insertion_point(field_set:VerificationResponse.error_code)
}

// string error_message = 5;
inline void VerificationResponse::clear_error_message() {
  error_message_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& VerificationResponse::error_message() const {
  // @@protoc_insertion_point(field_get:VerificationResponse.error_message)
  return error_message_.GetNoArena();
}
inline void VerificationResponse::set_error_message(const std::string& value) {
  
  error_message_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:VerificationResponse.error_message)
}
inline void VerificationResponse::set_error_message(std::string&& value) {
  
  error_message_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:VerificationResponse.error_message)
}
inline void VerificationResponse::set_error_message(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  error_message_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:VerificationResponse.error_message)
}
inline void VerificationResponse::set_error_message(const char* value, size_t size) {
  
  error_message_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:VerificationResponse.error_message)
}
inline std::string* VerificationResponse::mutable_error_message() {
  
  // @@protoc_insertion_point(field_mutable:VerificationResponse.error_message)
  return error_message_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* VerificationResponse::release_error_message() {
  // @@protoc_insertion_point(field_release:VerificationResponse.error_message)
  
  return error_message_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void VerificationResponse::set_allocated_error_message(std::string* error_message) {
  if (error_message != nullptr) {
    
  } else {
    
  }
  error_message_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), error_message);
  // @@protoc_insertion_point(field_set_allocated:VerificationResponse.error_message)
}

// bool success = 1;
inline void VerificationResponse::clear_success() {
  success_ = false;
}
inline bool VerificationResponse::success() const {
  // @@protoc_insertion_point(field_get:VerificationResponse.success)
  return success_;
}
inline void VerificationResponse::set_success(bool value) {
  
  success_ = value;
  // @@protoc_insertion_point(field_set:VerificationResponse.success)
}

// float confidence = 2;
inline void VerificationResponse::clear_confidence() {
  confidence_ = 0;
}
inline float VerificationResponse::confidence() const {
  // @@protoc_insertion_point(field_get:VerificationResponse.confidence)
  return confidence_;
}
inline void VerificationResponse::set_confidence(float value) {
  
  confidence_ = value;
  // @@protoc_insertion_point(field_set:VerificationResponse.confidence)
}

// repeated .FaceRecord matches = 3;
inline int VerificationResponse::matches_size() const {
  return matches_.size();
}
inline void VerificationResponse::clear_matches() {
  matches_.Clear();
}
inline ::FaceRecord* VerificationResponse::mutable_matches(int index) {
  // @@protoc_insertion_point(field_mutable:VerificationResponse.matches)
  return matches_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::FaceRecord >*
VerificationResponse::mutable_matches() {
  // @@protoc_insertion_point(field_mutable_list:VerificationResponse.matches)
  return &matches_;
}
inline const ::FaceRecord& VerificationResponse::matches(int index) const {
  // @@protoc_insertion_point(field_get:VerificationResponse.matches)
  return matches_.Get(index);
}
inline ::FaceRecord* VerificationResponse::add_matches() {
  // @@protoc_insertion_point(field_add:VerificationResponse.matches)
  return matches_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::FaceRecord >&
VerificationResponse::matches() const {
  // @@protoc_insertion_point(field_list:VerificationResponse.matches)
  return matches_;
}

// -------------------------------------------------------------------

// SearchRequest

// string search_gallery = 1;
inline void SearchRequest::clear_search_gallery() {
  search_gallery_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& SearchRequest::search_gallery() const {
  // @@protoc_insertion_point(field_get:SearchRequest.search_gallery)
  return search_gallery_.GetNoArena();
}
inline void SearchRequest::set_search_gallery(const std::string& value) {
  
  search_gallery_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:SearchRequest.search_gallery)
}
inline void SearchRequest::set_search_gallery(std::string&& value) {
  
  search_gallery_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:SearchRequest.search_gallery)
}
inline void SearchRequest::set_search_gallery(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  search_gallery_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:SearchRequest.search_gallery)
}
inline void SearchRequest::set_search_gallery(const char* value, size_t size) {
  
  search_gallery_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:SearchRequest.search_gallery)
}
inline std::string* SearchRequest::mutable_search_gallery() {
  
  // @@protoc_insertion_point(field_mutable:SearchRequest.search_gallery)
  return search_gallery_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* SearchRequest::release_search_gallery() {
  // @@protoc_insertion_point(field_release:SearchRequest.search_gallery)
  
  return search_gallery_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void SearchRequest::set_allocated_search_gallery(std::string* search_gallery) {
  if (search_gallery != nullptr) {
    
  } else {
    
  }
  search_gallery_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), search_gallery);
  // @@protoc_insertion_point(field_set_allocated:SearchRequest.search_gallery)
}

// .FaceRecordList probes = 3;
inline bool SearchRequest::has_probes() const {
  return this != internal_default_instance() && probes_ != nullptr;
}
inline void SearchRequest::clear_probes() {
  if (GetArenaNoVirtual() == nullptr && probes_ != nullptr) {
    delete probes_;
  }
  probes_ = nullptr;
}
inline const ::FaceRecordList& SearchRequest::probes() const {
  const ::FaceRecordList* p = probes_;
  // @@protoc_insertion_point(field_get:SearchRequest.probes)
  return p != nullptr ? *p : *reinterpret_cast<const ::FaceRecordList*>(
      &::_FaceRecordList_default_instance_);
}
inline ::FaceRecordList* SearchRequest::release_probes() {
  // @@protoc_insertion_point(field_release:SearchRequest.probes)
  
  ::FaceRecordList* temp = probes_;
  probes_ = nullptr;
  return temp;
}
inline ::FaceRecordList* SearchRequest::mutable_probes() {
  
  if (probes_ == nullptr) {
    auto* p = CreateMaybeMessage<::FaceRecordList>(GetArenaNoVirtual());
    probes_ = p;
  }
  // @@protoc_insertion_point(field_mutable:SearchRequest.probes)
  return probes_;
}
inline void SearchRequest::set_allocated_probes(::FaceRecordList* probes) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete probes_;
  }
  if (probes) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      probes = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, probes, submessage_arena);
    }
    
  } else {
    
  }
  probes_ = probes;
  // @@protoc_insertion_point(field_set_allocated:SearchRequest.probes)
}

// int32 max_results = 4;
inline void SearchRequest::clear_max_results() {
  max_results_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SearchRequest::max_results() const {
  // @@protoc_insertion_point(field_get:SearchRequest.max_results)
  return max_results_;
}
inline void SearchRequest::set_max_results(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  max_results_ = value;
  // @@protoc_insertion_point(field_set:SearchRequest.max_results)
}

// float threshold = 5;
inline void SearchRequest::clear_threshold() {
  threshold_ = 0;
}
inline float SearchRequest::threshold() const {
  // @@protoc_insertion_point(field_get:SearchRequest.threshold)
  return threshold_;
}
inline void SearchRequest::set_threshold(float value) {
  
  threshold_ = value;
  // @@protoc_insertion_point(field_set:SearchRequest.threshold)
}

// -------------------------------------------------------------------

// SearchResponse

// .ErrorMessage message = 1;
inline bool SearchResponse::has_message() const {
  return this != internal_default_instance() && message_ != nullptr;
}
inline void SearchResponse::clear_message() {
  if (GetArenaNoVirtual() == nullptr && message_ != nullptr) {
    delete message_;
  }
  message_ = nullptr;
}
inline const ::ErrorMessage& SearchResponse::message() const {
  const ::ErrorMessage* p = message_;
  // @@protoc_insertion_point(field_get:SearchResponse.message)
  return p != nullptr ? *p : *reinterpret_cast<const ::ErrorMessage*>(
      &::_ErrorMessage_default_instance_);
}
inline ::ErrorMessage* SearchResponse::release_message() {
  // @@protoc_insertion_point(field_release:SearchResponse.message)
  
  ::ErrorMessage* temp = message_;
  message_ = nullptr;
  return temp;
}
inline ::ErrorMessage* SearchResponse::mutable_message() {
  
  if (message_ == nullptr) {
    auto* p = CreateMaybeMessage<::ErrorMessage>(GetArenaNoVirtual());
    message_ = p;
  }
  // @@protoc_insertion_point(field_mutable:SearchResponse.message)
  return message_;
}
inline void SearchResponse::set_allocated_message(::ErrorMessage* message) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete message_;
  }
  if (message) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      message = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, message, submessage_arena);
    }
    
  } else {
    
  }
  message_ = message;
  // @@protoc_insertion_point(field_set_allocated:SearchResponse.message)
}

// .FaceRecordList probes = 2;
inline bool SearchResponse::has_probes() const {
  return this != internal_default_instance() && probes_ != nullptr;
}
inline void SearchResponse::clear_probes() {
  if (GetArenaNoVirtual() == nullptr && probes_ != nullptr) {
    delete probes_;
  }
  probes_ = nullptr;
}
inline const ::FaceRecordList& SearchResponse::probes() const {
  const ::FaceRecordList* p = probes_;
  // @@protoc_insertion_point(field_get:SearchResponse.probes)
  return p != nullptr ? *p : *reinterpret_cast<const ::FaceRecordList*>(
      &::_FaceRecordList_default_instance_);
}
inline ::FaceRecordList* SearchResponse::release_probes() {
  // @@protoc_insertion_point(field_release:SearchResponse.probes)
  
  ::FaceRecordList* temp = probes_;
  probes_ = nullptr;
  return temp;
}
inline ::FaceRecordList* SearchResponse::mutable_probes() {
  
  if (probes_ == nullptr) {
    auto* p = CreateMaybeMessage<::FaceRecordList>(GetArenaNoVirtual());
    probes_ = p;
  }
  // @@protoc_insertion_point(field_mutable:SearchResponse.probes)
  return probes_;
}
inline void SearchResponse::set_allocated_probes(::FaceRecordList* probes) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete probes_;
  }
  if (probes) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      probes = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, probes, submessage_arena);
    }
    
  } else {
    
  }
  probes_ = probes;
  // @@protoc_insertion_point(field_set_allocated:SearchResponse.probes)
}

// -------------------------------------------------------------------

// EnrollRequest

// string enroll_gallery = 1;
inline void EnrollRequest::clear_enroll_gallery() {
  enroll_gallery_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& EnrollRequest::enroll_gallery() const {
  // @@protoc_insertion_point(field_get:EnrollRequest.enroll_gallery)
  return enroll_gallery_.GetNoArena();
}
inline void EnrollRequest::set_enroll_gallery(const std::string& value) {
  
  enroll_gallery_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:EnrollRequest.enroll_gallery)
}
inline void EnrollRequest::set_enroll_gallery(std::string&& value) {
  
  enroll_gallery_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:EnrollRequest.enroll_gallery)
}
inline void EnrollRequest::set_enroll_gallery(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  enroll_gallery_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:EnrollRequest.enroll_gallery)
}
inline void EnrollRequest::set_enroll_gallery(const char* value, size_t size) {
  
  enroll_gallery_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:EnrollRequest.enroll_gallery)
}
inline std::string* EnrollRequest::mutable_enroll_gallery() {
  
  // @@protoc_insertion_point(field_mutable:EnrollRequest.enroll_gallery)
  return enroll_gallery_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* EnrollRequest::release_enroll_gallery() {
  // @@protoc_insertion_point(field_release:EnrollRequest.enroll_gallery)
  
  return enroll_gallery_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void EnrollRequest::set_allocated_enroll_gallery(std::string* enroll_gallery) {
  if (enroll_gallery != nullptr) {
    
  } else {
    
  }
  enroll_gallery_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), enroll_gallery);
  // @@protoc_insertion_point(field_set_allocated:EnrollRequest.enroll_gallery)
}

// .FaceRecordList records = 2;
inline bool EnrollRequest::has_records() const {
  return this != internal_default_instance() && records_ != nullptr;
}
inline void EnrollRequest::clear_records() {
  if (GetArenaNoVirtual() == nullptr && records_ != nullptr) {
    delete records_;
  }
  records_ = nullptr;
}
inline const ::FaceRecordList& EnrollRequest::records() const {
  const ::FaceRecordList* p = records_;
  // @@protoc_insertion_point(field_get:EnrollRequest.records)
  return p != nullptr ? *p : *reinterpret_cast<const ::FaceRecordList*>(
      &::_FaceRecordList_default_instance_);
}
inline ::FaceRecordList* EnrollRequest::release_records() {
  // @@protoc_insertion_point(field_release:EnrollRequest.records)
  
  ::FaceRecordList* temp = records_;
  records_ = nullptr;
  return temp;
}
inline ::FaceRecordList* EnrollRequest::mutable_records() {
  
  if (records_ == nullptr) {
    auto* p = CreateMaybeMessage<::FaceRecordList>(GetArenaNoVirtual());
    records_ = p;
  }
  // @@protoc_insertion_point(field_mutable:EnrollRequest.records)
  return records_;
}
inline void EnrollRequest::set_allocated_records(::FaceRecordList* records) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete records_;
  }
  if (records) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      records = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, records, submessage_arena);
    }
    
  } else {
    
  }
  records_ = records;
  // @@protoc_insertion_point(field_set_allocated:EnrollRequest.records)
}

// .EnrollOptions enroll_options = 10;
inline bool EnrollRequest::has_enroll_options() const {
  return this != internal_default_instance() && enroll_options_ != nullptr;
}
inline void EnrollRequest::clear_enroll_options() {
  if (GetArenaNoVirtual() == nullptr && enroll_options_ != nullptr) {
    delete enroll_options_;
  }
  enroll_options_ = nullptr;
}
inline const ::EnrollOptions& EnrollRequest::enroll_options() const {
  const ::EnrollOptions* p = enroll_options_;
  // @@protoc_insertion_point(field_get:EnrollRequest.enroll_options)
  return p != nullptr ? *p : *reinterpret_cast<const ::EnrollOptions*>(
      &::_EnrollOptions_default_instance_);
}
inline ::EnrollOptions* EnrollRequest::release_enroll_options() {
  // @@protoc_insertion_point(field_release:EnrollRequest.enroll_options)
  
  ::EnrollOptions* temp = enroll_options_;
  enroll_options_ = nullptr;
  return temp;
}
inline ::EnrollOptions* EnrollRequest::mutable_enroll_options() {
  
  if (enroll_options_ == nullptr) {
    auto* p = CreateMaybeMessage<::EnrollOptions>(GetArenaNoVirtual());
    enroll_options_ = p;
  }
  // @@protoc_insertion_point(field_mutable:EnrollRequest.enroll_options)
  return enroll_options_;
}
inline void EnrollRequest::set_allocated_enroll_options(::EnrollOptions* enroll_options) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete enroll_options_;
  }
  if (enroll_options) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      enroll_options = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, enroll_options, submessage_arena);
    }
    
  } else {
    
  }
  enroll_options_ = enroll_options;
  // @@protoc_insertion_point(field_set_allocated:EnrollRequest.enroll_options)
}

// -------------------------------------------------------------------

// DetectRequest

// .Image image = 1;
inline bool DetectRequest::has_image() const {
  return this != internal_default_instance() && image_ != nullptr;
}
inline const ::Image& DetectRequest::image() const {
  const ::Image* p = image_;
  // @@protoc_insertion_point(field_get:DetectRequest.image)
  return p != nullptr ? *p : *reinterpret_cast<const ::Image*>(
      &::_Image_default_instance_);
}
inline ::Image* DetectRequest::release_image() {
  // @@protoc_insertion_point(field_release:DetectRequest.image)
  
  ::Image* temp = image_;
  image_ = nullptr;
  return temp;
}
inline ::Image* DetectRequest::mutable_image() {
  
  if (image_ == nullptr) {
    auto* p = CreateMaybeMessage<::Image>(GetArenaNoVirtual());
    image_ = p;
  }
  // @@protoc_insertion_point(field_mutable:DetectRequest.image)
  return image_;
}
inline void DetectRequest::set_allocated_image(::Image* image) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(image_);
  }
  if (image) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      image = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, image, submessage_arena);
    }
    
  } else {
    
  }
  image_ = image;
  // @@protoc_insertion_point(field_set_allocated:DetectRequest.image)
}

// string source = 2;
inline void DetectRequest::clear_source() {
  source_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& DetectRequest::source() const {
  // @@protoc_insertion_point(field_get:DetectRequest.source)
  return source_.GetNoArena();
}
inline void DetectRequest::set_source(const std::string& value) {
  
  source_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:DetectRequest.source)
}
inline void DetectRequest::set_source(std::string&& value) {
  
  source_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:DetectRequest.source)
}
inline void DetectRequest::set_source(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  source_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:DetectRequest.source)
}
inline void DetectRequest::set_source(const char* value, size_t size) {
  
  source_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:DetectRequest.source)
}
inline std::string* DetectRequest::mutable_source() {
  
  // @@protoc_insertion_point(field_mutable:DetectRequest.source)
  return source_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* DetectRequest::release_source() {
  // @@protoc_insertion_point(field_release:DetectRequest.source)
  
  return source_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void DetectRequest::set_allocated_source(std::string* source) {
  if (source != nullptr) {
    
  } else {
    
  }
  source_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), source);
  // @@protoc_insertion_point(field_set_allocated:DetectRequest.source)
}

// int64 frame = 3;
inline void DetectRequest::clear_frame() {
  frame_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 DetectRequest::frame() const {
  // @@protoc_insertion_point(field_get:DetectRequest.frame)
  return frame_;
}
inline void DetectRequest::set_frame(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  frame_ = value;
  // @@protoc_insertion_point(field_set:DetectRequest.frame)
}

// string subject_id = 4;
inline void DetectRequest::clear_subject_id() {
  subject_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& DetectRequest::subject_id() const {
  // @@protoc_insertion_point(field_get:DetectRequest.subject_id)
  return subject_id_.GetNoArena();
}
inline void DetectRequest::set_subject_id(const std::string& value) {
  
  subject_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:DetectRequest.subject_id)
}
inline void DetectRequest::set_subject_id(std::string&& value) {
  
  subject_id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:DetectRequest.subject_id)
}
inline void DetectRequest::set_subject_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  subject_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:DetectRequest.subject_id)
}
inline void DetectRequest::set_subject_id(const char* value, size_t size) {
  
  subject_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:DetectRequest.subject_id)
}
inline std::string* DetectRequest::mutable_subject_id() {
  
  // @@protoc_insertion_point(field_mutable:DetectRequest.subject_id)
  return subject_id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* DetectRequest::release_subject_id() {
  // @@protoc_insertion_point(field_release:DetectRequest.subject_id)
  
  return subject_id_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void DetectRequest::set_allocated_subject_id(std::string* subject_id) {
  if (subject_id != nullptr) {
    
  } else {
    
  }
  subject_id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), subject_id);
  // @@protoc_insertion_point(field_set_allocated:DetectRequest.subject_id)
}

// string subject_name = 5;
inline void DetectRequest::clear_subject_name() {
  subject_name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& DetectRequest::subject_name() const {
  // @@protoc_insertion_point(field_get:DetectRequest.subject_name)
  return subject_name_.GetNoArena();
}
inline void DetectRequest::set_subject_name(const std::string& value) {
  
  subject_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:DetectRequest.subject_name)
}
inline void DetectRequest::set_subject_name(std::string&& value) {
  
  subject_name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:DetectRequest.subject_name)
}
inline void DetectRequest::set_subject_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  subject_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:DetectRequest.subject_name)
}
inline void DetectRequest::set_subject_name(const char* value, size_t size) {
  
  subject_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:DetectRequest.subject_name)
}
inline std::string* DetectRequest::mutable_subject_name() {
  
  // @@protoc_insertion_point(field_mutable:DetectRequest.subject_name)
  return subject_name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* DetectRequest::release_subject_name() {
  // @@protoc_insertion_point(field_release:DetectRequest.subject_name)
  
  return subject_name_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void DetectRequest::set_allocated_subject_name(std::string* subject_name) {
  if (subject_name != nullptr) {
    
  } else {
    
  }
  subject_name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), subject_name);
  // @@protoc_insertion_point(field_set_allocated:DetectRequest.subject_name)
}

// .DetectionOptions detect_options = 8;
inline bool DetectRequest::has_detect_options() const {
  return this != internal_default_instance() && detect_options_ != nullptr;
}
inline void DetectRequest::clear_detect_options() {
  if (GetArenaNoVirtual() == nullptr && detect_options_ != nullptr) {
    delete detect_options_;
  }
  detect_options_ = nullptr;
}
inline const ::DetectionOptions& DetectRequest::detect_options() const {
  const ::DetectionOptions* p = detect_options_;
  // @@protoc_insertion_point(field_get:DetectRequest.detect_options)
  return p != nullptr ? *p : *reinterpret_cast<const ::DetectionOptions*>(
      &::_DetectionOptions_default_instance_);
}
inline ::DetectionOptions* DetectRequest::release_detect_options() {
  // @@protoc_insertion_point(field_release:DetectRequest.detect_options)
  
  ::DetectionOptions* temp = detect_options_;
  detect_options_ = nullptr;
  return temp;
}
inline ::DetectionOptions* DetectRequest::mutable_detect_options() {
  
  if (detect_options_ == nullptr) {
    auto* p = CreateMaybeMessage<::DetectionOptions>(GetArenaNoVirtual());
    detect_options_ = p;
  }
  // @@protoc_insertion_point(field_mutable:DetectRequest.detect_options)
  return detect_options_;
}
inline void DetectRequest::set_allocated_detect_options(::DetectionOptions* detect_options) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete detect_options_;
  }
  if (detect_options) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      detect_options = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, detect_options, submessage_arena);
    }
    
  } else {
    
  }
  detect_options_ = detect_options;
  // @@protoc_insertion_point(field_set_allocated:DetectRequest.detect_options)
}

// -------------------------------------------------------------------

// ExtractRequest

// .Image image = 1;
inline bool ExtractRequest::has_image() const {
  return this != internal_default_instance() && image_ != nullptr;
}
inline const ::Image& ExtractRequest::image() const {
  const ::Image* p = image_;
  // @@protoc_insertion_point(field_get:ExtractRequest.image)
  return p != nullptr ? *p : *reinterpret_cast<const ::Image*>(
      &::_Image_default_instance_);
}
inline ::Image* ExtractRequest::release_image() {
  // @@protoc_insertion_point(field_release:ExtractRequest.image)
  
  ::Image* temp = image_;
  image_ = nullptr;
  return temp;
}
inline ::Image* ExtractRequest::mutable_image() {
  
  if (image_ == nullptr) {
    auto* p = CreateMaybeMessage<::Image>(GetArenaNoVirtual());
    image_ = p;
  }
  // @@protoc_insertion_point(field_mutable:ExtractRequest.image)
  return image_;
}
inline void ExtractRequest::set_allocated_image(::Image* image) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(image_);
  }
  if (image) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      image = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, image, submessage_arena);
    }
    
  } else {
    
  }
  image_ = image;
  // @@protoc_insertion_point(field_set_allocated:ExtractRequest.image)
}

// .FaceRecordList records = 4;
inline bool ExtractRequest::has_records() const {
  return this != internal_default_instance() && records_ != nullptr;
}
inline void ExtractRequest::clear_records() {
  if (GetArenaNoVirtual() == nullptr && records_ != nullptr) {
    delete records_;
  }
  records_ = nullptr;
}
inline const ::FaceRecordList& ExtractRequest::records() const {
  const ::FaceRecordList* p = records_;
  // @@protoc_insertion_point(field_get:ExtractRequest.records)
  return p != nullptr ? *p : *reinterpret_cast<const ::FaceRecordList*>(
      &::_FaceRecordList_default_instance_);
}
inline ::FaceRecordList* ExtractRequest::release_records() {
  // @@protoc_insertion_point(field_release:ExtractRequest.records)
  
  ::FaceRecordList* temp = records_;
  records_ = nullptr;
  return temp;
}
inline ::FaceRecordList* ExtractRequest::mutable_records() {
  
  if (records_ == nullptr) {
    auto* p = CreateMaybeMessage<::FaceRecordList>(GetArenaNoVirtual());
    records_ = p;
  }
  // @@protoc_insertion_point(field_mutable:ExtractRequest.records)
  return records_;
}
inline void ExtractRequest::set_allocated_records(::FaceRecordList* records) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete records_;
  }
  if (records) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      records = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, records, submessage_arena);
    }
    
  } else {
    
  }
  records_ = records;
  // @@protoc_insertion_point(field_set_allocated:ExtractRequest.records)
}

// .ExtractOptions extract_options = 9;
inline bool ExtractRequest::has_extract_options() const {
  return this != internal_default_instance() && extract_options_ != nullptr;
}
inline void ExtractRequest::clear_extract_options() {
  if (GetArenaNoVirtual() == nullptr && extract_options_ != nullptr) {
    delete extract_options_;
  }
  extract_options_ = nullptr;
}
inline const ::ExtractOptions& ExtractRequest::extract_options() const {
  const ::ExtractOptions* p = extract_options_;
  // @@protoc_insertion_point(field_get:ExtractRequest.extract_options)
  return p != nullptr ? *p : *reinterpret_cast<const ::ExtractOptions*>(
      &::_ExtractOptions_default_instance_);
}
inline ::ExtractOptions* ExtractRequest::release_extract_options() {
  // @@protoc_insertion_point(field_release:ExtractRequest.extract_options)
  
  ::ExtractOptions* temp = extract_options_;
  extract_options_ = nullptr;
  return temp;
}
inline ::ExtractOptions* ExtractRequest::mutable_extract_options() {
  
  if (extract_options_ == nullptr) {
    auto* p = CreateMaybeMessage<::ExtractOptions>(GetArenaNoVirtual());
    extract_options_ = p;
  }
  // @@protoc_insertion_point(field_mutable:ExtractRequest.extract_options)
  return extract_options_;
}
inline void ExtractRequest::set_allocated_extract_options(::ExtractOptions* extract_options) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete extract_options_;
  }
  if (extract_options) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      extract_options = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, extract_options, submessage_arena);
    }
    
  } else {
    
  }
  extract_options_ = extract_options;
  // @@protoc_insertion_point(field_set_allocated:ExtractRequest.extract_options)
}

// -------------------------------------------------------------------

// ScoreRequest

// .FaceRecordList face_probes = 1;
inline bool ScoreRequest::has_face_probes() const {
  return this != internal_default_instance() && face_probes_ != nullptr;
}
inline void ScoreRequest::clear_face_probes() {
  if (GetArenaNoVirtual() == nullptr && face_probes_ != nullptr) {
    delete face_probes_;
  }
  face_probes_ = nullptr;
}
inline const ::FaceRecordList& ScoreRequest::face_probes() const {
  const ::FaceRecordList* p = face_probes_;
  // @@protoc_insertion_point(field_get:ScoreRequest.face_probes)
  return p != nullptr ? *p : *reinterpret_cast<const ::FaceRecordList*>(
      &::_FaceRecordList_default_instance_);
}
inline ::FaceRecordList* ScoreRequest::release_face_probes() {
  // @@protoc_insertion_point(field_release:ScoreRequest.face_probes)
  
  ::FaceRecordList* temp = face_probes_;
  face_probes_ = nullptr;
  return temp;
}
inline ::FaceRecordList* ScoreRequest::mutable_face_probes() {
  
  if (face_probes_ == nullptr) {
    auto* p = CreateMaybeMessage<::FaceRecordList>(GetArenaNoVirtual());
    face_probes_ = p;
  }
  // @@protoc_insertion_point(field_mutable:ScoreRequest.face_probes)
  return face_probes_;
}
inline void ScoreRequest::set_allocated_face_probes(::FaceRecordList* face_probes) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete face_probes_;
  }
  if (face_probes) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      face_probes = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, face_probes, submessage_arena);
    }
    
  } else {
    
  }
  face_probes_ = face_probes;
  // @@protoc_insertion_point(field_set_allocated:ScoreRequest.face_probes)
}

// .FaceRecordList face_gallery = 2;
inline bool ScoreRequest::has_face_gallery() const {
  return this != internal_default_instance() && face_gallery_ != nullptr;
}
inline void ScoreRequest::clear_face_gallery() {
  if (GetArenaNoVirtual() == nullptr && face_gallery_ != nullptr) {
    delete face_gallery_;
  }
  face_gallery_ = nullptr;
}
inline const ::FaceRecordList& ScoreRequest::face_gallery() const {
  const ::FaceRecordList* p = face_gallery_;
  // @@protoc_insertion_point(field_get:ScoreRequest.face_gallery)
  return p != nullptr ? *p : *reinterpret_cast<const ::FaceRecordList*>(
      &::_FaceRecordList_default_instance_);
}
inline ::FaceRecordList* ScoreRequest::release_face_gallery() {
  // @@protoc_insertion_point(field_release:ScoreRequest.face_gallery)
  
  ::FaceRecordList* temp = face_gallery_;
  face_gallery_ = nullptr;
  return temp;
}
inline ::FaceRecordList* ScoreRequest::mutable_face_gallery() {
  
  if (face_gallery_ == nullptr) {
    auto* p = CreateMaybeMessage<::FaceRecordList>(GetArenaNoVirtual());
    face_gallery_ = p;
  }
  // @@protoc_insertion_point(field_mutable:ScoreRequest.face_gallery)
  return face_gallery_;
}
inline void ScoreRequest::set_allocated_face_gallery(::FaceRecordList* face_gallery) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete face_gallery_;
  }
  if (face_gallery) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      face_gallery = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, face_gallery, submessage_arena);
    }
    
  } else {
    
  }
  face_gallery_ = face_gallery;
  // @@protoc_insertion_point(field_set_allocated:ScoreRequest.face_gallery)
}

// .TemplateList template_probes = 3;
inline bool ScoreRequest::has_template_probes() const {
  return this != internal_default_instance() && template_probes_ != nullptr;
}
inline void ScoreRequest::clear_template_probes() {
  if (GetArenaNoVirtual() == nullptr && template_probes_ != nullptr) {
    delete template_probes_;
  }
  template_probes_ = nullptr;
}
inline const ::TemplateList& ScoreRequest::template_probes() const {
  const ::TemplateList* p = template_probes_;
  // @@protoc_insertion_point(field_get:ScoreRequest.template_probes)
  return p != nullptr ? *p : *reinterpret_cast<const ::TemplateList*>(
      &::_TemplateList_default_instance_);
}
inline ::TemplateList* ScoreRequest::release_template_probes() {
  // @@protoc_insertion_point(field_release:ScoreRequest.template_probes)
  
  ::TemplateList* temp = template_probes_;
  template_probes_ = nullptr;
  return temp;
}
inline ::TemplateList* ScoreRequest::mutable_template_probes() {
  
  if (template_probes_ == nullptr) {
    auto* p = CreateMaybeMessage<::TemplateList>(GetArenaNoVirtual());
    template_probes_ = p;
  }
  // @@protoc_insertion_point(field_mutable:ScoreRequest.template_probes)
  return template_probes_;
}
inline void ScoreRequest::set_allocated_template_probes(::TemplateList* template_probes) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete template_probes_;
  }
  if (template_probes) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      template_probes = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, template_probes, submessage_arena);
    }
    
  } else {
    
  }
  template_probes_ = template_probes;
  // @@protoc_insertion_point(field_set_allocated:ScoreRequest.template_probes)
}

// .TemplateList template_gallery = 4;
inline bool ScoreRequest::has_template_gallery() const {
  return this != internal_default_instance() && template_gallery_ != nullptr;
}
inline void ScoreRequest::clear_template_gallery() {
  if (GetArenaNoVirtual() == nullptr && template_gallery_ != nullptr) {
    delete template_gallery_;
  }
  template_gallery_ = nullptr;
}
inline const ::TemplateList& ScoreRequest::template_gallery() const {
  const ::TemplateList* p = template_gallery_;
  // @@protoc_insertion_point(field_get:ScoreRequest.template_gallery)
  return p != nullptr ? *p : *reinterpret_cast<const ::TemplateList*>(
      &::_TemplateList_default_instance_);
}
inline ::TemplateList* ScoreRequest::release_template_gallery() {
  // @@protoc_insertion_point(field_release:ScoreRequest.template_gallery)
  
  ::TemplateList* temp = template_gallery_;
  template_gallery_ = nullptr;
  return temp;
}
inline ::TemplateList* ScoreRequest::mutable_template_gallery() {
  
  if (template_gallery_ == nullptr) {
    auto* p = CreateMaybeMessage<::TemplateList>(GetArenaNoVirtual());
    template_gallery_ = p;
  }
  // @@protoc_insertion_point(field_mutable:ScoreRequest.template_gallery)
  return template_gallery_;
}
inline void ScoreRequest::set_allocated_template_gallery(::TemplateList* template_gallery) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete template_gallery_;
  }
  if (template_gallery) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      template_gallery = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, template_gallery, submessage_arena);
    }
    
  } else {
    
  }
  template_gallery_ = template_gallery;
  // @@protoc_insertion_point(field_set_allocated:ScoreRequest.template_gallery)
}

// -------------------------------------------------------------------

// DetectExtractRequest

// .DetectRequest detect_request = 1;
inline bool DetectExtractRequest::has_detect_request() const {
  return this != internal_default_instance() && detect_request_ != nullptr;
}
inline void DetectExtractRequest::clear_detect_request() {
  if (GetArenaNoVirtual() == nullptr && detect_request_ != nullptr) {
    delete detect_request_;
  }
  detect_request_ = nullptr;
}
inline const ::DetectRequest& DetectExtractRequest::detect_request() const {
  const ::DetectRequest* p = detect_request_;
  // @@protoc_insertion_point(field_get:DetectExtractRequest.detect_request)
  return p != nullptr ? *p : *reinterpret_cast<const ::DetectRequest*>(
      &::_DetectRequest_default_instance_);
}
inline ::DetectRequest* DetectExtractRequest::release_detect_request() {
  // @@protoc_insertion_point(field_release:DetectExtractRequest.detect_request)
  
  ::DetectRequest* temp = detect_request_;
  detect_request_ = nullptr;
  return temp;
}
inline ::DetectRequest* DetectExtractRequest::mutable_detect_request() {
  
  if (detect_request_ == nullptr) {
    auto* p = CreateMaybeMessage<::DetectRequest>(GetArenaNoVirtual());
    detect_request_ = p;
  }
  // @@protoc_insertion_point(field_mutable:DetectExtractRequest.detect_request)
  return detect_request_;
}
inline void DetectExtractRequest::set_allocated_detect_request(::DetectRequest* detect_request) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete detect_request_;
  }
  if (detect_request) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      detect_request = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, detect_request, submessage_arena);
    }
    
  } else {
    
  }
  detect_request_ = detect_request;
  // @@protoc_insertion_point(field_set_allocated:DetectExtractRequest.detect_request)
}

// .ExtractRequest extract_request = 2;
inline bool DetectExtractRequest::has_extract_request() const {
  return this != internal_default_instance() && extract_request_ != nullptr;
}
inline void DetectExtractRequest::clear_extract_request() {
  if (GetArenaNoVirtual() == nullptr && extract_request_ != nullptr) {
    delete extract_request_;
  }
  extract_request_ = nullptr;
}
inline const ::ExtractRequest& DetectExtractRequest::extract_request() const {
  const ::ExtractRequest* p = extract_request_;
  // @@protoc_insertion_point(field_get:DetectExtractRequest.extract_request)
  return p != nullptr ? *p : *reinterpret_cast<const ::ExtractRequest*>(
      &::_ExtractRequest_default_instance_);
}
inline ::ExtractRequest* DetectExtractRequest::release_extract_request() {
  // @@protoc_insertion_point(field_release:DetectExtractRequest.extract_request)
  
  ::ExtractRequest* temp = extract_request_;
  extract_request_ = nullptr;
  return temp;
}
inline ::ExtractRequest* DetectExtractRequest::mutable_extract_request() {
  
  if (extract_request_ == nullptr) {
    auto* p = CreateMaybeMessage<::ExtractRequest>(GetArenaNoVirtual());
    extract_request_ = p;
  }
  // @@protoc_insertion_point(field_mutable:DetectExtractRequest.extract_request)
  return extract_request_;
}
inline void DetectExtractRequest::set_allocated_extract_request(::ExtractRequest* extract_request) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete extract_request_;
  }
  if (extract_request) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      extract_request = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, extract_request, submessage_arena);
    }
    
  } else {
    
  }
  extract_request_ = extract_request;
  // @@protoc_insertion_point(field_set_allocated:DetectExtractRequest.extract_request)
}

// -------------------------------------------------------------------

// DetectExtractEnrollRequest

// .DetectRequest detect_request = 1;
inline bool DetectExtractEnrollRequest::has_detect_request() const {
  return this != internal_default_instance() && detect_request_ != nullptr;
}
inline void DetectExtractEnrollRequest::clear_detect_request() {
  if (GetArenaNoVirtual() == nullptr && detect_request_ != nullptr) {
    delete detect_request_;
  }
  detect_request_ = nullptr;
}
inline const ::DetectRequest& DetectExtractEnrollRequest::detect_request() const {
  const ::DetectRequest* p = detect_request_;
  // @@protoc_insertion_point(field_get:DetectExtractEnrollRequest.detect_request)
  return p != nullptr ? *p : *reinterpret_cast<const ::DetectRequest*>(
      &::_DetectRequest_default_instance_);
}
inline ::DetectRequest* DetectExtractEnrollRequest::release_detect_request() {
  // @@protoc_insertion_point(field_release:DetectExtractEnrollRequest.detect_request)
  
  ::DetectRequest* temp = detect_request_;
  detect_request_ = nullptr;
  return temp;
}
inline ::DetectRequest* DetectExtractEnrollRequest::mutable_detect_request() {
  
  if (detect_request_ == nullptr) {
    auto* p = CreateMaybeMessage<::DetectRequest>(GetArenaNoVirtual());
    detect_request_ = p;
  }
  // @@protoc_insertion_point(field_mutable:DetectExtractEnrollRequest.detect_request)
  return detect_request_;
}
inline void DetectExtractEnrollRequest::set_allocated_detect_request(::DetectRequest* detect_request) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete detect_request_;
  }
  if (detect_request) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      detect_request = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, detect_request, submessage_arena);
    }
    
  } else {
    
  }
  detect_request_ = detect_request;
  // @@protoc_insertion_point(field_set_allocated:DetectExtractEnrollRequest.detect_request)
}

// .ExtractRequest extract_request = 2;
inline bool DetectExtractEnrollRequest::has_extract_request() const {
  return this != internal_default_instance() && extract_request_ != nullptr;
}
inline void DetectExtractEnrollRequest::clear_extract_request() {
  if (GetArenaNoVirtual() == nullptr && extract_request_ != nullptr) {
    delete extract_request_;
  }
  extract_request_ = nullptr;
}
inline const ::ExtractRequest& DetectExtractEnrollRequest::extract_request() const {
  const ::ExtractRequest* p = extract_request_;
  // @@protoc_insertion_point(field_get:DetectExtractEnrollRequest.extract_request)
  return p != nullptr ? *p : *reinterpret_cast<const ::ExtractRequest*>(
      &::_ExtractRequest_default_instance_);
}
inline ::ExtractRequest* DetectExtractEnrollRequest::release_extract_request() {
  // @@protoc_insertion_point(field_release:DetectExtractEnrollRequest.extract_request)
  
  ::ExtractRequest* temp = extract_request_;
  extract_request_ = nullptr;
  return temp;
}
inline ::ExtractRequest* DetectExtractEnrollRequest::mutable_extract_request() {
  
  if (extract_request_ == nullptr) {
    auto* p = CreateMaybeMessage<::ExtractRequest>(GetArenaNoVirtual());
    extract_request_ = p;
  }
  // @@protoc_insertion_point(field_mutable:DetectExtractEnrollRequest.extract_request)
  return extract_request_;
}
inline void DetectExtractEnrollRequest::set_allocated_extract_request(::ExtractRequest* extract_request) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete extract_request_;
  }
  if (extract_request) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      extract_request = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, extract_request, submessage_arena);
    }
    
  } else {
    
  }
  extract_request_ = extract_request;
  // @@protoc_insertion_point(field_set_allocated:DetectExtractEnrollRequest.extract_request)
}

// .EnrollRequest enroll_request = 3;
inline bool DetectExtractEnrollRequest::has_enroll_request() const {
  return this != internal_default_instance() && enroll_request_ != nullptr;
}
inline void DetectExtractEnrollRequest::clear_enroll_request() {
  if (GetArenaNoVirtual() == nullptr && enroll_request_ != nullptr) {
    delete enroll_request_;
  }
  enroll_request_ = nullptr;
}
inline const ::EnrollRequest& DetectExtractEnrollRequest::enroll_request() const {
  const ::EnrollRequest* p = enroll_request_;
  // @@protoc_insertion_point(field_get:DetectExtractEnrollRequest.enroll_request)
  return p != nullptr ? *p : *reinterpret_cast<const ::EnrollRequest*>(
      &::_EnrollRequest_default_instance_);
}
inline ::EnrollRequest* DetectExtractEnrollRequest::release_enroll_request() {
  // @@protoc_insertion_point(field_release:DetectExtractEnrollRequest.enroll_request)
  
  ::EnrollRequest* temp = enroll_request_;
  enroll_request_ = nullptr;
  return temp;
}
inline ::EnrollRequest* DetectExtractEnrollRequest::mutable_enroll_request() {
  
  if (enroll_request_ == nullptr) {
    auto* p = CreateMaybeMessage<::EnrollRequest>(GetArenaNoVirtual());
    enroll_request_ = p;
  }
  // @@protoc_insertion_point(field_mutable:DetectExtractEnrollRequest.enroll_request)
  return enroll_request_;
}
inline void DetectExtractEnrollRequest::set_allocated_enroll_request(::EnrollRequest* enroll_request) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete enroll_request_;
  }
  if (enroll_request) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      enroll_request = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, enroll_request, submessage_arena);
    }
    
  } else {
    
  }
  enroll_request_ = enroll_request;
  // @@protoc_insertion_point(field_set_allocated:DetectExtractEnrollRequest.enroll_request)
}

// -------------------------------------------------------------------

// DetectExtractSearchRequest

// .DetectRequest detect_request = 1;
inline bool DetectExtractSearchRequest::has_detect_request() const {
  return this != internal_default_instance() && detect_request_ != nullptr;
}
inline void DetectExtractSearchRequest::clear_detect_request() {
  if (GetArenaNoVirtual() == nullptr && detect_request_ != nullptr) {
    delete detect_request_;
  }
  detect_request_ = nullptr;
}
inline const ::DetectRequest& DetectExtractSearchRequest::detect_request() const {
  const ::DetectRequest* p = detect_request_;
  // @@protoc_insertion_point(field_get:DetectExtractSearchRequest.detect_request)
  return p != nullptr ? *p : *reinterpret_cast<const ::DetectRequest*>(
      &::_DetectRequest_default_instance_);
}
inline ::DetectRequest* DetectExtractSearchRequest::release_detect_request() {
  // @@protoc_insertion_point(field_release:DetectExtractSearchRequest.detect_request)
  
  ::DetectRequest* temp = detect_request_;
  detect_request_ = nullptr;
  return temp;
}
inline ::DetectRequest* DetectExtractSearchRequest::mutable_detect_request() {
  
  if (detect_request_ == nullptr) {
    auto* p = CreateMaybeMessage<::DetectRequest>(GetArenaNoVirtual());
    detect_request_ = p;
  }
  // @@protoc_insertion_point(field_mutable:DetectExtractSearchRequest.detect_request)
  return detect_request_;
}
inline void DetectExtractSearchRequest::set_allocated_detect_request(::DetectRequest* detect_request) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete detect_request_;
  }
  if (detect_request) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      detect_request = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, detect_request, submessage_arena);
    }
    
  } else {
    
  }
  detect_request_ = detect_request;
  // @@protoc_insertion_point(field_set_allocated:DetectExtractSearchRequest.detect_request)
}

// .ExtractRequest extract_request = 2;
inline bool DetectExtractSearchRequest::has_extract_request() const {
  return this != internal_default_instance() && extract_request_ != nullptr;
}
inline void DetectExtractSearchRequest::clear_extract_request() {
  if (GetArenaNoVirtual() == nullptr && extract_request_ != nullptr) {
    delete extract_request_;
  }
  extract_request_ = nullptr;
}
inline const ::ExtractRequest& DetectExtractSearchRequest::extract_request() const {
  const ::ExtractRequest* p = extract_request_;
  // @@protoc_insertion_point(field_get:DetectExtractSearchRequest.extract_request)
  return p != nullptr ? *p : *reinterpret_cast<const ::ExtractRequest*>(
      &::_ExtractRequest_default_instance_);
}
inline ::ExtractRequest* DetectExtractSearchRequest::release_extract_request() {
  // @@protoc_insertion_point(field_release:DetectExtractSearchRequest.extract_request)
  
  ::ExtractRequest* temp = extract_request_;
  extract_request_ = nullptr;
  return temp;
}
inline ::ExtractRequest* DetectExtractSearchRequest::mutable_extract_request() {
  
  if (extract_request_ == nullptr) {
    auto* p = CreateMaybeMessage<::ExtractRequest>(GetArenaNoVirtual());
    extract_request_ = p;
  }
  // @@protoc_insertion_point(field_mutable:DetectExtractSearchRequest.extract_request)
  return extract_request_;
}
inline void DetectExtractSearchRequest::set_allocated_extract_request(::ExtractRequest* extract_request) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete extract_request_;
  }
  if (extract_request) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      extract_request = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, extract_request, submessage_arena);
    }
    
  } else {
    
  }
  extract_request_ = extract_request;
  // @@protoc_insertion_point(field_set_allocated:DetectExtractSearchRequest.extract_request)
}

// .SearchRequest search_request = 3;
inline bool DetectExtractSearchRequest::has_search_request() const {
  return this != internal_default_instance() && search_request_ != nullptr;
}
inline void DetectExtractSearchRequest::clear_search_request() {
  if (GetArenaNoVirtual() == nullptr && search_request_ != nullptr) {
    delete search_request_;
  }
  search_request_ = nullptr;
}
inline const ::SearchRequest& DetectExtractSearchRequest::search_request() const {
  const ::SearchRequest* p = search_request_;
  // @@protoc_insertion_point(field_get:DetectExtractSearchRequest.search_request)
  return p != nullptr ? *p : *reinterpret_cast<const ::SearchRequest*>(
      &::_SearchRequest_default_instance_);
}
inline ::SearchRequest* DetectExtractSearchRequest::release_search_request() {
  // @@protoc_insertion_point(field_release:DetectExtractSearchRequest.search_request)
  
  ::SearchRequest* temp = search_request_;
  search_request_ = nullptr;
  return temp;
}
inline ::SearchRequest* DetectExtractSearchRequest::mutable_search_request() {
  
  if (search_request_ == nullptr) {
    auto* p = CreateMaybeMessage<::SearchRequest>(GetArenaNoVirtual());
    search_request_ = p;
  }
  // @@protoc_insertion_point(field_mutable:DetectExtractSearchRequest.search_request)
  return search_request_;
}
inline void DetectExtractSearchRequest::set_allocated_search_request(::SearchRequest* search_request) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete search_request_;
  }
  if (search_request) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      search_request = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, search_request, submessage_arena);
    }
    
  } else {
    
  }
  search_request_ = search_request;
  // @@protoc_insertion_point(field_set_allocated:DetectExtractSearchRequest.search_request)
}

// -------------------------------------------------------------------

// FaceStatusRequest

// -------------------------------------------------------------------

// FaceServiceInfo

// .ServiceStatus status = 1;
inline void FaceServiceInfo::clear_status() {
  status_ = 0;
}
inline ::ServiceStatus FaceServiceInfo::status() const {
  // @@protoc_insertion_point(field_get:FaceServiceInfo.status)
  return static_cast< ::ServiceStatus >(status_);
}
inline void FaceServiceInfo::set_status(::ServiceStatus value) {
  
  status_ = value;
  // @@protoc_insertion_point(field_set:FaceServiceInfo.status)
}

// int32 worker_count = 2;
inline void FaceServiceInfo::clear_worker_count() {
  worker_count_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 FaceServiceInfo::worker_count() const {
  // @@protoc_insertion_point(field_get:FaceServiceInfo.worker_count)
  return worker_count_;
}
inline void FaceServiceInfo::set_worker_count(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  worker_count_ = value;
  // @@protoc_insertion_point(field_set:FaceServiceInfo.worker_count)
}

// bool detection_support = 3;
inline void FaceServiceInfo::clear_detection_support() {
  detection_support_ = false;
}
inline bool FaceServiceInfo::detection_support() const {
  // @@protoc_insertion_point(field_get:FaceServiceInfo.detection_support)
  return detection_support_;
}
inline void FaceServiceInfo::set_detection_support(bool value) {
  
  detection_support_ = value;
  // @@protoc_insertion_point(field_set:FaceServiceInfo.detection_support)
}

// bool extract_support = 4;
inline void FaceServiceInfo::clear_extract_support() {
  extract_support_ = false;
}
inline bool FaceServiceInfo::extract_support() const {
  // @@protoc_insertion_point(field_get:FaceServiceInfo.extract_support)
  return extract_support_;
}
inline void FaceServiceInfo::set_extract_support(bool value) {
  
  extract_support_ = value;
  // @@protoc_insertion_point(field_set:FaceServiceInfo.extract_support)
}

// bool score_support = 5;
inline void FaceServiceInfo::clear_score_support() {
  score_support_ = false;
}
inline bool FaceServiceInfo::score_support() const {
  // @@protoc_insertion_point(field_get:FaceServiceInfo.score_support)
  return score_support_;
}
inline void FaceServiceInfo::set_score_support(bool value) {
  
  score_support_ = value;
  // @@protoc_insertion_point(field_set:FaceServiceInfo.score_support)
}

// bool attribute_support = 6;
inline void FaceServiceInfo::clear_attribute_support() {
  attribute_support_ = false;
}
inline bool FaceServiceInfo::attribute_support() const {
  // @@protoc_insertion_point(field_get:FaceServiceInfo.attribute_support)
  return attribute_support_;
}
inline void FaceServiceInfo::set_attribute_support(bool value) {
  
  attribute_support_ = value;
  // @@protoc_insertion_point(field_set:FaceServiceInfo.attribute_support)
}

// .ScoreType score_type = 7;
inline void FaceServiceInfo::clear_score_type() {
  score_type_ = 0;
}
inline ::ScoreType FaceServiceInfo::score_type() const {
  // @@protoc_insertion_point(field_get:FaceServiceInfo.score_type)
  return static_cast< ::ScoreType >(score_type_);
}
inline void FaceServiceInfo::set_score_type(::ScoreType value) {
  
  score_type_ = value;
  // @@protoc_insertion_point(field_set:FaceServiceInfo.score_type)
}

// float detection_threshold = 8;
inline void FaceServiceInfo::clear_detection_threshold() {
  detection_threshold_ = 0;
}
inline float FaceServiceInfo::detection_threshold() const {
  // @@protoc_insertion_point(field_get:FaceServiceInfo.detection_threshold)
  return detection_threshold_;
}
inline void FaceServiceInfo::set_detection_threshold(float value) {
  
  detection_threshold_ = value;
  // @@protoc_insertion_point(field_set:FaceServiceInfo.detection_threshold)
}

// float match_threshold = 9;
inline void FaceServiceInfo::clear_match_threshold() {
  match_threshold_ = 0;
}
inline float FaceServiceInfo::match_threshold() const {
  // @@protoc_insertion_point(field_get:FaceServiceInfo.match_threshold)
  return match_threshold_;
}
inline void FaceServiceInfo::set_match_threshold(float value) {
  
  match_threshold_ = value;
  // @@protoc_insertion_point(field_set:FaceServiceInfo.match_threshold)
}

// string algorithm = 10;
inline void FaceServiceInfo::clear_algorithm() {
  algorithm_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& FaceServiceInfo::algorithm() const {
  // @@protoc_insertion_point(field_get:FaceServiceInfo.algorithm)
  return algorithm_.GetNoArena();
}
inline void FaceServiceInfo::set_algorithm(const std::string& value) {
  
  algorithm_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:FaceServiceInfo.algorithm)
}
inline void FaceServiceInfo::set_algorithm(std::string&& value) {
  
  algorithm_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:FaceServiceInfo.algorithm)
}
inline void FaceServiceInfo::set_algorithm(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  algorithm_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:FaceServiceInfo.algorithm)
}
inline void FaceServiceInfo::set_algorithm(const char* value, size_t size) {
  
  algorithm_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:FaceServiceInfo.algorithm)
}
inline std::string* FaceServiceInfo::mutable_algorithm() {
  
  // @@protoc_insertion_point(field_mutable:FaceServiceInfo.algorithm)
  return algorithm_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* FaceServiceInfo::release_algorithm() {
  // @@protoc_insertion_point(field_release:FaceServiceInfo.algorithm)
  
  return algorithm_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void FaceServiceInfo::set_allocated_algorithm(std::string* algorithm) {
  if (algorithm != nullptr) {
    
  } else {
    
  }
  algorithm_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), algorithm);
  // @@protoc_insertion_point(field_set_allocated:FaceServiceInfo.algorithm)
}

// string notes = 11;
inline void FaceServiceInfo::clear_notes() {
  notes_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& FaceServiceInfo::notes() const {
  // @@protoc_insertion_point(field_get:FaceServiceInfo.notes)
  return notes_.GetNoArena();
}
inline void FaceServiceInfo::set_notes(const std::string& value) {
  
  notes_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:FaceServiceInfo.notes)
}
inline void FaceServiceInfo::set_notes(std::string&& value) {
  
  notes_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:FaceServiceInfo.notes)
}
inline void FaceServiceInfo::set_notes(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  notes_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:FaceServiceInfo.notes)
}
inline void FaceServiceInfo::set_notes(const char* value, size_t size) {
  
  notes_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:FaceServiceInfo.notes)
}
inline std::string* FaceServiceInfo::mutable_notes() {
  
  // @@protoc_insertion_point(field_mutable:FaceServiceInfo.notes)
  return notes_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* FaceServiceInfo::release_notes() {
  // @@protoc_insertion_point(field_release:FaceServiceInfo.notes)
  
  return notes_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void FaceServiceInfo::set_allocated_notes(std::string* notes) {
  if (notes != nullptr) {
    
  } else {
    
  }
  notes_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), notes);
  // @@protoc_insertion_point(field_set_allocated:FaceServiceInfo.notes)
}

// -------------------------------------------------------------------

// GalleryListRequest

// -------------------------------------------------------------------

// GalleryDeleteRequest

// string gallery_name = 1;
inline void GalleryDeleteRequest::clear_gallery_name() {
  gallery_name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& GalleryDeleteRequest::gallery_name() const {
  // @@protoc_insertion_point(field_get:GalleryDeleteRequest.gallery_name)
  return gallery_name_.GetNoArena();
}
inline void GalleryDeleteRequest::set_gallery_name(const std::string& value) {
  
  gallery_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:GalleryDeleteRequest.gallery_name)
}
inline void GalleryDeleteRequest::set_gallery_name(std::string&& value) {
  
  gallery_name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:GalleryDeleteRequest.gallery_name)
}
inline void GalleryDeleteRequest::set_gallery_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  gallery_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:GalleryDeleteRequest.gallery_name)
}
inline void GalleryDeleteRequest::set_gallery_name(const char* value, size_t size) {
  
  gallery_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:GalleryDeleteRequest.gallery_name)
}
inline std::string* GalleryDeleteRequest::mutable_gallery_name() {
  
  // @@protoc_insertion_point(field_mutable:GalleryDeleteRequest.gallery_name)
  return gallery_name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* GalleryDeleteRequest::release_gallery_name() {
  // @@protoc_insertion_point(field_release:GalleryDeleteRequest.gallery_name)
  
  return gallery_name_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void GalleryDeleteRequest::set_allocated_gallery_name(std::string* gallery_name) {
  if (gallery_name != nullptr) {
    
  } else {
    
  }
  gallery_name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), gallery_name);
  // @@protoc_insertion_point(field_set_allocated:GalleryDeleteRequest.gallery_name)
}

// -------------------------------------------------------------------

// EnrollmentListRequest

// string gallery_name = 1;
inline void EnrollmentListRequest::clear_gallery_name() {
  gallery_name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& EnrollmentListRequest::gallery_name() const {
  // @@protoc_insertion_point(field_get:EnrollmentListRequest.gallery_name)
  return gallery_name_.GetNoArena();
}
inline void EnrollmentListRequest::set_gallery_name(const std::string& value) {
  
  gallery_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:EnrollmentListRequest.gallery_name)
}
inline void EnrollmentListRequest::set_gallery_name(std::string&& value) {
  
  gallery_name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:EnrollmentListRequest.gallery_name)
}
inline void EnrollmentListRequest::set_gallery_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  gallery_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:EnrollmentListRequest.gallery_name)
}
inline void EnrollmentListRequest::set_gallery_name(const char* value, size_t size) {
  
  gallery_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:EnrollmentListRequest.gallery_name)
}
inline std::string* EnrollmentListRequest::mutable_gallery_name() {
  
  // @@protoc_insertion_point(field_mutable:EnrollmentListRequest.gallery_name)
  return gallery_name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* EnrollmentListRequest::release_gallery_name() {
  // @@protoc_insertion_point(field_release:EnrollmentListRequest.gallery_name)
  
  return gallery_name_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void EnrollmentListRequest::set_allocated_gallery_name(std::string* gallery_name) {
  if (gallery_name != nullptr) {
    
  } else {
    
  }
  gallery_name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), gallery_name);
  // @@protoc_insertion_point(field_set_allocated:EnrollmentListRequest.gallery_name)
}

// -------------------------------------------------------------------

// EnrollmentInfo

// string subject_id = 1;
inline void EnrollmentInfo::clear_subject_id() {
  subject_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& EnrollmentInfo::subject_id() const {
  // @@protoc_insertion_point(field_get:EnrollmentInfo.subject_id)
  return subject_id_.GetNoArena();
}
inline void EnrollmentInfo::set_subject_id(const std::string& value) {
  
  subject_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:EnrollmentInfo.subject_id)
}
inline void EnrollmentInfo::set_subject_id(std::string&& value) {
  
  subject_id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:EnrollmentInfo.subject_id)
}
inline void EnrollmentInfo::set_subject_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  subject_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:EnrollmentInfo.subject_id)
}
inline void EnrollmentInfo::set_subject_id(const char* value, size_t size) {
  
  subject_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:EnrollmentInfo.subject_id)
}
inline std::string* EnrollmentInfo::mutable_subject_id() {
  
  // @@protoc_insertion_point(field_mutable:EnrollmentInfo.subject_id)
  return subject_id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* EnrollmentInfo::release_subject_id() {
  // @@protoc_insertion_point(field_release:EnrollmentInfo.subject_id)
  
  return subject_id_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void EnrollmentInfo::set_allocated_subject_id(std::string* subject_id) {
  if (subject_id != nullptr) {
    
  } else {
    
  }
  subject_id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), subject_id);
  // @@protoc_insertion_point(field_set_allocated:EnrollmentInfo.subject_id)
}

// string name = 2;
inline void EnrollmentInfo::clear_name() {
  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& EnrollmentInfo::name() const {
  // @@protoc_insertion_point(field_get:EnrollmentInfo.name)
  return name_.GetNoArena();
}
inline void EnrollmentInfo::set_name(const std::string& value) {
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:EnrollmentInfo.name)
}
inline void EnrollmentInfo::set_name(std::string&& value) {
  
  name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:EnrollmentInfo.name)
}
inline void EnrollmentInfo::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:EnrollmentInfo.name)
}
inline void EnrollmentInfo::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:EnrollmentInfo.name)
}
inline std::string* EnrollmentInfo::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:EnrollmentInfo.name)
  return name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* EnrollmentInfo::release_name() {
  // @@protoc_insertion_point(field_release:EnrollmentInfo.name)
  
  return name_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void EnrollmentInfo::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:EnrollmentInfo.name)
}

// int32 face_count = 3;
inline void EnrollmentInfo::clear_face_count() {
  face_count_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 EnrollmentInfo::face_count() const {
  // @@protoc_insertion_point(field_get:EnrollmentInfo.face_count)
  return face_count_;
}
inline void EnrollmentInfo::set_face_count(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  face_count_ = value;
  // @@protoc_insertion_point(field_set:EnrollmentInfo.face_count)
}

// -------------------------------------------------------------------

// EnrollmentListResponse

// string gallery_name = 1;
inline void EnrollmentListResponse::clear_gallery_name() {
  gallery_name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& EnrollmentListResponse::gallery_name() const {
  // @@protoc_insertion_point(field_get:EnrollmentListResponse.gallery_name)
  return gallery_name_.GetNoArena();
}
inline void EnrollmentListResponse::set_gallery_name(const std::string& value) {
  
  gallery_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:EnrollmentListResponse.gallery_name)
}
inline void EnrollmentListResponse::set_gallery_name(std::string&& value) {
  
  gallery_name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:EnrollmentListResponse.gallery_name)
}
inline void EnrollmentListResponse::set_gallery_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  gallery_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:EnrollmentListResponse.gallery_name)
}
inline void EnrollmentListResponse::set_gallery_name(const char* value, size_t size) {
  
  gallery_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:EnrollmentListResponse.gallery_name)
}
inline std::string* EnrollmentListResponse::mutable_gallery_name() {
  
  // @@protoc_insertion_point(field_mutable:EnrollmentListResponse.gallery_name)
  return gallery_name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* EnrollmentListResponse::release_gallery_name() {
  // @@protoc_insertion_point(field_release:EnrollmentListResponse.gallery_name)
  
  return gallery_name_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void EnrollmentListResponse::set_allocated_gallery_name(std::string* gallery_name) {
  if (gallery_name != nullptr) {
    
  } else {
    
  }
  gallery_name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), gallery_name);
  // @@protoc_insertion_point(field_set_allocated:EnrollmentListResponse.gallery_name)
}

// repeated .EnrollmentInfo enrollments = 2;
inline int EnrollmentListResponse::enrollments_size() const {
  return enrollments_.size();
}
inline void EnrollmentListResponse::clear_enrollments() {
  enrollments_.Clear();
}
inline ::EnrollmentInfo* EnrollmentListResponse::mutable_enrollments(int index) {
  // @@protoc_insertion_point(field_mutable:EnrollmentListResponse.enrollments)
  return enrollments_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::EnrollmentInfo >*
EnrollmentListResponse::mutable_enrollments() {
  // @@protoc_insertion_point(field_mutable_list:EnrollmentListResponse.enrollments)
  return &enrollments_;
}
inline const ::EnrollmentInfo& EnrollmentListResponse::enrollments(int index) const {
  // @@protoc_insertion_point(field_get:EnrollmentListResponse.enrollments)
  return enrollments_.Get(index);
}
inline ::EnrollmentInfo* EnrollmentListResponse::add_enrollments() {
  // @@protoc_insertion_point(field_add:EnrollmentListResponse.enrollments)
  return enrollments_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::EnrollmentInfo >&
EnrollmentListResponse::enrollments() const {
  // @@protoc_insertion_point(field_list:EnrollmentListResponse.enrollments)
  return enrollments_;
}

// -------------------------------------------------------------------

// EnrollmentDeleteRequest

// string gallery_name = 1;
inline void EnrollmentDeleteRequest::clear_gallery_name() {
  gallery_name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& EnrollmentDeleteRequest::gallery_name() const {
  // @@protoc_insertion_point(field_get:EnrollmentDeleteRequest.gallery_name)
  return gallery_name_.GetNoArena();
}
inline void EnrollmentDeleteRequest::set_gallery_name(const std::string& value) {
  
  gallery_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:EnrollmentDeleteRequest.gallery_name)
}
inline void EnrollmentDeleteRequest::set_gallery_name(std::string&& value) {
  
  gallery_name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:EnrollmentDeleteRequest.gallery_name)
}
inline void EnrollmentDeleteRequest::set_gallery_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  gallery_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:EnrollmentDeleteRequest.gallery_name)
}
inline void EnrollmentDeleteRequest::set_gallery_name(const char* value, size_t size) {
  
  gallery_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:EnrollmentDeleteRequest.gallery_name)
}
inline std::string* EnrollmentDeleteRequest::mutable_gallery_name() {
  
  // @@protoc_insertion_point(field_mutable:EnrollmentDeleteRequest.gallery_name)
  return gallery_name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* EnrollmentDeleteRequest::release_gallery_name() {
  // @@protoc_insertion_point(field_release:EnrollmentDeleteRequest.gallery_name)
  
  return gallery_name_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void EnrollmentDeleteRequest::set_allocated_gallery_name(std::string* gallery_name) {
  if (gallery_name != nullptr) {
    
  } else {
    
  }
  gallery_name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), gallery_name);
  // @@protoc_insertion_point(field_set_allocated:EnrollmentDeleteRequest.gallery_name)
}

// string subject_id = 2;
inline void EnrollmentDeleteRequest::clear_subject_id() {
  subject_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& EnrollmentDeleteRequest::subject_id() const {
  // @@protoc_insertion_point(field_get:EnrollmentDeleteRequest.subject_id)
  return subject_id_.GetNoArena();
}
inline void EnrollmentDeleteRequest::set_subject_id(const std::string& value) {
  
  subject_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:EnrollmentDeleteRequest.subject_id)
}
inline void EnrollmentDeleteRequest::set_subject_id(std::string&& value) {
  
  subject_id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:EnrollmentDeleteRequest.subject_id)
}
inline void EnrollmentDeleteRequest::set_subject_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  subject_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:EnrollmentDeleteRequest.subject_id)
}
inline void EnrollmentDeleteRequest::set_subject_id(const char* value, size_t size) {
  
  subject_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:EnrollmentDeleteRequest.subject_id)
}
inline std::string* EnrollmentDeleteRequest::mutable_subject_id() {
  
  // @@protoc_insertion_point(field_mutable:EnrollmentDeleteRequest.subject_id)
  return subject_id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* EnrollmentDeleteRequest::release_subject_id() {
  // @@protoc_insertion_point(field_release:EnrollmentDeleteRequest.subject_id)
  
  return subject_id_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void EnrollmentDeleteRequest::set_allocated_subject_id(std::string* subject_id) {
  if (subject_id != nullptr) {
    
  } else {
    
  }
  subject_id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), subject_id);
  // @@protoc_insertion_point(field_set_allocated:EnrollmentDeleteRequest.subject_id)
}

// -------------------------------------------------------------------

// GalleryInfo

// string gallery_name = 1;
inline void GalleryInfo::clear_gallery_name() {
  gallery_name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& GalleryInfo::gallery_name() const {
  // @@protoc_insertion_point(field_get:GalleryInfo.gallery_name)
  return gallery_name_.GetNoArena();
}
inline void GalleryInfo::set_gallery_name(const std::string& value) {
  
  gallery_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:GalleryInfo.gallery_name)
}
inline void GalleryInfo::set_gallery_name(std::string&& value) {
  
  gallery_name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:GalleryInfo.gallery_name)
}
inline void GalleryInfo::set_gallery_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  gallery_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:GalleryInfo.gallery_name)
}
inline void GalleryInfo::set_gallery_name(const char* value, size_t size) {
  
  gallery_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:GalleryInfo.gallery_name)
}
inline std::string* GalleryInfo::mutable_gallery_name() {
  
  // @@protoc_insertion_point(field_mutable:GalleryInfo.gallery_name)
  return gallery_name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* GalleryInfo::release_gallery_name() {
  // @@protoc_insertion_point(field_release:GalleryInfo.gallery_name)
  
  return gallery_name_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void GalleryInfo::set_allocated_gallery_name(std::string* gallery_name) {
  if (gallery_name != nullptr) {
    
  } else {
    
  }
  gallery_name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), gallery_name);
  // @@protoc_insertion_point(field_set_allocated:GalleryInfo.gallery_name)
}

// int64 face_count = 2;
inline void GalleryInfo::clear_face_count() {
  face_count_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 GalleryInfo::face_count() const {
  // @@protoc_insertion_point(field_get:GalleryInfo.face_count)
  return face_count_;
}
inline void GalleryInfo::set_face_count(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  face_count_ = value;
  // @@protoc_insertion_point(field_set:GalleryInfo.face_count)
}

// -------------------------------------------------------------------

// GalleryList

// repeated .GalleryInfo galleries = 1;
inline int GalleryList::galleries_size() const {
  return galleries_.size();
}
inline void GalleryList::clear_galleries() {
  galleries_.Clear();
}
inline ::GalleryInfo* GalleryList::mutable_galleries(int index) {
  // @@protoc_insertion_point(field_mutable:GalleryList.galleries)
  return galleries_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::GalleryInfo >*
GalleryList::mutable_galleries() {
  // @@protoc_insertion_point(field_mutable_list:GalleryList.galleries)
  return &galleries_;
}
inline const ::GalleryInfo& GalleryList::galleries(int index) const {
  // @@protoc_insertion_point(field_get:GalleryList.galleries)
  return galleries_.Get(index);
}
inline ::GalleryInfo* GalleryList::add_galleries() {
  // @@protoc_insertion_point(field_add:GalleryList.galleries)
  return galleries_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::GalleryInfo >&
GalleryList::galleries() const {
  // @@protoc_insertion_point(field_list:GalleryList.galleries)
  return galleries_;
}

// -------------------------------------------------------------------

// Empty

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::ServiceStatus> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::ServiceStatus>() {
  return ::ServiceStatus_descriptor();
}
template <> struct is_proto_enum< ::DataType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::DataType>() {
  return ::DataType_descriptor();
}
template <> struct is_proto_enum< ::ScoreType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::ScoreType>() {
  return ::ScoreType_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_faro_2fproto_2fface_5fservice_2eproto
