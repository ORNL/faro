/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

goog.provide('proto.Image');
goog.provide('proto.Image.DataType');

goog.require('jspb.BinaryReader');
goog.require('jspb.BinaryWriter');
goog.require('jspb.Message');

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Image = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.Image, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.Image.displayName = 'proto.Image';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Image.prototype.toObject = function(opt_includeInstance) {
  return proto.Image.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Image} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Image.toObject = function(includeInstance, msg) {
  var f, obj = {
    width: jspb.Message.getFieldWithDefault(msg, 1, 0),
    height: jspb.Message.getFieldWithDefault(msg, 2, 0),
    channels: jspb.Message.getFieldWithDefault(msg, 3, 0),
    type: jspb.Message.getFieldWithDefault(msg, 4, 0),
    description: jspb.Message.getFieldWithDefault(msg, 5, ""),
    data: msg.getData_asB64(),
    date: jspb.Message.getFieldWithDefault(msg, 8, ""),
    time: jspb.Message.getFieldWithDefault(msg, 9, ""),
    module: jspb.Message.getFieldWithDefault(msg, 10, 0),
    camera: jspb.Message.getFieldWithDefault(msg, 11, 0),
    event: jspb.Message.getFieldWithDefault(msg, 12, 0),
    imageNum: jspb.Message.getFieldWithDefault(msg, 13, 0),
    exposureTime: jspb.Message.getFloatingPointFieldWithDefault(msg, 14, 0.0),
    gainRaw: jspb.Message.getFloatingPointFieldWithDefault(msg, 15, 0.0),
    fStop: jspb.Message.getFloatingPointFieldWithDefault(msg, 16, 0.0),
    ndFilter: jspb.Message.getFloatingPointFieldWithDefault(msg, 17, 0.0),
    polarizerAng: jspb.Message.getFloatingPointFieldWithDefault(msg, 18, 0.0),
    source: jspb.Message.getFieldWithDefault(msg, 19, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Image}
 */
proto.Image.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Image;
  return proto.Image.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Image} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Image}
 */
proto.Image.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setWidth(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setHeight(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setChannels(value);
      break;
    case 4:
      var value = /** @type {!proto.Image.DataType} */ (reader.readEnum());
      msg.setType(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setDescription(value);
      break;
    case 6:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setData(value);
      break;
    case 8:
      var value = /** @type {string} */ (reader.readString());
      msg.setDate(value);
      break;
    case 9:
      var value = /** @type {string} */ (reader.readString());
      msg.setTime(value);
      break;
    case 10:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setModule(value);
      break;
    case 11:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setCamera(value);
      break;
    case 12:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setEvent(value);
      break;
    case 13:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setImageNum(value);
      break;
    case 14:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setExposureTime(value);
      break;
    case 15:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setGainRaw(value);
      break;
    case 16:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setFStop(value);
      break;
    case 17:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setNdFilter(value);
      break;
    case 18:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setPolarizerAng(value);
      break;
    case 19:
      var value = /** @type {string} */ (reader.readString());
      msg.setSource(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Image.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.Image.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Image} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Image.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getWidth();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getHeight();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
  f = message.getChannels();
  if (f !== 0) {
    writer.writeInt32(
      3,
      f
    );
  }
  f = message.getType();
  if (f !== 0.0) {
    writer.writeEnum(
      4,
      f
    );
  }
  f = message.getDescription();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = message.getData_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      6,
      f
    );
  }
  f = message.getDate();
  if (f.length > 0) {
    writer.writeString(
      8,
      f
    );
  }
  f = message.getTime();
  if (f.length > 0) {
    writer.writeString(
      9,
      f
    );
  }
  f = message.getModule();
  if (f !== 0) {
    writer.writeInt32(
      10,
      f
    );
  }
  f = message.getCamera();
  if (f !== 0) {
    writer.writeInt32(
      11,
      f
    );
  }
  f = message.getEvent();
  if (f !== 0) {
    writer.writeInt32(
      12,
      f
    );
  }
  f = message.getImageNum();
  if (f !== 0) {
    writer.writeInt32(
      13,
      f
    );
  }
  f = message.getExposureTime();
  if (f !== 0.0) {
    writer.writeFloat(
      14,
      f
    );
  }
  f = message.getGainRaw();
  if (f !== 0.0) {
    writer.writeFloat(
      15,
      f
    );
  }
  f = message.getFStop();
  if (f !== 0.0) {
    writer.writeFloat(
      16,
      f
    );
  }
  f = message.getNdFilter();
  if (f !== 0.0) {
    writer.writeFloat(
      17,
      f
    );
  }
  f = message.getPolarizerAng();
  if (f !== 0.0) {
    writer.writeFloat(
      18,
      f
    );
  }
  f = message.getSource();
  if (f.length > 0) {
    writer.writeString(
      19,
      f
    );
  }
};


/**
 * @enum {number}
 */
proto.Image.DataType = {
  UINT8: 0,
  UINT16: 1,
  FLOAT32: 2
};

/**
 * optional int32 width = 1;
 * @return {number}
 */
proto.Image.prototype.getWidth = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.Image.prototype.setWidth = function(value) {
  jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional int32 height = 2;
 * @return {number}
 */
proto.Image.prototype.getHeight = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.Image.prototype.setHeight = function(value) {
  jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional int32 channels = 3;
 * @return {number}
 */
proto.Image.prototype.getChannels = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.Image.prototype.setChannels = function(value) {
  jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional DataType type = 4;
 * @return {!proto.Image.DataType}
 */
proto.Image.prototype.getType = function() {
  return /** @type {!proto.Image.DataType} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/** @param {!proto.Image.DataType} value */
proto.Image.prototype.setType = function(value) {
  jspb.Message.setProto3EnumField(this, 4, value);
};


/**
 * optional string description = 5;
 * @return {string}
 */
proto.Image.prototype.getDescription = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/** @param {string} value */
proto.Image.prototype.setDescription = function(value) {
  jspb.Message.setProto3StringField(this, 5, value);
};


/**
 * optional bytes data = 6;
 * @return {string}
 */
proto.Image.prototype.getData = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/**
 * optional bytes data = 6;
 * This is a type-conversion wrapper around `getData()`
 * @return {string}
 */
proto.Image.prototype.getData_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getData()));
};


/**
 * optional bytes data = 6;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getData()`
 * @return {!Uint8Array}
 */
proto.Image.prototype.getData_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getData()));
};


/** @param {!(string|Uint8Array)} value */
proto.Image.prototype.setData = function(value) {
  jspb.Message.setProto3BytesField(this, 6, value);
};


/**
 * optional string date = 8;
 * @return {string}
 */
proto.Image.prototype.getDate = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 8, ""));
};


/** @param {string} value */
proto.Image.prototype.setDate = function(value) {
  jspb.Message.setProto3StringField(this, 8, value);
};


/**
 * optional string time = 9;
 * @return {string}
 */
proto.Image.prototype.getTime = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 9, ""));
};


/** @param {string} value */
proto.Image.prototype.setTime = function(value) {
  jspb.Message.setProto3StringField(this, 9, value);
};


/**
 * optional int32 module = 10;
 * @return {number}
 */
proto.Image.prototype.getModule = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 10, 0));
};


/** @param {number} value */
proto.Image.prototype.setModule = function(value) {
  jspb.Message.setProto3IntField(this, 10, value);
};


/**
 * optional int32 camera = 11;
 * @return {number}
 */
proto.Image.prototype.getCamera = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 11, 0));
};


/** @param {number} value */
proto.Image.prototype.setCamera = function(value) {
  jspb.Message.setProto3IntField(this, 11, value);
};


/**
 * optional int32 event = 12;
 * @return {number}
 */
proto.Image.prototype.getEvent = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 12, 0));
};


/** @param {number} value */
proto.Image.prototype.setEvent = function(value) {
  jspb.Message.setProto3IntField(this, 12, value);
};


/**
 * optional int32 image_num = 13;
 * @return {number}
 */
proto.Image.prototype.getImageNum = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 13, 0));
};


/** @param {number} value */
proto.Image.prototype.setImageNum = function(value) {
  jspb.Message.setProto3IntField(this, 13, value);
};


/**
 * optional float exposure_time = 14;
 * @return {number}
 */
proto.Image.prototype.getExposureTime = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 14, 0.0));
};


/** @param {number} value */
proto.Image.prototype.setExposureTime = function(value) {
  jspb.Message.setProto3FloatField(this, 14, value);
};


/**
 * optional float gain_raw = 15;
 * @return {number}
 */
proto.Image.prototype.getGainRaw = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 15, 0.0));
};


/** @param {number} value */
proto.Image.prototype.setGainRaw = function(value) {
  jspb.Message.setProto3FloatField(this, 15, value);
};


/**
 * optional float f_stop = 16;
 * @return {number}
 */
proto.Image.prototype.getFStop = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 16, 0.0));
};


/** @param {number} value */
proto.Image.prototype.setFStop = function(value) {
  jspb.Message.setProto3FloatField(this, 16, value);
};


/**
 * optional float nd_filter = 17;
 * @return {number}
 */
proto.Image.prototype.getNdFilter = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 17, 0.0));
};


/** @param {number} value */
proto.Image.prototype.setNdFilter = function(value) {
  jspb.Message.setProto3FloatField(this, 17, value);
};


/**
 * optional float polarizer_ang = 18;
 * @return {number}
 */
proto.Image.prototype.getPolarizerAng = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 18, 0.0));
};


/** @param {number} value */
proto.Image.prototype.setPolarizerAng = function(value) {
  jspb.Message.setProto3FloatField(this, 18, value);
};


/**
 * optional string source = 19;
 * @return {string}
 */
proto.Image.prototype.getSource = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 19, ""));
};


/** @param {string} value */
proto.Image.prototype.setSource = function(value) {
  jspb.Message.setProto3StringField(this, 19, value);
};


