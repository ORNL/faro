<?php
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: faro/proto/face_service.proto

/**
 * Protobuf type <code>DataType</code>
 */
class DataType
{
    /**
     * Generated from protobuf enum <code>EMPTY = 0;</code>
     */
    const PBEMPTY = 0;
    /**
     * Generated from protobuf enum <code>STRING = 1;</code>
     */
    const STRING = 1;
    /**
     * stored as string
     *
     * Generated from protobuf enum <code>INT = 2;</code>
     */
    const INT = 2;
    /**
     * stored as string
     *
     * Generated from protobuf enum <code>FLOAT = 3;</code>
     */
    const FLOAT = 3;
    /**
     * raw data
     *
     * Generated from protobuf enum <code>BYTES = 4;</code>
     */
    const BYTES = 4;
    /**
     * floating point values seperated by commas
     *
     * Generated from protobuf enum <code>VECTOR = 5;</code>
     */
    const VECTOR = 5;
    /**
     * Generated from protobuf enum <code>PICKLE = 6;</code>
     */
    const PICKLE = 6;
    /**
     * Generated from protobuf enum <code>XML = 7;</code>
     */
    const XML = 7;
    /**
     * Generated from protobuf enum <code>JSON = 8;</code>
     */
    const JSON = 8;

    private static $valueToName = [
        self::PBEMPTY => 'PBEMPTY',
        self::STRING => 'STRING',
        self::INT => 'INT',
        self::FLOAT => 'FLOAT',
        self::BYTES => 'BYTES',
        self::VECTOR => 'VECTOR',
        self::PICKLE => 'PICKLE',
        self::XML => 'XML',
        self::JSON => 'JSON',
    ];

    public static function name($value)
    {
        if (!isset(self::$valueToName[$value])) {
            throw new UnexpectedValueException(sprintf(
                    'Enum %s has no name defined for value %s', __CLASS__, $value));
        }
        return self::$valueToName[$value];
    }


    public static function value($name)
    {
        $const = __CLASS__ . '::' . strtoupper($name);
        if (!defined($const)) {
            throw new UnexpectedValueException(sprintf(
                    'Enum %s has no value defined for name %s', __CLASS__, $name));
        }
        return constant($const);
    }
}

