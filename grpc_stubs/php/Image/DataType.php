<?php
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: faro/proto/image.proto

namespace Image;

use UnexpectedValueException;

/**
 * Protobuf type <code>Image.DataType</code>
 */
class DataType
{
    /**
     * Generated from protobuf enum <code>UINT8 = 0;</code>
     */
    const UINT8 = 0;
    /**
     * Generated from protobuf enum <code>UINT16 = 1;</code>
     */
    const UINT16 = 1;
    /**
     * Generated from protobuf enum <code>FLOAT32 = 2;</code>
     */
    const FLOAT32 = 2;
    /**
     * Generated from protobuf enum <code>URL = 3;</code>
     */
    const URL = 3;
    /**
     * Generated from protobuf enum <code>PNG = 4;</code>
     */
    const PNG = 4;
    /**
     * Generated from protobuf enum <code>JPG = 5;</code>
     */
    const JPG = 5;

    private static $valueToName = [
        self::UINT8 => 'UINT8',
        self::UINT16 => 'UINT16',
        self::FLOAT32 => 'FLOAT32',
        self::URL => 'URL',
        self::PNG => 'PNG',
        self::JPG => 'JPG',
    ];

    public static function name($value)
    {
        if (!isset(self::$valueToName[$value])) {
            throw new UnexpectedValueException(sprintf(
                    'Enum %s has no name defined for value %s', __CLASS__, $value));
        }
        return self::$valueToName[$value];
    }


    public static function value($name)
    {
        $const = __CLASS__ . '::' . strtoupper($name);
        if (!defined($const)) {
            throw new UnexpectedValueException(sprintf(
                    'Enum %s has no value defined for name %s', __CLASS__, $name));
        }
        return constant($const);
    }
}

// Adding a class alias for backwards compatibility with the previous class name.
class_alias(DataType::class, \Image_DataType::class);

