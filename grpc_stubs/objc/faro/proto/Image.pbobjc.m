// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: faro/proto/image.proto

// This CPP symbol can be defined to use imports that match up to the framework
// imports needed when using CocoaPods.
#if !defined(GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS)
 #define GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS 0
#endif

#if GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS
 #import <Protobuf/GPBProtocolBuffers_RuntimeSupport.h>
#else
 #import "GPBProtocolBuffers_RuntimeSupport.h"
#endif

#import <stdatomic.h>

#import "faro/proto/Image.pbobjc.h"
// @@protoc_insertion_point(imports)

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"

#pragma mark - ImageRoot

@implementation ImageRoot

// No extensions in the file and no imports, so no need to generate
// +extensionRegistry.

@end

#pragma mark - ImageRoot_FileDescriptor

static GPBFileDescriptor *ImageRoot_FileDescriptor(void) {
  // This is called by +initialize so there is no need to worry
  // about thread safety of the singleton.
  static GPBFileDescriptor *descriptor = NULL;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    descriptor = [[GPBFileDescriptor alloc] initWithPackage:@""
                                                     syntax:GPBFileSyntaxProto3];
  }
  return descriptor;
}

#pragma mark - Image

@implementation Image

@dynamic width;
@dynamic height;
@dynamic channels;
@dynamic type;
@dynamic description_p;
@dynamic data_p;
@dynamic date;
@dynamic time;
@dynamic module;
@dynamic camera;
@dynamic event;
@dynamic imageNum;
@dynamic exposureTime;
@dynamic gainRaw;
@dynamic fStop;
@dynamic ndFilter;
@dynamic polarizerAng;
@dynamic source;

typedef struct Image__storage_ {
  uint32_t _has_storage_[1];
  int32_t width;
  int32_t height;
  int32_t channels;
  Image_DataType type;
  int32_t module;
  int32_t camera;
  int32_t event;
  int32_t imageNum;
  float exposureTime;
  float gainRaw;
  float fStop;
  float ndFilter;
  float polarizerAng;
  NSString *description_p;
  NSData *data_p;
  NSString *date;
  NSString *time;
  NSString *source;
} Image__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "width",
        .dataTypeSpecific.className = NULL,
        .number = Image_FieldNumber_Width,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(Image__storage_, width),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "height",
        .dataTypeSpecific.className = NULL,
        .number = Image_FieldNumber_Height,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(Image__storage_, height),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "channels",
        .dataTypeSpecific.className = NULL,
        .number = Image_FieldNumber_Channels,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(Image__storage_, channels),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "type",
        .dataTypeSpecific.enumDescFunc = Image_DataType_EnumDescriptor,
        .number = Image_FieldNumber_Type,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(Image__storage_, type),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "description_p",
        .dataTypeSpecific.className = NULL,
        .number = Image_FieldNumber_Description_p,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(Image__storage_, description_p),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "data_p",
        .dataTypeSpecific.className = NULL,
        .number = Image_FieldNumber_Data_p,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(Image__storage_, data_p),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBytes,
      },
      {
        .name = "date",
        .dataTypeSpecific.className = NULL,
        .number = Image_FieldNumber_Date,
        .hasIndex = 6,
        .offset = (uint32_t)offsetof(Image__storage_, date),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "time",
        .dataTypeSpecific.className = NULL,
        .number = Image_FieldNumber_Time,
        .hasIndex = 7,
        .offset = (uint32_t)offsetof(Image__storage_, time),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "module",
        .dataTypeSpecific.className = NULL,
        .number = Image_FieldNumber_Module,
        .hasIndex = 8,
        .offset = (uint32_t)offsetof(Image__storage_, module),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "camera",
        .dataTypeSpecific.className = NULL,
        .number = Image_FieldNumber_Camera,
        .hasIndex = 9,
        .offset = (uint32_t)offsetof(Image__storage_, camera),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "event",
        .dataTypeSpecific.className = NULL,
        .number = Image_FieldNumber_Event,
        .hasIndex = 10,
        .offset = (uint32_t)offsetof(Image__storage_, event),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "imageNum",
        .dataTypeSpecific.className = NULL,
        .number = Image_FieldNumber_ImageNum,
        .hasIndex = 11,
        .offset = (uint32_t)offsetof(Image__storage_, imageNum),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "exposureTime",
        .dataTypeSpecific.className = NULL,
        .number = Image_FieldNumber_ExposureTime,
        .hasIndex = 12,
        .offset = (uint32_t)offsetof(Image__storage_, exposureTime),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeFloat,
      },
      {
        .name = "gainRaw",
        .dataTypeSpecific.className = NULL,
        .number = Image_FieldNumber_GainRaw,
        .hasIndex = 13,
        .offset = (uint32_t)offsetof(Image__storage_, gainRaw),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeFloat,
      },
      {
        .name = "fStop",
        .dataTypeSpecific.className = NULL,
        .number = Image_FieldNumber_FStop,
        .hasIndex = 14,
        .offset = (uint32_t)offsetof(Image__storage_, fStop),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeFloat,
      },
      {
        .name = "ndFilter",
        .dataTypeSpecific.className = NULL,
        .number = Image_FieldNumber_NdFilter,
        .hasIndex = 15,
        .offset = (uint32_t)offsetof(Image__storage_, ndFilter),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeFloat,
      },
      {
        .name = "polarizerAng",
        .dataTypeSpecific.className = NULL,
        .number = Image_FieldNumber_PolarizerAng,
        .hasIndex = 16,
        .offset = (uint32_t)offsetof(Image__storage_, polarizerAng),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeFloat,
      },
      {
        .name = "source",
        .dataTypeSpecific.className = NULL,
        .number = Image_FieldNumber_Source,
        .hasIndex = 17,
        .offset = (uint32_t)offsetof(Image__storage_, source),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[Image class]
                                     rootClass:[ImageRoot class]
                                          file:ImageRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(Image__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t Image_Type_RawValue(Image *message) {
  GPBDescriptor *descriptor = [Image descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:Image_FieldNumber_Type];
  return GPBGetMessageInt32Field(message, field);
}

void SetImage_Type_RawValue(Image *message, int32_t value) {
  GPBDescriptor *descriptor = [Image descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:Image_FieldNumber_Type];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

#pragma mark - Enum Image_DataType

GPBEnumDescriptor *Image_DataType_EnumDescriptor(void) {
  static _Atomic(GPBEnumDescriptor*) descriptor = nil;
  if (!descriptor) {
    static const char *valueNames =
        "Uint8\000Uint16\000Float32\000";
    static const int32_t values[] = {
        Image_DataType_Uint8,
        Image_DataType_Uint16,
        Image_DataType_Float32,
    };
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(Image_DataType)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:Image_DataType_IsValidValue];
    GPBEnumDescriptor *expected = nil;
    if (!atomic_compare_exchange_strong(&descriptor, &expected, worker)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL Image_DataType_IsValidValue(int32_t value__) {
  switch (value__) {
    case Image_DataType_Uint8:
    case Image_DataType_Uint16:
    case Image_DataType_Float32:
      return YES;
    default:
      return NO;
  }
}


#pragma clang diagnostic pop

// @@protoc_insertion_point(global_scope)
