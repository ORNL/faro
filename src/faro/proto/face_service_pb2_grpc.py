# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
import grpc

from faro.proto import face_service_pb2 as faro_dot_proto_dot_face__service__pb2
from faro.proto import geometry_pb2 as faro_dot_proto_dot_geometry__pb2


class FaceRecognitionStub(object):
  # missing associated documentation comment in .proto file
  pass

  def __init__(self, channel):
    """Constructor.

    Args:
      channel: A grpc.Channel.
    """
    self.status = channel.unary_unary(
        '/FaceRecognition/status',
        request_serializer=faro_dot_proto_dot_face__service__pb2.FaceStatusRequest.SerializeToString,
        response_deserializer=faro_dot_proto_dot_face__service__pb2.FaceServiceInfo.FromString,
        )
    self.detect = channel.unary_unary(
        '/FaceRecognition/detect',
        request_serializer=faro_dot_proto_dot_face__service__pb2.DetectionRequest.SerializeToString,
        response_deserializer=faro_dot_proto_dot_face__service__pb2.FaceRecordList.FromString,
        )
    self.extract = channel.unary_unary(
        '/FaceRecognition/extract',
        request_serializer=faro_dot_proto_dot_face__service__pb2.ExtractRequest.SerializeToString,
        response_deserializer=faro_dot_proto_dot_face__service__pb2.FaceRecordList.FromString,
        )
    self.score = channel.unary_unary(
        '/FaceRecognition/score',
        request_serializer=faro_dot_proto_dot_face__service__pb2.ScoreRequest.SerializeToString,
        response_deserializer=faro_dot_proto_dot_geometry__pb2.Matrix.FromString,
        )
    self.echo = channel.unary_unary(
        '/FaceRecognition/echo',
        request_serializer=faro_dot_proto_dot_geometry__pb2.Matrix.SerializeToString,
        response_deserializer=faro_dot_proto_dot_geometry__pb2.Matrix.FromString,
        )


class FaceRecognitionServicer(object):
  # missing associated documentation comment in .proto file
  pass

  def status(self, request, context):
    """Service info and defaults
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def detect(self, request, context):
    """Simple operations
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def extract(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def score(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def echo(self, request, context):
    """rpc enroll(EnrollRequest) returns (ErrorMessage){}; // Enroll faces in a gallery
    rpc search(SearchRequest) returns (SearchResponse){}; // Search a gallery

    Combined opperations
    rpc detectExtract(DetectionRequest) returns (FaceRecordList){};

    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')


def add_FaceRecognitionServicer_to_server(servicer, server):
  rpc_method_handlers = {
      'status': grpc.unary_unary_rpc_method_handler(
          servicer.status,
          request_deserializer=faro_dot_proto_dot_face__service__pb2.FaceStatusRequest.FromString,
          response_serializer=faro_dot_proto_dot_face__service__pb2.FaceServiceInfo.SerializeToString,
      ),
      'detect': grpc.unary_unary_rpc_method_handler(
          servicer.detect,
          request_deserializer=faro_dot_proto_dot_face__service__pb2.DetectionRequest.FromString,
          response_serializer=faro_dot_proto_dot_face__service__pb2.FaceRecordList.SerializeToString,
      ),
      'extract': grpc.unary_unary_rpc_method_handler(
          servicer.extract,
          request_deserializer=faro_dot_proto_dot_face__service__pb2.ExtractRequest.FromString,
          response_serializer=faro_dot_proto_dot_face__service__pb2.FaceRecordList.SerializeToString,
      ),
      'score': grpc.unary_unary_rpc_method_handler(
          servicer.score,
          request_deserializer=faro_dot_proto_dot_face__service__pb2.ScoreRequest.FromString,
          response_serializer=faro_dot_proto_dot_geometry__pb2.Matrix.SerializeToString,
      ),
      'echo': grpc.unary_unary_rpc_method_handler(
          servicer.echo,
          request_deserializer=faro_dot_proto_dot_geometry__pb2.Matrix.FromString,
          response_serializer=faro_dot_proto_dot_geometry__pb2.Matrix.SerializeToString,
      ),
  }
  generic_handler = grpc.method_handlers_generic_handler(
      'FaceRecognition', rpc_method_handlers)
  server.add_generic_rpc_handlers((generic_handler,))
