#! /usr/bin/env python

'''
MIT License

Copyright (c) 2019 Oak Ridge National Laboratory

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.

Created on Jul 18, 2018

@author: bolme
'''

from __future__ import print_function, division

import faro
import sys
import optparse
import csv
import pyvision as pv
#import faro.proto.face_service_pb2_grpc as fs
#import grpc
#import skimage
import skimage.io as skio
#import skimage.draw as draw
import faro.proto.proto_types as pt
#import faro.proto.face_service_pb2 as fsd
import os
#import pyvision as pv
import numpy as np
#import FaceAlgorithms
#import scipy.spatial as spat    
#import grpc._cython.cygrpc as cygrpc                                                            
import cv2
import time




def parseOptions():
    '''
    Parse command line arguments.
    '''
    args = ['probe_dir'] # Add the names of arguments here.
    n_args = len(args)
    args = " ".join(args)
    description = '''Scan a directory of images and recognize faces.'''
    epilog = '''Created by David Bolme - bolmeds@ornl.gov'''
    
    version = "0.0.0"
    
    # Setup the parser
    parser = optparse.OptionParser(usage='%s [OPTIONS] %s'%(sys.argv[0],args),version=version,description=description,epilog=epilog)

    # Here are some templates for standard option formats.
    #parser.add_option("-q", "--quiet", action="store_false", dest="verbose", default=True,
    #                 help="Decrease the verbosity of the program")

    parser.add_option("-v", "--verbose", action="store_true", dest="verbose", default=False,
                     help="Print out more program information.")
    
    #parser.add_option("-b", "--bool", action="store_true", dest="my_bool", default=False,
    #                  help="don't print status messages to stdout")
    
    parser.add_option("-b", "--best", action="store_true", dest="best", default=False,
                      help="Detect the 'best' highest scoring face in the image.")
    
    parser.add_option("--matches-only", action="store_true", dest="matches_only", default=False,
                      help="Only save files to the match file if they meet the threshold.")
    
    parser.add_option("--detect-only", action="store_true", dest="detect_only", default=False,
                      help="Only run detection.  Do not run template extraction or matching.")
    
    #parser.add_option( "-c","--choice", type="choice", choices=['c1','c2','c3'], dest="my_choice", default="c1",
    #                  help="Choose an option.")

    #parser.add_option( "-f","--float", type="float", dest="my_float", default=0.0,
    #                  help="A floating point value.")

    parser.add_option( "--match-thresh", type="float", dest="match_thresh", default=None,
                      help="The threshold for a match.")

    parser.add_option( "--detect-thresh", type="float", dest="detect_thresh", default=None,
                      help="The threshold for a detection.")

    #parser.add_option( "-i","--int", type="int", dest="my_int", default=0,
    #                  help="An integer value.")

    parser.add_option( "-n","--max-images", type="int", dest="max_images", default=None,
                      help="Process at N images and then stop.")

    parser.add_option( "--max-async", type="int", dest="max_async", default=faro.DEFAULT_MAX_ASYNC,
                      help="The maximum number of asyncronous call to make at a time. Default=%d"%faro.DEFAULT_MAX_ASYNC)

    parser.add_option( "--max-message-size", type="int", dest="max_message_size", default=faro.DEFAULT_MAX_MESSAGE_SIZE,
                      help="Maximum GRPC message size. Set to -1 for unlimited. Default=%d"%(faro.DEFAULT_MAX_MESSAGE_SIZE))

    parser.add_option( "--min-size", type="int", dest="min_size", default=64,
                      help="Faces with a height less that this will be ignored.")
    
    parser.add_option( "--resample-size", type="int", dest="resample_size", default=None,
                      help="Images will be scaled to have this maximum dimension.")
    
    #parser.add_option( "-s","--str", type="str", dest="my_str", default="default",
    #                  help="A string value.")

    parser.add_option( "--enroll", type="str", dest="enroll_gallery", default=None,
                      help="Enroll detected faces into a gallery.")
    
    parser.add_option( "--search", type="str", dest="search_gallery", default=None,
                      help="Search images for faces from a gallery.")
    
    parser.add_option( "--name", type="str", dest="subject_name", default=None,
                      help="Enroll detected faces into a gallery.")
    
    parser.add_option( "--subject-id", type="str", dest="subject_id", default=None,
                      help="Enroll detected faces into a gallery.")
    
    parser.add_option( "--search-log", type="str", dest="search_log", default=None,
                      help="Enroll detected faces into a gallery.")
    
    parser.add_option( "--detect-log", type="str", dest="detect_log", default=None,
                      help="A directory for detection images.")

    parser.add_option( "-f","--face-log", type="str", dest="face_log", default=None,
                      help="A directory for faces.")

    parser.add_option( "-m","--match-log", type="str", dest="match_log", default=None,
                      help="A directory to store matching faces.")

    parser.add_option( "-p", "--port", type="str", dest="detect_port", default="localhost:50030",
                      help="The port used for the recognition service.")

    parser.add_option( "--detect-port", type="str", dest="detect_port", default="localhost:50030",
                      help="The port used for the recognition service.")

    parser.add_option( "--recognition-port", type="str", dest="rec_port", default="localhost:50030",
                      help="The port used for the recognition service.")

    parser.add_option( "--same-person", type="str", dest="same_person", default=None,
                      help="Specifies a python function that returns true if the filenames indicate a match.  Example: lambda x,y: x[:5] == y[:5]")

    parser.add_option( "-s","--scores-csv", type="str", dest="scores_csv", default=None,
                      help="Save similarity scores to this file.")

    parser.add_option( "-d","--detections-csv", type="str", dest="detections_csv", default=None,
                      help="Save detection data to the file.")

    parser.add_option( "-a","--attributes-csv", type="str", dest="attributes_csv", default=None,
                      help="Save attributes data to the file.")


    # Parse the arguments and return the results.
    (options, args) = parser.parse_args()
    
    if len(args) != n_args:
        parser.print_help()
        print()
        print(( "Please supply exactly %d arguments."%n_args ))
        print()
        exit(-1)
        
    return options,args


def getFilesToProcess(args):
    images = []
    videos = []
    for each in args:
        if os.path.isfile(each) and pv.isImage(each):
            images.append(each)
        elif os.path.isfile(each) and pv.isVideo(each):
            videos.append(each)
        elif os.path.isdir(each):
            for path,dirs,files in os.walk(each):
                for filename in files:
                    filepath = os.path.join(path,filename)
                    if os.path.isfile(filepath) and pv.isImage(filepath):
                        images.append(filepath)
                    if os.path.isfile(filepath) and pv.isVideo(filepath):
                        videos.append(filepath)
        else:
            raise ValueError("Cannot determine filetype:"+each)
        
    print("Found %d images and %d videos."%(len(images),len(videos)))
                    
    return images,videos
    
# the main function.
if __name__ == '__main__':
    options,args = parseOptions()

    probes = args
    detections_csv_file = None
    detections_csv = None
    attributes_csv_file = None
    attributes_csv = None
    scores_csv_file = None
    scores_csv = None
    
        
    
    face_client = faro.FaceClient(options)
    
    is_ready,status = face_client.status(verbose=options.verbose)
    if not is_ready:
        print("ERROR: the face service is not ready.")
        print(status)
        exit(-1)
    else:
        print('Service Ready.')
        
    if options.match_thresh == None:
        options.match_thresh = status.match_threshold
        
    if options.match_thresh == None:
        options.detect_thresh = status.detect_threshold
        
    # Check support for large messages        
    #mat = face_client.echo(np.zeros((2000,2000),np.float32))

    
    
    
    if options.detections_csv is not None:
        detections_csv_file = open(options.detections_csv,'w')
        detections_csv = csv.writer(detections_csv_file)
        detections_csv.writerow(['path','detect_id','type','score','x','y','w','h'])
        detections_csv_file.flush()

    if options.attributes_csv is not None:
        attributes_csv_file = open(options.attributes_csv,'w')
        attributes_csv = csv.writer(attributes_csv_file)
        attributes_csv.writerow(['path','detect_id','score','x','y','w','h','attribute','value'])
        attributes_csv_file.flush()


    
    face_records = []
    face_features = []
    
    extract_start = time.time()
    extraction_results = []
    im_count = 0
    
    images,videos = getFilesToProcess(probes)
    for full_path in images:
        print( "Processing",full_path)
        im = cv2.imread(full_path)[:,:,::-1] # Convert to RGB
        print(im.shape)
        # Resample
        scale = 1.0
        inv_scale = 1.0
        if (options.resample_size is not None) and (options.resample_size < max(im.shape[0],im.shape[1])):
            h,w,_ = im.shape
            scale = options.resample_size/max(w,h)
            inv_scale = 1.0/scale
            w = int(scale*w)
            h = int(scale*h)
            im = cv2.resize(im,(w,h),cv2.INTER_AREA)
            
        
        #detections = face_client.detect(im,best=options.best,threshold=options.detect_thresh,min_size=options.min_size,run_async=True)
        #templates = face_client.extract(im,detections.result(),run_async=True).result()
    
        if options.detect_only:
            templates = face_client.detect(im,best=options.best,threshold=options.detect_thresh,min_size=options.min_size, run_async=True,source=full_path)
        else:
            templates = face_client.detectExtract(im,best=options.best,threshold=options.detect_thresh,min_size=options.min_size, run_async=True,source=full_path)
        #templates.result()
        extraction_results.append((templates,full_path))
            
    # Make sure the extraction finishes processing.
    tmp = []
    for templates,full_path in extraction_results:
        templates = templates.result()
        print("Faces Detected...",len(templates.face_records))
        tmp.append((templates,full_path))

        if options.enroll_gallery is not None:
            face_client.enroll(templates, options.enroll_gallery, subject_id=options.subject_id, subject_name=options.subject_name)
            
        if options.search_gallery is not None:
            results = face_client.search(templates, options.search_gallery, threshold=options.match_thresh)
            if options.search_log is not None:
                try:
                    os.makedirs(options.search_log)
                except:
                    pass
                
                im = pv.Image(full_path)
                filename = os.path.split(full_path)[-1]
                for face,matches in zip(templates.face_records,results.matches):
                    print('scores:',matches.scores)
                    face_rect = pt.rect_proto2pv(face.detection.location)
                    if len(matches.scores) > 0:
                        im.annotateRect(face_rect,color='yellow')
                        gal = matches.face_records[0]
                        loc = pv.Point(face_rect.x,face_rect.y+face_rect.h)
                        im.annotateLabel(loc+pv.Point(0,5), "Name: %s"%(gal.name,), color='yellow')
                        im.annotateLabel(loc+pv.Point(0,15), "Subject Id: %s"%(gal.subject_id,), color='yellow')
                        im.annotateLabel(loc+pv.Point(0,25), "Score: %0.4f"%(matches.scores[0],), color='yellow')
                        im.annotateLabel(loc+pv.Point(0,35), "Enrollment Source: %s"%(gal.source,), color='yellow')
                    else:
                        im.annotateRect(face_rect,color='gray')
                        
                pv.Image(im.asAnnotated()).save(os.path.join(options.search_log,filename))

    extraction_results = tmp
    del tmp
    extract_stop = time.time()
    for templates,full_path in extraction_results:
        #templates = templates.result() # Wait for calls to finish and then get the result of the async request
        #print( detections)
        filename = os.path.split(full_path)[-1]
        vis = pv.Image(full_path)

        if options.detect_log is not None:
            try:
                os.makedirs(options.detect_log)
            except:
                pass
            for each in templates.face_records:
                rect = pt.rect_proto2pv(each.detection.location)
                vis.annotateRect(rect)
                vis.annotateLabel(pv.Point(rect.x+5,rect.y+5),each.detection.detection_class)
                vis.annotateLabel(pv.Point(rect.x+5,rect.y+20),"Score: %0.4f"%(each.detection.score,), color='yellow')
            filename = os.path.split(full_path)[-1]
            out_name = os.path.splitext(filename)[0]+'_detections.jpg'
            out_path = os.path.join(options.detect_log,out_name)
            if options.verbose:
                print("    Saving Detections To:",out_path)
            try:
                vis.asAnnotated().save(out_path)
            except:
                print("    ERROR: Could not save image: %s"%(out_path,))
        i = 0
        for face_record in templates.face_records:
            face_record.source = full_path
            
            if options.verbose:
                print("   ",face_record.source,face_record.detection.detection_id,face_record.detection.score)
            if detections_csv is not None:
                detections_csv.writerow([face_record.source,face_record.detection.detection_id,face_record.detection.detection_class,face_record.detection.score,
                                         inv_scale*face_record.detection.location.x,inv_scale*face_record.detection.location.y,
                                         inv_scale*face_record.detection.location.width,inv_scale*face_record.detection.location.height])
                detections_csv_file.flush()
                
            if attributes_csv is not None:
                attributes = list(face_record.attributes)
                attributes.sort(key=lambda x: x.key)
                for each in attributes:
                    key = each.key
                    value = each.fvalue
                    attributes_csv.writerow([face_record.source,face_record.detection.detection_id,face_record.detection.score,
                                             inv_scale*face_record.detection.location.x,inv_scale*face_record.detection.location.y,
                                             inv_scale*face_record.detection.location.width,inv_scale*face_record.detection.location.height,key,value])
                attributes_csv_file.flush()
                
            face_records.append(face_record)
            face_features.append(pt.vector_proto2np(face_record.template.data))
            
            if options.face_log is not None:
                try:
                    os.makedirs(options.face_log)
                except:
                    pass
                rect = pt.rect_proto2pv(face_record.detection.location)
                tile = pv.AffineFromRect(rect,(256,256))(vis)

                # display the attributes if the output was requested.
                loc = 0
                if options.attributes_csv is not None:
                    attributes = list(face_record.attributes)
                    attributes.sort(key=lambda x: x.key)
                    for each in attributes:
                        key = each.key
                        value = each.fvalue
                        tile.annotateLabel(pv.Point(10,10+loc),"%s: %0.3f"%(key,value))
                        loc += 10
                    tile = pv.Image(tile.asAnnotated())

                out_name = os.path.splitext(filename)[0]+'_face%03d.png'%face_record.detection.detection_id
                out_path = os.path.join(options.face_log,out_name)
                if options.verbose:
                    print("    Saving Face To:",out_path)
                tile.save(out_path)
    
    if not options.detect_only:
        score_start = time.time()
        scores = face_client.score(face_records, face_records)
        score_stop = time.time()
    
        if options.scores_csv is not None:
            scores_csv_file = open(options.scores_csv,'w')
            scores_csv = csv.writer(scores_csv_file)
            scores_csv.writerow(['face_id1','filename1','detect1_id','detect1_score','face_id2','filename2','detect2_id','detect2_score','score','match'])
            scores_csv_file.flush()
    
    
        r,c = scores.shape
        for i in range(0,r):
            for j in range(i+1,c):
                filename1 = face_records[i].source
                filename2 = face_records[j].source
                det1 = face_records[i].detection
                det2 = face_records[j].detection
    
                if (not options.matches_only) or (scores[i,j] < options.match_thresh):
                    print( filename1,det1.detection_id,filename2,det1.detection_id, i,j,scores[i,j]<options.match_thresh,scores[i,j])
                if scores_csv is not None:
                    if (not options.matches_only) or (scores[i,j] < options.match_thresh):
                        scores_csv.writerow([i,filename1,det1.detection_id,det1.score,j,filename2,det2.detection_id,det2.score,scores[i,j],scores[i,j]<options.match_thresh])
                        scores_csv_file.flush()
                if scores[i,j] < options.match_thresh:
                    tile1 = pt.image_proto2pv(face_records[i].view)
                    tile2 = pt.image_proto2pv(face_records[j].view)
                    cvim1 = tile1.asOpenCV2()
                    cvim2 = tile2.asOpenCV2()
                    cvim3 = np.concatenate([cvim1,cvim2],axis=1)
                    im = pv.Image(cvim3)
                    if options.match_log:
                        try:
                            os.makedirs(options.match_log)
                        except:
                            pass
    
                        out_name = 'match_%05d_%05d_s%0.4f.png'%(i,j,scores[i,j])
                        out_path = os.path.join(options.match_log,out_name)
                        print("    Saving Match To:",out_path)
                        im.save(out_path)

    extract_time = extract_stop - extract_start
    template_count = len(face_records)
    print("Images: %d @ %0.1f"%(im_count,im_count/extract_time))
    print("Templates: %d @ %0.1f @time %0.1f"%(template_count,template_count/extract_time,extract_time))
    if not options.detect_only:
        score_time = score_stop - score_start
        score_count = scores.shape[0]*scores.shape[1]
        print("Comparisons: %d @ %0.1f per sec"%(score_count, score_count/score_time,))
    
    if options.verbose:
        print( "done")
        
        
        
        
        
        
        
