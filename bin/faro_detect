#! /usr/bin/env python

'''
MIT License

Copyright (c) 2019 Oak Ridge National Laboratory

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.

Created on Jul 18, 2018

@author: bolme
'''

import sys
import os

#print(( __file__,os.path.dirname(__file__) ))

#print((sys.path))
#sys.path.append(os.path.join(os.path.dirname(__file__),'proto'))
#print((sys.path))

import optparse

import pyvision as pv
import faro.proto.face_service_pb2_grpc as fs
import grpc
#import skimage
#import skimage.io
import faro.proto.proto_types as pt
import faro.proto.face_service_pb2 as fsd
import csv
import multiprocessing as mp
import faro

def parseOptions():
    '''
    Parse command line arguments.
    '''
    args = ['<dir_name>'] # Add the names of arguments here.
    n_args = len(args)
    args = " ".join(args)
    description = '''Insert program description here.'''
    epilog = '''Created by David Bolme - bolmeds@ornl.gov'''
    
    version = "0.0.0"
    
    # Setup the parser
    parser = optparse.OptionParser(usage='%s [OPTIONS] %s'%(sys.argv[0],args),version=version,description=description,epilog=epilog)

    # Here are some templates for standard option formats.
    #parser.add_option("-q", "--quiet", action="store_false", dest="verbose", default=True,
    #                 help="Decrease the verbosity of the program")
    
    #parser.add_option("-b", "--bool", action="store_true", dest="my_bool", default=False,
    #                  help="don't print status messages to stdout")
    
    parser.add_option("-b", "--best", action="store_true", dest="best", default=False,
                      help="Detect the best face in the image.")
    
    parser.add_option("-d", "--display", action="store_true", dest="display", default=False,
                      help="Display the results.")
    
    
    #parser.add_option( "-c","--choice", type="choice", choices=['c1','c2','c3'], dest="my_choice", default="c1",
    #                  help="Choose an option.")

    parser.add_option( "-t","--thresh", type="float", dest="threshold", default=0.9,
                      help="Set the detection threshold. default=0.9")

    parser.add_option( "--log-scale", type="float", dest="log_scale", default=1.0,
                      help="Apply a scale to the images before saving them to the log. default=1.0")

    parser.add_option( "--scan-overlap", type="float", dest="scan_overlap", default=0.2,
                      help="Overlap scan windows by this much. default=0.2")


    #parser.add_option( "-i","--int", type="int", dest="my_int", default=0,
    #                  help="An integer value.")

    parser.add_option( "--scan-levels", type="int", dest="scan_levels", default=0,
                      help="Scan across this many octaves to detect small faces in large images.")

    parser.add_option( "--scale-levels", type="int", dest="scale_levels", default=0,
                      help="Downsample this many octaves to reduce the size of large images.")

    parser.add_option( "-w","--workers", type="int", dest="worker_count", default=0,
                      help="The number of workers to use to load and process images.")

    #parser.add_option( "-s","--str", type="str", dest="my_str", default="default",
    #                  help="A string value.")

    parser.add_option( "-o","--output", type="str", dest="csv_filename", default=None,
                      help="The filename for the output csv file.")

    parser.add_option( "-l","--log", type="str", dest="log_dir", default=None,
                      help="Save output images to dis directory.")

    #parser.add_option( "-p","--port", type="str", dest="port", default="localhost:50030",
    #                  help="Set the port of the service. default=localhost:50030")
    
    parser.add_option( "--detect-port", type="str", dest="detect_port", default="localhost:50030",
                      help="The port used for the recognition service.")

    parser.add_option( "--recognition-port", type="str", dest="rec_port", default="localhost:50030",
                      help="The port used for the recognition service.")




    # Parse the arguments and return the results.
    (options, args) = parser.parse_args()
    
    if len(args) != n_args:
        parser.print_help()
        print()
        print("Please supply exactly %d arguments."%n_args)
        print()
        exit(-1)
        
    return options,args

options = None
#channel = None
#rec_stub = None
face_client = None

def processImage(filepath):
    #global channel, rec_stub, options
    global face_client,options
    
    
    if face_client == None:
        face_client = faro.FaceClient(options)
        face_client.status(verbose=True)
    
    print("Processing:",filepath)
        
    im = pv.Image(filepath)
    
    face_records = face_client.detect(im)
    
    det_id = 0
    rows = []
    for face_rec in face_records.face_records:
        score = face_rec.detection.score
        det_class = face_rec.detection.detection_class
        rect = pt.rect_proto2pv(face_rec.detection.location)
        print("   ",score,rect)
        im.annotatePolygon(rect.asPolygon(),width=3)
        row = [filepath,det_id,det_class,score,rect.x,rect.y,rect.w,rect.h]
        rows.append(row)
        det_id += 1
        
    if options.log_dir is not None:
        filename = os.path.basename(filepath)
        out_name = os.path.join(options.log_dir,filename)
        print("    Saving to",out_name)
        if not os.path.isdir(options.log_dir):
            os.mkdir(options.log_dir)
        im.asAnnotated().save(out_name)

    return rows

# the main function.
if __name__ == '__main__':
    global options
    options,args = parseOptions()

    #channel = grpc.insecure_channel(options.port)
    #rec_stub = fs.FaceRecognitionStub(channel)
    # Load a watch list
    
    out_file = None
    out_csv = None
    if options.csv_filename is not None:
        out_file = open(options.csv_filename,'w')
        out_csv = csv.writer(out_file)
        out_csv.writerow(['path','detect_id','detect_type','score','x','y','w','h'])
    
    
    # scan a diectory
    filepaths = []
    for path,dirs,files in os.walk(args[0]):
        for filename in files:
            filepath = os.path.join(path,filename)

            if not pv.isImage(filename):
                continue

            filepaths.append(filepath)
            
    print("Found %d images."%len(filepaths))
    results = None
    if options.worker_count > 1:
        pool = mp.Pool(options.worker_count)
        results = pool.map(processImage,filepaths)
    else:
        print("running single process...")
        results = map(processImage,filepaths)
        
    if out_csv is not None:
        for rows in results:
            for row in rows:
                out_csv.writerow(row)
    

                
                
                
